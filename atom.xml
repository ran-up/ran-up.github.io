<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ranup前端笔记汇总</title>
  
  <subtitle>一个前端小白的苦闷路程</subtitle>
  <link href="http://ran-up.github.io/atom.xml" rel="self"/>
  
  <link href="http://ran-up.github.io/"/>
  <updated>2025-02-21T16:51:12.246Z</updated>
  <id>http://ran-up.github.io/</id>
  
  <author>
    <name>ranup</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nuxt简易实战oppo官网</title>
    <link href="http://ran-up.github.io/2025/02/13/SSR/nuxt/nuxt%E7%AE%80%E6%98%93%E5%AE%9E%E6%88%98oppo%E5%AE%98%E7%BD%91/"/>
    <id>http://ran-up.github.io/2025/02/13/SSR/nuxt/nuxt%E7%AE%80%E6%98%93%E5%AE%9E%E6%88%98oppo%E5%AE%98%E7%BD%91/</id>
    <published>2025-02-12T16:36:16.000Z</published>
    <updated>2025-02-21T16:51:12.246Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ssr-实战"><a href="#ssr-实战" class="headerlink" title="ssr 实战"></a>ssr 实战</h2><p>oppo 官网，实现了 OPPO 专区、OnePlus 专区、智能硬件、详情页 的内容。</p><p>服务、登录、注册 只实现了简单的页面跳转实现。</p><p>OPPO 专区 轮播图下的那 8 个 分类可以点击跳转到 详情页，其他两个页面的不行。</p><p>另外封装了 useFetch 进行数据请求，并且做了数据备份，即使后面的 api 失效了，会自动使用本地数据。</p><h2 id="项目演示"><a href="#项目演示" class="headerlink" title="项目演示"></a>项目演示</h2><p><img src="/images/SSR/nuxt/nuxt%E7%AE%80%E6%98%93%E5%AE%9E%E6%88%98oppo%E5%AE%98%E7%BD%91/%E6%BC%94%E7%A4%BA.gif"></p><h2 id="项目技术"><a href="#项目技术" class="headerlink" title="项目技术"></a>项目技术</h2><ul><li>vue3</li><li>nuxt3</li><li>element-plus</li><li>TypeScript</li><li>pinia</li><li>scss</li><li>normalize.css</li></ul><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><ul><li>assets<ul><li>css<ul><li>global.scss – 全局的样式重置</li><li>variables.scss – 全局变量</li></ul></li><li>cus-font&#x2F; – iconfont 文件</li><li>images<ul><li>saveImg&#x2F; – 备份图片</li></ul></li></ul></li><li>components<ul><li>appFooter.vue – 尾部组件</li><li>appHeader.vue – 头部组件</li><li>baseContent.vue – 统一管理组件</li><li>categoryGrid.vue – 分类信息内容组件</li><li>categorySection.vue – 分类信息组件</li><li>categoryTitle.vue – 分类信息的名称组件</li><li>gridItem.vue – 分类信息的小 i tem 组件</li><li>navbar.vue – 导航组件</li><li>search.vue – 搜索框组件</li><li>swiper.vue – 轮播图组件</li><li>tabCategory.vue – 分类组件</li></ul></li><li>layouts<ul><li>default.vue – 默认布局</li><li>empty.vue – 空布局，登录、注册、404 等组件使用</li></ul></li><li>pages<ul><li>[…slug].vue – 404 组件</li><li>category-detail.vue – 分类详情</li><li>index.vue – 主页、OPPO 专区</li><li>intelligent.vue – 智能硬件</li><li>login.vue – 登录</li><li>one-plus.vue – OnePlus 专区</li><li>oppo-service.vue – 服务</li><li>register.vue – 注册</li></ul></li><li>plugins<ul><li>element-plus.client.js – ElementPlus 中文化配置</li></ul></li><li>public&#x2F; – 静态目录，可以直接使用该目录下的图片</li><li>service<ul><li>saveData&#x2F; – 备份的 api 数据<ul><li>detailInfo.ts – 详情信息</li><li>homeInfo.ts – OPPO 专区</li><li>homeIntelligentInfo.ts – 智能硬件</li><li>onePlusInfo.ts – OnePlus 专区</li></ul></li><li>detail.ts – 详情页 的接口请求</li><li>home.ts – 首页等三个页面的 接口请求</li><li>index.ts – useFetch() 接口封装</li></ul></li><li>store<ul><li>detail.ts – 详情页类型定义</li><li>home.ts – 首页类型定义与 pinia 使用</li></ul></li><li>app.vue</li><li>nuxt.config.ts</li><li>package-lock.json</li><li>package.json</li><li>README.md</li><li>tsconfig.json</li></ul><h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><ul><li><p>创建项目：<code>npx nuxi init oppo-nuxt</code></p></li><li><p>安装依赖：<code>npm i</code></p></li><li><p>初始化 css：<code>npm i normalize.css</code></p></li><li><p>安装 sass 与 element-plus：<code>npm i sass element-plus @element-plus/nuxt</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建 plugins/element-plus.client.js</span></span><br><span class="line"><span class="comment">// 配置 element-plus 中文化</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPLus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; zhCn &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus/es/locale/index.mjs&#x27;</span></span><br><span class="line"><span class="comment">// import zhCn from &#x27;element-plus/es/locale/lang/zh-cn&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtPlugin</span>(<span class="function"><span class="params">nuxtApp</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> nuxtApp.<span class="property">vueApp</span>.<span class="title function_">use</span>(<span class="title class_">ElementPLus</span>, &#123;</span><br><span class="line">    <span class="attr">locale</span>: zhCn</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>nuxt.config.ts</code> 配置：</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">  <span class="attr">css</span>: [<span class="string">&#x27;normalize.css&#x27;</span>, <span class="string">&#x27;element-plus/dist/index.css&#x27;</span>],</span><br><span class="line">  <span class="attr">modules</span>: [<span class="string">&#x27;@element-plus/nuxt&#x27;</span>],</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;@/plugins/element-plus.client.js&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在 app.vue 中测试上面的配置是否生效</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;page&quot;&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot;&gt;默认&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;success&quot;&gt;成功&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.page &#123;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">  background: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>终端运行：<code>npm run dev</code> 查看结果，背景颜色、border 生效，表明 sass 生效；div 盒子紧靠页面左边，表明 normalize.css 生效；button 样式和 element-plus 的效果一样，表明其生效。</p><p><img src="/images/SSR/nuxt/nuxt%E7%AE%80%E6%98%93%E5%AE%9E%E6%88%98oppo%E5%AE%98%E7%BD%91/%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA.png"></p></li></ul><h2 id="配置-SCSS"><a href="#配置-SCSS" class="headerlink" title="配置 SCSS"></a>配置 SCSS</h2><h3 id="编写公共样式数据"><a href="#编写公共样式数据" class="headerlink" title="编写公共样式数据"></a>编写公共样式数据</h3><p><code>assets/css/variables.scss</code> 公共样式文件。</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$contentWidth</span>: <span class="number">1248px</span>; <span class="comment">// 内容宽</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$appHeaderHeight</span>: <span class="number">36px</span>; <span class="comment">// app header 的高度</span></span><br><span class="line"><span class="variable">$navBarHeight</span>: <span class="number">84px</span>; <span class="comment">// 导航栏高度 68 + 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// logo</span></span><br><span class="line"><span class="variable">$logoWidth</span>: <span class="number">250px</span>;</span><br><span class="line"><span class="variable">$logoHeight</span>: <span class="number">50px</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$swiperHeight</span>: <span class="number">480px</span>; <span class="comment">// 轮播图高</span></span><br><span class="line"><span class="variable">$categoryBarHeight</span>: <span class="number">120px</span>; <span class="comment">// 分类栏高</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 商品图片</span></span><br><span class="line"><span class="variable">$imgWidth</span>: <span class="number">130px</span>;</span><br><span class="line"><span class="variable">$imgHeight</span>: <span class="number">150px</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$gridItemHeight</span>: <span class="number">300px</span>; <span class="comment">// 商品图片 item 高度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// appFooter</span></span><br><span class="line"><span class="variable">$appFooterTop</span>: <span class="number">82px</span>;</span><br><span class="line"><span class="variable">$appFooterCenter</span>: <span class="number">360px</span>;</span><br><span class="line"><span class="variable">$appFooterBottom</span>: <span class="number">58px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字体</span></span><br><span class="line"><span class="variable">$fontSize16</span>: <span class="number">16px</span>;</span><br><span class="line"><span class="variable">$fontSize15</span>: <span class="number">15px</span>;</span><br><span class="line"><span class="variable">$fontSize14</span>: <span class="number">14px</span>;</span><br><span class="line"><span class="variable">$fontSize12</span>: <span class="number">12px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字体颜色</span></span><br><span class="line"><span class="variable">$textTitleColor</span>: <span class="number">#000</span>; <span class="comment">// 标题字体颜色</span></span><br><span class="line"><span class="variable">$textSubColor</span>: <span class="number">#535353</span>; <span class="comment">// 导航字体颜色</span></span><br><span class="line"><span class="variable">$textRedColor</span>: <span class="built_in">rgb</span>(<span class="number">246</span>, <span class="number">52</span>, <span class="number">52</span>); <span class="comment">// 红色字体</span></span><br><span class="line"><span class="variable">$priceColor</span>: <span class="number">#f34141</span>; <span class="comment">// 价格字体颜色</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 背景颜色</span></span><br><span class="line"><span class="variable">$bgColor</span>: <span class="number">#fff</span>; <span class="comment">// 白色背景</span></span><br><span class="line"><span class="variable">$bgGrayColor</span>: <span class="number">#fafafa</span>; <span class="comment">// 灰色背景</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 背景精灵图 -- 没有这张图片</span></span><br><span class="line"><span class="keyword">@mixin</span> bgSpride() &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&#x27;@/assets/images/spride.png&#x27;</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 水平居中的 flex</span></span><br><span class="line"><span class="keyword">@mixin</span> normalFlex(<span class="variable">$direction</span>: row, <span class="variable">$content</span>: space-between) &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: <span class="variable">$direction</span>;</span><br><span class="line">  <span class="attribute">justify-content</span>: <span class="variable">$content</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 粘性定位</span></span><br><span class="line"><span class="keyword">@mixin</span> elementSticky(<span class="variable">$top</span>: <span class="number">0px</span>, <span class="variable">$z</span>: <span class="number">100</span>) &#123;</span><br><span class="line">  postion: sticky;</span><br><span class="line">  <span class="attribute">top</span>: <span class="variable">$top</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="variable">$z</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标hover</span></span><br><span class="line"><span class="keyword">@mixin</span> hoverEffect() &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.2s</span> linear;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">3px</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">8px</span> <span class="number">0</span> <span class="built_in">rgb</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> / <span class="number">10%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单行字体省略</span></span><br><span class="line"><span class="keyword">@mixin</span> textEllipsis() &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多行文字省略</span></span><br><span class="line"><span class="keyword">@mixin</span> textMultiEllipsis(<span class="variable">$line</span>: <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-box-orient: vertical;</span><br><span class="line">  -webkit-line-clamp: <span class="variable">$line</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 调试专用 */</span></span><br><span class="line"><span class="comment">// boder</span></span><br><span class="line"><span class="keyword">@mixin</span> border(<span class="variable">$color</span>: red) &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写全局样式"><a href="#编写全局样式" class="headerlink" title="编写全局样式"></a>编写全局样式</h3><p><code>assets/css/global.scss</code> 全局样式文件</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @use &#x27;@/assets/css/variables.scss&#x27; as *; // nuxt.config.ts 配置自动导入</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;normalize.css&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="variable">$contentWidth</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$fontSize14</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在 <code>nuxt.config.ts</code> 文件添加 <code>.scss</code> 文件的自动导入配置。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">  <span class="attr">compatibilityDate</span>: <span class="string">&#x27;2024-11-01&#x27;</span>,</span><br><span class="line">  <span class="attr">devtools</span>: &#123; <span class="attr">enabled</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  <span class="comment">// css: [&#x27;normalize.css&#x27;, &#x27;element-plus/dist/index.css&#x27;], // 在 assets/css/global.scss 中导入了</span></span><br><span class="line">  <span class="attr">css</span>: [<span class="string">&#x27;@/assets/css/global.scss&#x27;</span>],</span><br><span class="line">  <span class="attr">vite</span>: &#123;</span><br><span class="line">    <span class="attr">css</span>: &#123;</span><br><span class="line">      <span class="attr">preprocessorOptions</span>: &#123;</span><br><span class="line">        <span class="attr">scss</span>: &#123;</span><br><span class="line">          <span class="attr">additionalData</span>: <span class="string">&#x27;@use &quot;@/assets/css/variables.scss&quot; as *;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">modules</span>: [<span class="string">&#x27;@element-plus/nuxt&#x27;</span>],</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;@/plugins/element-plus.client.js&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>修改 app.vue 文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;wrapper bg&quot;&gt;Page: index&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.bg &#123;</span><br><span class="line">  background-color: $bgGrayColor;</span><br><span class="line">  @include border();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/SSR/nuxt/nuxt%E7%AE%80%E6%98%93%E5%AE%9E%E6%88%98oppo%E5%AE%98%E7%BD%91/%E9%85%8D%E7%BD%AEscss%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E5%AF%BC%E5%85%A5.png"></p><h2 id="编写默认布局"><a href="#编写默认布局" class="headerlink" title="编写默认布局"></a>编写默认布局</h2><h3 id="layouts-x2F-default-vue"><a href="#layouts-x2F-default-vue" class="headerlink" title="layouts&#x2F;default.vue"></a>layouts&#x2F;default.vue</h3><p>新建 <code>components/appHeader.vue</code>、<code>components/appFooter.vue</code> 文件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;app-header /&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;app-footer /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="app-vue"><a href="#app-vue" class="headerlink" title="app.vue"></a>app.vue</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;NuxtLayout&gt;</span><br><span class="line">    &lt;NuxtPage /&gt;</span><br><span class="line">  &lt;/NuxtLayout&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="编写头部"><a href="#编写头部" class="headerlink" title="编写头部"></a>编写头部</h2><p>将 iconfont 内容复制到 assets 目录，这里的 iconfongt 文件夹叫 cus-font 目录。修改 <code>nuxt.config.ts</code>。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="attr">css</span>: [<span class="string">&#x27;@/assets/css/global.scss&#x27;</span>, <span class="string">&#x27;@/assets/cus-font/iconfont.css&#x27;</span>]</span><br></pre></td></tr></table></figure><p>修改 <code>components/appHeader.vue</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app-header&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;wrapper content&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;content-left&quot;&gt;</span><br><span class="line">        &lt;nuxt-link class=&quot;link&quot; to=&quot;/&quot;&gt;</span><br><span class="line">          &lt;span&gt;OPPO官网&lt;/span&gt;</span><br><span class="line">        &lt;/nuxt-link&gt;</span><br><span class="line">        &lt;nuxt-link class=&quot;link&quot; to=&quot;/&quot;&gt;</span><br><span class="line">          &lt;span&gt;一加官网&lt;/span&gt;</span><br><span class="line">        &lt;/nuxt-link&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;content-right&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot; class=&quot;link download&quot;&gt;</span><br><span class="line">          &lt;span&gt;下载 OPPO 商城APP&lt;/span&gt;</span><br><span class="line">          &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">            &lt;img class=&quot;ecode&quot; src=&quot;@/assets/images/ecode.png&quot; alt=&quot;OPPO&quot; /&gt;</span><br><span class="line">            &lt;div class=&quot;name&quot;&gt;扫码下载 OPPO 商城 App&lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;NuxtLink to=&quot;/login&quot; class=&quot;link&quot;&gt;</span><br><span class="line">          &lt;i class=&quot;iconfont icon-user&quot;&gt;&lt;/i&gt;</span><br><span class="line">          &lt;span&gt;登录&lt;/span&gt;</span><br><span class="line">        &lt;/NuxtLink&gt;</span><br><span class="line">        &lt;NuxtLink to=&quot;/register&quot; class=&quot;link&quot;&gt;</span><br><span class="line">          &lt;span&gt;注册&lt;/span&gt;</span><br><span class="line">        &lt;/NuxtLink&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot; class=&quot;link&quot;&gt;</span><br><span class="line">          &lt;i class=&quot;iconfont icon-shoppingcart&quot;&gt;&lt;/i&gt;</span><br><span class="line">          &lt;span&gt;购物车 &lt;/span&gt;</span><br><span class="line">          &lt;span&gt;(0)&lt;/span&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">defineOptions(&#123; name: &#x27;AppHeader&#x27; &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.app-header &#123;</span><br><span class="line">  height: $appHeaderHeight;</span><br><span class="line">  background-color: #000;</span><br><span class="line">  @include elementSticky(0, 110);</span><br><span class="line">  .link span &#123;</span><br><span class="line">    opacity: 0.8; // 字体变暗</span><br><span class="line">  &#125;</span><br><span class="line">  .content &#123;</span><br><span class="line">    /* @include border(); */</span><br><span class="line">    height: 100%;</span><br><span class="line">    @include normalFlex();</span><br><span class="line">    &amp;-left &#123;</span><br><span class="line">      @include normalFlex(row, flex-start);</span><br><span class="line">      align-items: center;</span><br><span class="line">      .link &#123;</span><br><span class="line">        margin-right: 24px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;-right &#123;</span><br><span class="line">      @include normalFlex(row, flex-end);</span><br><span class="line">      align-items: center;</span><br><span class="line">      .link &#123;</span><br><span class="line">        padding: 0 14px;</span><br><span class="line">        border-right: 1px solid #fff;</span><br><span class="line">      &#125;</span><br><span class="line">      .link:last-child &#123;</span><br><span class="line">        border-right: none;</span><br><span class="line">      &#125;</span><br><span class="line">      i &#123;</span><br><span class="line">        margin-right: 6px;</span><br><span class="line">      &#125;</span><br><span class="line">      .icon &#123;</span><br><span class="line">        &amp;-user &#123;</span><br><span class="line">          font-size: 12px;</span><br><span class="line">        &#125;</span><br><span class="line">        &amp;-shoppingcart &#123;</span><br><span class="line">          font-size: 15px;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .download &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        &amp;:hover .app &#123;</span><br><span class="line">          display: block;</span><br><span class="line">        &#125;</span><br><span class="line">        .app &#123;</span><br><span class="line">          display: none;</span><br><span class="line">          position: absolute;</span><br><span class="line">          top: 25px;</span><br><span class="line">          left: 0;</span><br><span class="line">          padding: 8px;</span><br><span class="line">          min-width: 146px;</span><br><span class="line">          box-shadow: 0 4px 8px 0 rgb(0 0 0 / 10%);</span><br><span class="line">          z-index: 10000;</span><br><span class="line">        &#125;</span><br><span class="line">        .ecode &#123;</span><br><span class="line">          width: 140px;</span><br><span class="line">          height: 140px;</span><br><span class="line">          margin-bottom: 4px;</span><br><span class="line">        &#125;</span><br><span class="line">        .name &#123;</span><br><span class="line">          color: #000;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="编写尾部"><a href="#编写尾部" class="headerlink" title="编写尾部"></a>编写尾部</h2><p>将图片<code>f-icon1到5</code> 放到 public&#x2F;images 目录下，方便直接使用。编写 <code>components/appFooter.vue</code>文件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app-footer&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;wrapper content&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;content-top&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot; class=&quot;top-item&quot; v-for=&quot;item in footerIcons&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">          &lt;img :src=&quot;item.picStr&quot; :alt=&quot;item.title&quot; /&gt;</span><br><span class="line">          &lt;div&gt;&#123;&#123; item.title &#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;content-center&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;center-item&quot;&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;a class=&quot;first&quot; href=&quot;&quot;&gt;OPPO&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;Find N 全新折叠旗舰&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;OPPO Find X5 Pro&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;OPPO Find X5&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;OPPO Reno9 Pro+&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;OPPO Reno9 Pro&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;OPPO Reno9&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;OPPO Reno8&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;OPPO K10x&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;OPPO K10&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;center-item&quot;&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;a class=&quot;first&quot; href=&quot;&quot;&gt;一加&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;一加 Ace Pro&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;一加 Ace&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;一加 Ace 竞速版&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;一加 10 Pro&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;一加手表&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;一加 Buds Pro&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;一加 Buds Z2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;center-item&quot;&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;&lt;a class=&quot;first&quot; href=&quot;&quot;&gt;智能硬件&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;OPPO Watch 3&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;OPPO 手环 2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;OPPO Watch 2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;OPPO Pad&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;OPPO Pad Air&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;OPPO Enco X2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;OPPO Enco Air2 Pro&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;a href=&quot;&quot;&gt;OPPO Enco Air2&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;connect&quot;&gt;</span><br><span class="line">          &lt;img src=&quot;@/assets/images/phone.svg&quot; alt=&quot;phone&quot; /&gt;</span><br><span class="line">          &lt;span&gt;在线客服&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;content-bottom&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;bottom-item&quot;&gt;</span><br><span class="line">          &lt;a href=&quot;&quot;&gt; © 2004-2022 OPPO 版权所有粤ICP备14056724号&lt;/a&gt;</span><br><span class="line">          &lt;span&gt;|&lt;/span&gt;&lt;a href=&quot;&quot;&gt;隐私政策&lt;/a&gt;&lt;span&gt;|&lt;/span&gt;&lt;a href=&quot;&quot;&gt;用户使用协议&lt;/a&gt;</span><br><span class="line">          &lt;span&gt;|&lt;/span&gt;&lt;a href=&quot;&quot;&gt;资质证照&lt;/a&gt;&lt;span&gt;|&lt;/span&gt;&lt;a href=&quot;&quot;&gt;知识产权&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;bottom-item&quot;&gt;</span><br><span class="line">          &lt;img class=&quot;police&quot; src=&quot;@/assets/images/police.png&quot; alt=&quot;police&quot; /&gt;</span><br><span class="line">          &lt;a href=&quot;#&quot;&gt;粤公安网备 44190002001939号&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">interface IFooterIcon &#123;</span><br><span class="line">  id: number</span><br><span class="line">  picStr: string</span><br><span class="line">  title: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">defineProps(&#123;</span><br><span class="line">  footerIcons: &#123;</span><br><span class="line">    type: Array&lt;IFooterIcon&gt;,</span><br><span class="line">    default: () =&gt; [</span><br><span class="line">      &#123;</span><br><span class="line">        id: 100,</span><br><span class="line">        picStr: &#x27;/images/f-icon1.svg&#x27;, // 需要将图片放在public目录</span><br><span class="line">        title: &#x27;全国联保&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: 100,</span><br><span class="line">        picStr: &#x27;/images/f-icon2.svg&#x27;,</span><br><span class="line">        title: &#x27;7天无理由退货&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: 100,</span><br><span class="line">        picStr: &#x27;/images/f-icon3.svg&#x27;,</span><br><span class="line">        title: &#x27;官方换货保障&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: 100,</span><br><span class="line">        picStr: &#x27;/images/f-icon4.svg&#x27;,</span><br><span class="line">        title: &#x27;满69元包邮&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: 100,</span><br><span class="line">        picStr: &#x27;/images/f-icon5.svg&#x27;,</span><br><span class="line">        title: &#x27;900+ 家售后网点&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">defineOptions(&#123; name: &#x27;AppFooter&#x27; &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.app-footer &#123;</span><br><span class="line">  padding-top: 42px;</span><br><span class="line">  .content-top &#123;</span><br><span class="line">    padding-bottom: 40px;</span><br><span class="line">    @include normalFlex();</span><br><span class="line">    height: $appFooterTop;</span><br><span class="line">    border-bottom: 1px solid rgba(0, 0, 0, 0.12);</span><br><span class="line">    .top-item &#123;</span><br><span class="line">      @include normalFlex(column, center);</span><br><span class="line">      align-items: center;</span><br><span class="line">      gap: 8px 0;</span><br><span class="line">      font-size: 17px;</span><br><span class="line">      color: rgba(0, 0, 0, 0.7);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .content-center &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin: 42px 0;</span><br><span class="line">    @include normalFlex(row, flex-start);</span><br><span class="line">    height: $appFooterCenter;</span><br><span class="line">    border-bottom: 1px sold rgba(0, 0, 0, 0.12);</span><br><span class="line">    .center-item &#123;</span><br><span class="line">      margin-right: 30px;</span><br><span class="line">      a &#123;</span><br><span class="line">        margin-bottom: 12px;</span><br><span class="line">        line-height: 35px;</span><br><span class="line">        white-space: nowrap;</span><br><span class="line">        font-size: 17px;</span><br><span class="line">        color: #535353;</span><br><span class="line">        opacity: 0.8;</span><br><span class="line">      &#125;</span><br><span class="line">      .first &#123;</span><br><span class="line">        opacity: 1;</span><br><span class="line">        color: rgba(0, 0, 0, 0.87);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .connect &#123;</span><br><span class="line">      position: absolute;</span><br><span class="line">      top: 0;</span><br><span class="line">      right: 0;</span><br><span class="line">      width: 173px;</span><br><span class="line">      height: 51px;</span><br><span class="line">      @include normalFlex(row, center);</span><br><span class="line">      align-items: center;</span><br><span class="line">      gap: 0 10px;</span><br><span class="line">      font-size: 15px;</span><br><span class="line">      color: #fff;</span><br><span class="line">      background-color: #000;</span><br><span class="line">      border-radius: 26px;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .content-bottom &#123;</span><br><span class="line">    margin-bottom: 30px;</span><br><span class="line">    height: $appFooterBottom;</span><br><span class="line">    .bottom-item &#123;</span><br><span class="line">      margin-top: 14px;</span><br><span class="line">      margin-right: 3px;</span><br><span class="line">      font-size: 12px;</span><br><span class="line">      color: #acabb0;</span><br><span class="line">      a &#123;</span><br><span class="line">        margin: 0 6px;</span><br><span class="line">        color: #acabb0;</span><br><span class="line">      &#125;</span><br><span class="line">      .police &#123;</span><br><span class="line">        /* position: relative;</span><br><span class="line">        top: 4px; */</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="配置-SEO"><a href="#配置-SEO" class="headerlink" title="配置 SEO"></a>配置 SEO</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nuxt.config.ts</span></span><br><span class="line"><span class="attr">app</span>: &#123;</span><br><span class="line">    <span class="attr">head</span>: &#123;</span><br><span class="line">      <span class="attr">meta</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&#x27;OPPO专区，官方正品，最新最全的OPPO手机产品以及配件在线抢购！&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;keywords&#x27;</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&#x27;OPPO商城，OPPO专区, OPPO手机，OPPO配件，OPPO, OPPO官网商城&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">link</span>: [&#123; <span class="attr">rel</span>: <span class="string">&#x27;icon&#x27;</span>, <span class="attr">type</span>: <span class="string">&#x27;image/x-icon&#x27;</span>, <span class="attr">href</span>: <span class="string">&#x27;/logo.png&#x27;</span> &#125;],</span><br><span class="line">      <span class="attr">noscript</span>: [&#123; <span class="attr">children</span>: <span class="string">&#x27;Javascript is required&#x27;</span> &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="配置-slug-页面"><a href="#配置-slug-页面" class="headerlink" title="配置 slug 页面"></a>配置 slug 页面</h2><p>slug 页面就是 404 页面。新建 <code>pages/[...slug].vue</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-empty :image-size=&quot;200&quot; description=&quot;暂无此页面&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">definePageMeta(&#123;</span><br><span class="line">  name: &#x27;emptyPage&#x27;,</span><br><span class="line">  layout: &#x27;empty&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.el-empty &#123;</span><br><span class="line">  width: 100vw;</span><br><span class="line">  height: 100vh;</span><br><span class="line">  @include normalFlex(column, center);</span><br><span class="line">  align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">::v-deep(.el-empty__description p) &#123;</span><br><span class="line">  font-size: 26px !important;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="空布局"><a href="#空布局" class="headerlink" title="空布局"></a>空布局</h2><p><code>layouts/empty.vue</code>，给不显示 header 和 footer 的页面使用。通过 <code>definePageMeta(&#123;layout: &#39;empty&#39;&#125;)</code> 使用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="登录注册"><a href="#登录注册" class="headerlink" title="登录注册"></a>登录注册</h2><p>这里登录注册就不详细编写了，有个页面就可以，主要是熟悉 nuxt 的编写流程那些。</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p><code>pages/login.vue</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">definePageMeta(&#123; layout: &#x27;empty&#x27; &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;Page: login&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p><code>pages/register.vue</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">definePageMeta(&#123; layout: &#x27;empty&#x27; &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;Page: register&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="编写主页剩下内容"><a href="#编写主页剩下内容" class="headerlink" title="编写主页剩下内容"></a>编写主页剩下内容</h2><p>因为主页现在剩下的内容在其他两个页面时可以复用的，所以采用组件可复用形式。</p><p>下面的组件内容，均是请求完数据后的代码数据，这里不展示静态的代码结构。</p><p>编写顺序：</p><ul><li>导航。</li><li>统一组件：轮播图、分类、单个分类信息。</li><li>OnePlus 专区、智能硬件：复用统一组件</li><li>首页的导航设置其点击跳转到详情页</li></ul><h3 id="修改默认布局"><a href="#修改默认布局" class="headerlink" title="修改默认布局"></a>修改默认布局</h3><p><code>layouts/default.vue</code>。这里将导航放置到默认布局中，能够让使用默认布局的页面直接复用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 头部 --&gt;</span><br><span class="line">    &lt;app-header /&gt;</span><br><span class="line">    &lt;!-- 导航 --&gt;</span><br><span class="line">    &lt;navbar :navbars=&quot;homeInfoStore.navbars&quot; /&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;!-- 尾部 --&gt;</span><br><span class="line">    &lt;app-footer /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; getHomeInfoReq &#125; from &#x27;~/service/home&#x27;</span><br><span class="line">import &#123; useHomeInfoStore &#125; from &#x27;~/store/home&#x27;</span><br><span class="line">import type &#123; Categorys, Navbars &#125; from &#x27;~/store/home&#x27;</span><br><span class="line">import homeInfoSave from &#x27;~/service/saveData/homeInfo&#x27;</span><br><span class="line"></span><br><span class="line">// 首页和默认布局中都获取了首页数据。</span><br><span class="line">// 首页和其余页面的切换都需要重新获取首页数据</span><br><span class="line">// 不同的是，默认布局只在详情页才进行获取首页数据。</span><br><span class="line">const homeInfoStore = useHomeInfoStore() // pinia 仓库</span><br><span class="line">// 在详情页刷新时请求首页数据</span><br><span class="line">if (homeInfoStore.banners.length === 0) &#123;</span><br><span class="line">  const &#123; data &#125; = await getHomeInfoReq() // 请求首页数据</span><br><span class="line">  // 错误处理</span><br><span class="line">  const errorSolve = () =&gt; &#123;</span><br><span class="line">    // client 和 server 需要分开处理</span><br><span class="line">    if (import.meta.client) &#123;</span><br><span class="line">      ElMessage.error(&#x27;获取首页数据失败，使用备份数据&#x27;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      console.log(&#x27;获取首页数据失败，使用备份数据&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 使用备份数据</span><br><span class="line">    const homeInfo = ref(homeInfoSave.data)</span><br><span class="line">    // 更新pinia仓库数据</span><br><span class="line">    homeInfoStore.updateNavbar(homeInfo.value.navbars as Navbars)</span><br><span class="line">    homeInfoStore.updateBanner(homeInfo.value.banners)</span><br><span class="line">    homeInfoStore.updateCategory(homeInfo.value.categorys as unknown as Categorys)</span><br><span class="line">  &#125;</span><br><span class="line">  // 接口请求失败则使用备份数据</span><br><span class="line">  if (!data.value) &#123;</span><br><span class="line">    errorSolve()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    const &#123; code, data: curData &#125; = data.value</span><br><span class="line">    if (code === 200) &#123;</span><br><span class="line">      // 更新pinia仓库数据</span><br><span class="line">      homeInfoStore.updateNavbar(curData.navbars)</span><br><span class="line">      homeInfoStore.updateBanner(curData.banners)</span><br><span class="line">      homeInfoStore.updateCategory(curData.categorys)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // 返回数据失败则使用备份数据</span><br><span class="line">      errorSolve()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="编写导航"><a href="#编写导航" class="headerlink" title="编写导航"></a>编写导航</h3><h4 id="导航组件"><a href="#导航组件" class="headerlink" title="导航组件"></a>导航组件</h4><p><code>components/navbar.vue</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;navbar&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;wrapper content&quot;&gt;</span><br><span class="line">      &lt;!-- logo --&gt;</span><br><span class="line">      &lt;NuxtLink to=&quot;/&quot; class=&quot;content-left&quot;&gt;</span><br><span class="line">        &lt;!-- logo图片 --&gt;</span><br><span class="line">        &lt;img src=&quot;/logo.png&quot; class=&quot;logo&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">        &lt;!-- logo title，设置有助于 SEO--&gt;</span><br><span class="line">        &lt;!-- 设置 z-index 将其设置到页面外 --&gt;</span><br><span class="line">        &lt;h1 class=&quot;title&quot;&gt;OPPO官网&lt;/h1&gt;</span><br><span class="line">      &lt;/NuxtLink&gt;</span><br><span class="line">      &lt;ul class=&quot;content-center&quot;&gt;</span><br><span class="line">        &lt;template v-if=&quot;navbars.length &gt; 0&quot;&gt;</span><br><span class="line">          &lt;li</span><br><span class="line">            :class=&quot;&#123; active: item.title === curTabName &#125;&quot;</span><br><span class="line">            @click=&quot;changeTabHandler(item.title as string)&quot;</span><br><span class="line">            v-for=&quot;item in navbars&quot;</span><br><span class="line">            :key=&quot;item.id&quot;</span><br><span class="line">          &gt;</span><br><span class="line">            &lt;NuxtLink class=&quot;link&quot; :to=&quot;getPathName(item.title as string)&quot;&gt;</span><br><span class="line">              &#123;&#123; item.title &#125;&#125;</span><br><span class="line">            &lt;/NuxtLink&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">      &lt;!-- 搜索框组件 --&gt;</span><br><span class="line">      &lt;search class=&quot;content-right&quot;&gt;&lt;/search&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import type &#123; INavbar &#125; from &#x27;~/store/home&#x27;</span><br><span class="line"></span><br><span class="line">defineProps(&#123;</span><br><span class="line">  navbars: &#123;</span><br><span class="line">    type: Array&lt;INavbar&gt;,</span><br><span class="line">    default: () =&gt; []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">const route = useRoute()</span><br><span class="line">const paths: any = reactive(&#123;</span><br><span class="line">  OPPO专区: &#x27;/&#x27;,</span><br><span class="line">  OnePlus专区: &#x27;/one-plus&#x27;,</span><br><span class="line">  智能硬件: &#x27;/intelligent&#x27;,</span><br><span class="line">  服务: &#x27;/oppo-service&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">const curTabName = ref&lt;string&gt;(&#x27;OPPO专区&#x27;)</span><br><span class="line">// 切换tab</span><br><span class="line">const changeTabHandler = (tabName: string) =&gt; &#123;</span><br><span class="line">  curTabName.value = tabName</span><br><span class="line">&#125;</span><br><span class="line">// 获取路径</span><br><span class="line">// 这里需要根据传递的title获取具体的路径，通过函数调用，所以返回的一个函数</span><br><span class="line">const getPathName = computed(() =&gt; &#123;</span><br><span class="line">  return (title: string) =&gt; &#123;</span><br><span class="line">    return paths[title] || &#x27;/&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 页面加载完成后，根据当前路径激活当前 tab</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  const curPath = route.path</span><br><span class="line">  // 遍历 paths，找到当前路径对应的 tabName</span><br><span class="line">  for (const [key, value] of Object.entries(paths)) &#123;</span><br><span class="line">    if (value === curPath) &#123;</span><br><span class="line">      curTabName.value = key</span><br><span class="line">      break</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.navbar &#123;</span><br><span class="line">  @include elementSticky(36px);</span><br><span class="line">  height: $navBarHeight;</span><br><span class="line">  border-bottom: 1px solid rgba(0, 0, 0, 0.06);</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  z-index: 99;</span><br><span class="line">  .content &#123;</span><br><span class="line">    @include normalFlex(row, flex-start);</span><br><span class="line">    align-items: center;</span><br><span class="line">    height: 100%;</span><br><span class="line">    &amp;-left &#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      width: $logoWidth;</span><br><span class="line">      height: $logoHeight;</span><br><span class="line">      .logo &#123;</span><br><span class="line">        height: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">      .title &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        height: 0;</span><br><span class="line">        text-indent: -999px;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;-center &#123;</span><br><span class="line">      @include normalFlex();</span><br><span class="line">      margin-left: 60px;</span><br><span class="line">      width: 530px;</span><br><span class="line">      .link &#123;</span><br><span class="line">        opacity: 0.55;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        color: #000;</span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">          opacity: 1;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .active .link &#123;</span><br><span class="line">        opacity: 1;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;-right &#123;</span><br><span class="line">      margin-left: 50px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><p>首页的数据包含：菜单、轮播图、分类。</p><h5 id="封装-useFetch"><a href="#封装-useFetch" class="headerlink" title="封装 useFetch"></a>封装 useFetch</h5><p><code>service/index.ts</code></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">AsyncData</span>, <span class="title class_">UseFetchOptions</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;#app&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 网络请求地址</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BASE_URL</span> = <span class="string">&#x27;http://codercba.com:9060/oppo-nuxt/api&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> methodType = <span class="string">&#x27;GET&#x27;</span> | <span class="string">&#x27;POST&#x27;</span> <span class="comment">// 请求方式</span></span><br><span class="line"><span class="comment">// 响应数据接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IResponseResult</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">data</span>: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RXRequest</span> &#123;</span><br><span class="line">  request&lt;T&gt;(</span><br><span class="line">    <span class="attr">url</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">method</span>: methodType,</span><br><span class="line">    data?: <span class="built_in">any</span>,</span><br><span class="line">    options?: <span class="title class_">UseFetchOptions</span>&lt;T, <span class="built_in">any</span>, <span class="built_in">any</span>&gt;</span><br><span class="line">  ): <span class="title class_">Promise</span>&lt;<span class="title class_">AsyncData</span>&lt;T, <span class="built_in">any</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">newOptions</span>: <span class="title class_">UseFetchOptions</span>&lt;T, <span class="built_in">any</span>, <span class="built_in">any</span>&gt; = &#123;</span><br><span class="line">        <span class="attr">baseURL</span>: <span class="variable constant_">BASE_URL</span>,</span><br><span class="line">        <span class="attr">method</span>: method || <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        ...options</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (method === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        newOptions.<span class="property">query</span> = data</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newOptions.<span class="property">body</span> = data</span><br><span class="line">      &#125;</span><br><span class="line">      useFetch&lt;T&gt;(url, newOptions <span class="keyword">as</span> <span class="built_in">any</span>)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res <span class="keyword">as</span> <span class="title class_">AsyncData</span>&lt;T, <span class="built_in">any</span>&gt;)</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get&lt;T&gt;(<span class="attr">url</span>: <span class="built_in">string</span>, data?: <span class="built_in">any</span>, options?: <span class="title class_">UseFetchOptions</span>&lt;T, <span class="built_in">any</span>, <span class="built_in">any</span>&gt;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">request</span>&lt;T&gt;(url, <span class="string">&#x27;GET&#x27;</span>, data, options)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  post&lt;T&gt;(<span class="attr">url</span>: <span class="built_in">string</span>, params?: <span class="built_in">any</span>, options?: <span class="title class_">UseFetchOptions</span>&lt;T, <span class="built_in">any</span>, <span class="built_in">any</span>&gt;) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">request</span>&lt;T&gt;(url, <span class="string">&#x27;POST&#x27;</span>, params, options)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">RXRequest</span>()</span><br></pre></td></tr></table></figure><h5 id="请求首页数据"><a href="#请求首页数据" class="headerlink" title="请求首页数据"></a>请求首页数据</h5><p><code>service/home.ts</code>。这里的 ts 类型在 <code>store/home.ts</code> 中编写的。可以先写 any，然后再根据请求的数据来编写 ts 类型。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">RXRequest</span> <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">IResponseResult</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">IHomeInfo</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store/home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首页（OPPO专区）数据请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getHomeInfoReq</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">RXRequest</span>.<span class="property">get</span>&lt;<span class="title class_">IResponseResult</span>&lt;<span class="title class_">IHomeInfo</span>&gt;&gt;(<span class="string">&#x27;/home/info&#x27;</span>, &#123; <span class="attr">type</span>: <span class="string">&#x27;oppo&#x27;</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// OnePlus专区数据请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getHomeOnePlusInfoReq</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">RXRequest</span>.<span class="property">get</span>&lt;<span class="title class_">IResponseResult</span>&lt;<span class="title class_">IHomeInfo</span>&gt;&gt;(<span class="string">&#x27;/home/info&#x27;</span>, &#123; <span class="attr">type</span>: <span class="string">&#x27;onePlus&#x27;</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 智能硬件数据请求</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getHomeIntelligentInfoReq</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">RXRequest</span>.<span class="property">get</span>&lt;<span class="title class_">IResponseResult</span>&lt;<span class="title class_">IHomeInfo</span>&gt;&gt;(<span class="string">&#x27;/home/info&#x27;</span>, &#123; <span class="attr">type</span>: <span class="string">&#x27;intelligent&#x27;</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置-pinia"><a href="#配置-pinia" class="headerlink" title="配置 pinia"></a>配置 pinia</h5><p>这里我们采用 pinia 保存数据。</p><p>安装：<code>npm i pinia @nuxt/pinia</code></p><p>配置 <code>nuxt.config.ts</code>：</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: [<span class="string">&#x27;@pinia/nuxt&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="保存首页数据"><a href="#保存首页数据" class="headerlink" title="保存首页数据"></a>保存首页数据</h5><p><code>store/home.ts</code></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// navbar 接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">INavbar</span> &#123;</span><br><span class="line">  id?: <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line">  title?: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">type</span>?: <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line">  showName?: <span class="built_in">number</span></span><br><span class="line">  url?: <span class="built_in">string</span></span><br><span class="line">  jsonUrl?: <span class="built_in">string</span></span><br><span class="line">  clickUrl?: <span class="built_in">string</span></span><br><span class="line">  jsonClickUrl?: <span class="built_in">string</span></span><br><span class="line">  beginAt?: <span class="literal">null</span></span><br><span class="line">  endAt?: <span class="literal">null</span></span><br><span class="line">  seq?: <span class="built_in">number</span></span><br><span class="line">  labelDetailss?: []</span><br><span class="line">  link?: <span class="built_in">string</span></span><br><span class="line">  isLogin?: <span class="built_in">number</span></span><br><span class="line">  moduleCode?: <span class="built_in">string</span></span><br><span class="line">  rows?: <span class="built_in">number</span></span><br><span class="line">  cols?: <span class="built_in">number</span></span><br><span class="line">  maxProductNum?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// banner 接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IBanner</span> &#123;</span><br><span class="line">  id?: <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line">  picStr?: <span class="built_in">string</span></span><br><span class="line">  link?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// activityList 接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IActivityList</span> &#123;</span><br><span class="line">  <span class="keyword">type</span>?: <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line">  activityInfo?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// activityList 类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> activityList = <span class="title class_">IActivityList</span>[]</span><br><span class="line"><span class="comment">// productDetailss 接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IProductDetailss</span> &#123;</span><br><span class="line">  id?: <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line">  skuId?: <span class="built_in">number</span></span><br><span class="line">  title?: <span class="built_in">string</span></span><br><span class="line">  secondTitle?: <span class="built_in">string</span></span><br><span class="line">  thirdTitle?: <span class="built_in">string</span></span><br><span class="line">  url?: <span class="built_in">string</span></span><br><span class="line">  jsonUrl?: <span class="built_in">string</span></span><br><span class="line">  video?: <span class="built_in">string</span></span><br><span class="line">  seq?: <span class="built_in">number</span></span><br><span class="line">  configKeyLattice?: <span class="built_in">number</span></span><br><span class="line">  latticeIndex?: <span class="built_in">number</span></span><br><span class="line">  configProductType?: <span class="built_in">number</span></span><br><span class="line">  goodsSpuId?: <span class="built_in">number</span></span><br><span class="line">  goodsSpuName?: <span class="built_in">string</span></span><br><span class="line">  isShowIcon?: <span class="built_in">number</span></span><br><span class="line">  topIcon?: <span class="built_in">string</span></span><br><span class="line">  cardType?: <span class="built_in">number</span></span><br><span class="line">  backColor?: <span class="built_in">string</span></span><br><span class="line">  liveInfoJson?: <span class="literal">null</span></span><br><span class="line">  businessInfoJson?: <span class="literal">null</span></span><br><span class="line">  priceInfo?: &#123;</span><br><span class="line">    originalPrice?: <span class="built_in">string</span></span><br><span class="line">    price?: <span class="built_in">string</span></span><br><span class="line">    marketPrice?: <span class="built_in">string</span></span><br><span class="line">    buyPrice?: <span class="built_in">string</span></span><br><span class="line">    prefix?: <span class="built_in">string</span></span><br><span class="line">    suffix?: <span class="built_in">string</span></span><br><span class="line">    currencyTag?: <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line">  price?: <span class="built_in">number</span></span><br><span class="line">  originalPrice?: <span class="literal">null</span></span><br><span class="line">  categoryId?: <span class="built_in">number</span></span><br><span class="line">  link?: <span class="built_in">string</span></span><br><span class="line">  isLogin?: <span class="built_in">number</span></span><br><span class="line">  marketPrice?: <span class="built_in">string</span></span><br><span class="line">  nameLabel?: <span class="literal">null</span></span><br><span class="line">  imageLabel?: <span class="literal">null</span></span><br><span class="line">  extendList?: <span class="literal">null</span></span><br><span class="line">  heytapInfo?: <span class="literal">null</span></span><br><span class="line">  activityList?: activityList</span><br><span class="line">  placeholderLabel?: &#123;</span><br><span class="line">    <span class="keyword">type</span>?: <span class="built_in">number</span> | <span class="built_in">string</span></span><br><span class="line">    activityInfo?: <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line">  vipDiscounts?: <span class="literal">null</span></span><br><span class="line">  nameLabelWidth?: <span class="literal">null</span></span><br><span class="line">  nameLabelHeight?: <span class="literal">null</span></span><br><span class="line">  pricePrefix?: <span class="built_in">string</span></span><br><span class="line">  priceSuffix?: <span class="literal">null</span></span><br><span class="line">  goodsTopCategoryId?: <span class="built_in">number</span></span><br><span class="line">  goodsTopCategoryName?: <span class="built_in">string</span></span><br><span class="line">  goodsCategoryId?: <span class="built_in">number</span></span><br><span class="line">  goodsCategoryName?: <span class="built_in">string</span></span><br><span class="line">  skuName?: <span class="built_in">string</span></span><br><span class="line">  cardInfoType?: <span class="literal">null</span></span><br><span class="line">  liveUrl?: <span class="literal">null</span></span><br><span class="line">  storage?: <span class="literal">null</span></span><br><span class="line">  seckill?: <span class="literal">null</span></span><br><span class="line">  rankInfo?: <span class="literal">null</span></span><br><span class="line">  businessLink?: <span class="built_in">string</span></span><br><span class="line">  sellPoints?: <span class="literal">null</span></span><br><span class="line">  commentCount?: <span class="literal">null</span></span><br><span class="line">  commentRate?: <span class="literal">null</span></span><br><span class="line">  interenve?: <span class="built_in">boolean</span></span><br><span class="line">  productDetailLabelss?: <span class="built_in">any</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// productDetailss 类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">ProductDetailss</span> = <span class="title class_">IProductDetailss</span>[]</span><br><span class="line"><span class="comment">// category 接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ICategory</span> &#123;</span><br><span class="line">  id?: <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line">  picStr?: <span class="built_in">string</span></span><br><span class="line">  title?: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">type</span>?: <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line">  url?: <span class="built_in">string</span></span><br><span class="line">  moduleCode?: <span class="built_in">string</span></span><br><span class="line">  productDetailss?: <span class="title class_">ProductDetailss</span></span><br><span class="line">  link?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Navbars</span> = <span class="title class_">INavbar</span>[] <span class="comment">// navbars 类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Banners</span> = <span class="title class_">IBanner</span>[] <span class="comment">// banners 类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Categorys</span> = <span class="title class_">ICategory</span>[] <span class="comment">// categorys 类型</span></span><br><span class="line"><span class="comment">// homeInfo 接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IHomeInfo</span> &#123;</span><br><span class="line">  <span class="attr">navbars</span>: <span class="title class_">Navbars</span></span><br><span class="line">  <span class="attr">banners</span>: <span class="title class_">Banners</span></span><br><span class="line">  <span class="attr">categorys</span>: <span class="title class_">Categorys</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useHomeInfoStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;homeInfo&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: (): <span class="function"><span class="params">IHomeInfo</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">navbars</span>: [], <span class="comment">// 导航数据</span></span><br><span class="line">    <span class="attr">banners</span>: [], <span class="comment">// 轮播图数据</span></span><br><span class="line">    <span class="attr">categorys</span>: [] <span class="comment">// 分类数据</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 更新导航数据</span></span><br><span class="line">    <span class="title function_">updateNavbar</span>(<span class="params">payload: Navbars</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">navbars</span> = payload</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 更新轮播图数据</span></span><br><span class="line">    <span class="title function_">updateBanner</span>(<span class="params">payload: Banners</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">banners</span> = payload</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 更新分类数据</span></span><br><span class="line">    <span class="title function_">updateCategory</span>(<span class="params">payload: Categorys</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">categorys</span> = payload</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="统一管理组件"><a href="#统一管理组件" class="headerlink" title="统一管理组件"></a>统一管理组件</h3><p>OPPO 专区、OnePlus 专区、智能硬件中均存在 <strong>轮播图、分类、单个分类信息</strong>，且结构类似，所以将这几个部分单独在一个组件中进行引用，后续直接单独引用这一个组件即可。</p><p><code>components/baseContent.vue</code>。这个组件包含主页剩下的所有组件，方便在后面两个页面的引入。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 轮播图 --&gt;</span><br><span class="line">    &lt;swiper :banners=&quot;banners&quot; /&gt;</span><br><span class="line">    &lt;!-- 分类导航 --&gt;</span><br><span class="line">    &lt;tab-category :categorys=&quot;categorys&quot; /&gt;</span><br><span class="line">    &lt;!-- 分类详情 --&gt;</span><br><span class="line">    &lt;template v-for=&quot;category in categorys&quot; :key=&quot;category.id&quot;&gt;</span><br><span class="line">      &lt;!-- 单个分类详情 --&gt;</span><br><span class="line">      &lt;category-section :category=&quot;category&quot; /&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import type &#123; IBanner, ICategory &#125; from &#x27;~/store/home&#x27;</span><br><span class="line"></span><br><span class="line">defineProps(&#123;</span><br><span class="line">  banners: &#123;</span><br><span class="line">    type: Array&lt;IBanner&gt;,</span><br><span class="line">    default: () =&gt; []</span><br><span class="line">  &#125;,</span><br><span class="line">  categorys: &#123;</span><br><span class="line">    type: Array&lt;ICategory&gt;,</span><br><span class="line">    default: () =&gt; []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="修改主页"><a href="#修改主页" class="headerlink" title="修改主页"></a>修改主页</h3><p><code>pages/index.vue</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">    &lt;!-- 页面统一管理组件 --&gt;</span><br><span class="line">    &lt;base-content</span><br><span class="line">      :banners=&quot;homeInfoStore.banners&quot;</span><br><span class="line">      :categorys=&quot;homeInfoStore.categorys&quot;</span><br><span class="line">      class=&quot;wrapper&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; getHomeInfoReq &#125; from &#x27;~/service/home&#x27;</span><br><span class="line">import &#123; useHomeInfoStore &#125; from &#x27;~/store/home&#x27;</span><br><span class="line">import type &#123; Categorys, Navbars &#125; from &#x27;~/store/home&#x27;</span><br><span class="line">import homeInfoSave from &#x27;~/service/saveData/homeInfo&#x27;</span><br><span class="line"></span><br><span class="line">// 首页和默认布局中都获取了首页数据。</span><br><span class="line">// 首页和其余页面的切换都需要重新获取首页数据</span><br><span class="line">// 不同的是，默认布局只在详情页才进行获取首页数据。</span><br><span class="line">const homeInfoStore = useHomeInfoStore() // pinia 仓库</span><br><span class="line">const &#123; data &#125; = await getHomeInfoReq() // 请求首页数据</span><br><span class="line">// 错误处理</span><br><span class="line">const errorSolve = () =&gt; &#123;</span><br><span class="line">  // client 和 server 需要分开处理</span><br><span class="line">  if (import.meta.client) &#123;</span><br><span class="line">    ElMessage.error(&#x27;获取首页数据失败，使用备份数据&#x27;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.log(&#x27;获取首页数据失败，使用备份数据&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  // 使用备份数据</span><br><span class="line">  const homeInfo = ref(homeInfoSave.data)</span><br><span class="line">  // 更新pinia仓库数据</span><br><span class="line">  homeInfoStore.updateNavbar(homeInfo.value.navbars as Navbars)</span><br><span class="line">  homeInfoStore.updateBanner(homeInfo.value.banners)</span><br><span class="line">  homeInfoStore.updateCategory(homeInfo.value.categorys as unknown as Categorys)</span><br><span class="line">&#125;</span><br><span class="line">// 接口请求失败则使用备份数据</span><br><span class="line">if (!data.value) &#123;</span><br><span class="line">  errorSolve()</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  const &#123; code, data: curData &#125; = data.value</span><br><span class="line">  if (code === 200) &#123;</span><br><span class="line">    // 更新pinia仓库数据</span><br><span class="line">    homeInfoStore.updateNavbar(curData.navbars)</span><br><span class="line">    homeInfoStore.updateBanner(curData.banners)</span><br><span class="line">    homeInfoStore.updateCategory(curData.categorys)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 返回数据失败则使用备份数据</span><br><span class="line">    errorSolve()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.home &#123;</span><br><span class="line">  background-color: $bgGrayColor;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="编写轮播图"><a href="#编写轮播图" class="headerlink" title="编写轮播图"></a>编写轮播图</h3><p><code>components/swiper.vue</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;swiper&quot;&gt;</span><br><span class="line">    &lt;el-carousel</span><br><span class="line">      height=&quot;480px&quot;</span><br><span class="line">      trigger=&quot;click&quot;</span><br><span class="line">      indicator-position=&quot;none&quot;</span><br><span class="line">      @change=&quot;changeHandler&quot;</span><br><span class="line">      :active-index=&quot;activeIndex&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;el-carousel-item v-for=&quot;item in banners&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &lt;img class=&quot;pic-str&quot; :src=&quot;item.picStr&quot; alt=&quot;OPPO&quot; /&gt;</span><br><span class="line">      &lt;/el-carousel-item&gt;</span><br><span class="line">    &lt;/el-carousel&gt;</span><br><span class="line">    &lt;!-- 指示器 --&gt;</span><br><span class="line">    &lt;ul class=&quot;dots&quot;&gt;</span><br><span class="line">      &lt;li</span><br><span class="line">        class=&quot;dot&quot;</span><br><span class="line">        v-for=&quot;(item, index) in banners&quot;</span><br><span class="line">        :key=&quot;item.id&quot;</span><br><span class="line">        :class=&quot;&#123; active: index === activeIndex &#125;&quot;</span><br><span class="line">      &gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import type &#123; IBanner &#125; from &#x27;~/store/home&#x27;</span><br><span class="line"></span><br><span class="line">defineProps(&#123;</span><br><span class="line">  banners: &#123;</span><br><span class="line">    type: Array&lt;IBanner&gt;,</span><br><span class="line">    default: () =&gt; []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">const activeIndex = ref&lt;number&gt;(0)</span><br><span class="line">const changeHandler = (index: number) =&gt; &#123;</span><br><span class="line">  activeIndex.value = index</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.swiper &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  padding-top: 36px;</span><br><span class="line">  .pic-str &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  .dots &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    @include normalFlex(row, center);</span><br><span class="line">    align-items: center;</span><br><span class="line">    gap: 0 10px;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 40px;</span><br><span class="line">    .dot &#123;</span><br><span class="line">      opacity: 0.8;</span><br><span class="line">      width: 10px;</span><br><span class="line">      height: 10px;</span><br><span class="line">      background-color: #fff;</span><br><span class="line">      border-radius: 10px;</span><br><span class="line">      box-sizing: border-box;</span><br><span class="line">      cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line">    .active &#123;</span><br><span class="line">      opacity: 1;</span><br><span class="line">      width: 12px;</span><br><span class="line">      height: 12px;</span><br><span class="line">      background-color: transparent;</span><br><span class="line">      border: 1px solid #fff;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="编写分类"><a href="#编写分类" class="headerlink" title="编写分类"></a>编写分类</h3><p><code>components/tabCategory.vue</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;tab-category wrapper&quot;&gt;</span><br><span class="line">    &lt;template v-for=&quot;item in categorys&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">      &lt;!-- 这里跳转详情页只在 OPPO专区（首页）的分类中进行跳转，其他页面不需要跳转 --&gt;</span><br><span class="line">      &lt;NuxtLink :to=&quot;$route.path === &#x27;/&#x27; ? `/category-detail?type=$&#123;item.type&#125;` : &#x27;&#x27;&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;category-item&quot;&gt;</span><br><span class="line">          &lt;img class=&quot;pic-str&quot; :src=&quot;item.picStr&quot; alt=&quot;OPPO&quot; /&gt;</span><br><span class="line">          &lt;div class=&quot;title&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/NuxtLink&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import type &#123; ICategory &#125; from &#x27;~/store/home&#x27;</span><br><span class="line"></span><br><span class="line">defineProps(&#123;</span><br><span class="line">  categorys: &#123;</span><br><span class="line">    type: Array&lt;ICategory&gt;,</span><br><span class="line">    default: () =&gt; []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.tab-category &#123;</span><br><span class="line">  margin-top: 40px;</span><br><span class="line">  @include normalFlex();</span><br><span class="line">  align-items: center;</span><br><span class="line">  .category-item &#123;</span><br><span class="line">    @include normalFlex(column, center);</span><br><span class="line">    align-items: center;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    .pic-str &#123;</span><br><span class="line">      width: 80px;</span><br><span class="line">      height: 80px;</span><br><span class="line">    &#125;</span><br><span class="line">    .title &#123;</span><br><span class="line">      margin-top: 16px;</span><br><span class="line">      max-width: 120px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      font-size: 16px;</span><br><span class="line">      color: #000;</span><br><span class="line">      /* @include border(); */</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="编写单个分类信息"><a href="#编写单个分类信息" class="headerlink" title="编写单个分类信息"></a>编写单个分类信息</h3><p>这里将每个分类内容的 titile 和 内容 拆分为各自单独的组件，内容后面可以在详情页复用。</p><h4 id="分类主页"><a href="#分类主页" class="headerlink" title="分类主页"></a>分类主页</h4><p><code>components/categorySection.vue</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 分类信息存在才展示这个页面，没有不展示 --&gt;</span><br><span class="line">  &lt;div class=&quot;category-section&quot; v-if=&quot;(category?.productDetailss ?? []).length &gt; 0&quot;&gt;</span><br><span class="line">    &lt;!-- 分类标题 --&gt;</span><br><span class="line">    &lt;category-title :title=&quot;category?.title&quot; /&gt;</span><br><span class="line">    &lt;!-- 分类item，包含大图介绍和小的item --&gt;</span><br><span class="line">    &lt;category-grid :categoryUrl=&quot;category?.url&quot; :productDetailss=&quot;category?.productDetailss&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import type &#123; ICategory &#125; from &#x27;~/store/home&#x27;</span><br><span class="line"></span><br><span class="line">interface prop &#123;</span><br><span class="line">  category?: ICategory</span><br><span class="line">&#125;</span><br><span class="line">const &#123; category &#125; = defineProps&lt;prop&gt;()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="分类-title"><a href="#分类-title" class="headerlink" title="分类 title"></a>分类 title</h4><p><code>components/categoryTitle.vue</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;category-title&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; title &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">defineProps(&#123; title: String &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.category-title &#123;</span><br><span class="line">  h2 &#123;</span><br><span class="line">    margin: 0 0 24px 0;</span><br><span class="line">    padding-top: 60px;</span><br><span class="line">    font-size: 24px;</span><br><span class="line">    font-weight: 500;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="分类内容"><a href="#分类内容" class="headerlink" title="分类内容"></a>分类内容</h4><h5 id="主页"><a href="#主页" class="headerlink" title="主页"></a>主页</h5><p><code>components/categoryGrid.vue</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;category-grid wrapper&quot;&gt;</span><br><span class="line">    &lt;!-- 详情页不展示分类介绍图片 --&gt;</span><br><span class="line">    &lt;!-- 可以在详情页传入空置或者使用布尔类型直接判断 --&gt;</span><br><span class="line">    &lt;div class=&quot;category-grid-item first&quot; v-if=&quot;categoryUrl.length &gt; 0&quot;&gt;</span><br><span class="line">      &lt;img :src=&quot;categoryUrl&quot; alt=&quot;OPPO&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class=&quot;category-grid-item&quot;</span><br><span class="line">      v-for=&quot;productDetail in productDetailss&quot;</span><br><span class="line">      :key=&quot;productDetail.id&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;!-- 单个item信息 --&gt;</span><br><span class="line">      &lt;grid-item :productDetail /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import type &#123; IProductDetailss &#125; from &#x27;~/store/home&#x27;</span><br><span class="line"></span><br><span class="line">defineProps(&#123;</span><br><span class="line">  productDetailss: &#123;</span><br><span class="line">    type: Array&lt;IProductDetailss&gt;,</span><br><span class="line">    default: () =&gt; []</span><br><span class="line">  &#125;,</span><br><span class="line">  // 大图片，占两个位置，40%的宽度</span><br><span class="line">  categoryUrl: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    default: &#x27;&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.category-grid &#123;</span><br><span class="line">  @include normalFlex(row, flex-start);</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  /* 使其与上面的内容对齐 */</span><br><span class="line">  width: $contentWidth + 18px;</span><br><span class="line">  .category-grid-item &#123;</span><br><span class="line">    margin-bottom: 18px;</span><br><span class="line">    padding-right: 18px;</span><br><span class="line">    width: 20%;</span><br><span class="line">    height: $gridItemHeight;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    background-color: $bgGrayColor;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">  &#125;</span><br><span class="line">  .first &#123;</span><br><span class="line">    width: 40%;</span><br><span class="line">    img &#123;</span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 100%;</span><br><span class="line">      transition: all 0.2s linear;</span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        @include hoverEffect();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="单个-item"><a href="#单个-item" class="headerlink" title="单个 item"></a>单个 item</h5><p><code>components/gridItem.vue</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;grid-item&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;item-img&quot;&gt;&lt;img class=&quot;img&quot; :src=&quot;productDetail.url&quot; alt=&quot;&quot; /&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;item-title&quot;&gt;&#123;&#123; productDetail.title &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;item-labels&quot;&gt;</span><br><span class="line">      &lt;!-- 没有活动内容的显示&#x27;敬请期待&#x27; --&gt;</span><br><span class="line">      &lt;template v-if=&quot;(productDetail.activityList ?? []).length &gt; 0&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;label&quot; v-for=&quot;item in productDetail.activityList&quot; :key=&quot;item.type&quot;&gt;</span><br><span class="line">          &#123;&#123; item.activityInfo &#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;span class=&quot;label&quot; v-else&gt;敬请期待&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;item-price&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;prefix&quot;&gt;</span><br><span class="line">        &#123;&#123; productDetail.priceInfo?.prefix &#125;&#125;&#123;&#123; productDetail.priceInfo?.currencyTag &#125;&#125;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &lt;!-- 没有提供价格则显示&#x27;暂无报价&#x27; --&gt;</span><br><span class="line">      &lt;span class=&quot;price&quot;&gt;&#123;&#123; productDetail.priceInfo?.buyPrice || &#x27;暂无报价&#x27; &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import type &#123; IProductDetailss &#125; from &#x27;~/store/home&#x27;</span><br><span class="line"></span><br><span class="line">interface prop &#123;</span><br><span class="line">  productDetail: IProductDetailss</span><br><span class="line">&#125;</span><br><span class="line">const &#123; productDetail &#125; = defineProps&lt;prop&gt;()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.grid-item &#123;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  text-align: center;</span><br><span class="line">  border-radius: 8px;</span><br><span class="line">  transition: all 0.2s linear;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    @include hoverEffect();</span><br><span class="line">  &#125;</span><br><span class="line">  .item-img .img &#123;</span><br><span class="line">    margin-top: 14px;</span><br><span class="line">    margin-bottom: 7px;</span><br><span class="line">    width: $imgWidth;</span><br><span class="line">    height: $imgHeight;</span><br><span class="line">  &#125;</span><br><span class="line">  .item-title &#123;</span><br><span class="line">    margin-top: 2px;</span><br><span class="line">    padding: 0 20px;</span><br><span class="line">    font-size: 15px;</span><br><span class="line">    font-weight: 500;</span><br><span class="line">    text-align: center;</span><br><span class="line">    @include textEllipsis();</span><br><span class="line">  &#125;</span><br><span class="line">  .item-labels &#123;</span><br><span class="line">    @include normalFlex(row, center);</span><br><span class="line">    align-items: center;</span><br><span class="line">    height: 45px;</span><br><span class="line">    /* @include border(); */</span><br><span class="line">    .label &#123;</span><br><span class="line">      display: inline-block;</span><br><span class="line">      margin: 0 4px 4px 0;</span><br><span class="line">      padding: 1px 2px;</span><br><span class="line">      color: $priceColor;</span><br><span class="line">      font-size: 13px;</span><br><span class="line">      border: 1px solid $priceColor;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .item-price &#123;</span><br><span class="line">    padding-bottom: 40px;</span><br><span class="line">    .prefix &#123;</span><br><span class="line">      color: $priceColor;</span><br><span class="line">      font-size: 13px;</span><br><span class="line">    &#125;</span><br><span class="line">    .price &#123;</span><br><span class="line">      line-height: 1;</span><br><span class="line">      color: $priceColor;</span><br><span class="line">      font-size: 20px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="OnePlus-专区"><a href="#OnePlus-专区" class="headerlink" title="OnePlus 专区"></a>OnePlus 专区</h2><p><code>pages/one-plus.vue</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">    &lt;!-- 页面统一管理组件 --&gt;</span><br><span class="line">    &lt;base-content</span><br><span class="line">      :banners=&quot;homeInfoStore.banners&quot;</span><br><span class="line">      :categorys=&quot;homeInfoStore.categorys&quot;</span><br><span class="line">      class=&quot;wrapper&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; getHomeOnePlusInfoReq &#125; from &#x27;~/service/home&#x27;</span><br><span class="line">import &#123; useHomeInfoStore &#125; from &#x27;~/store/home&#x27;</span><br><span class="line">import type &#123; Categorys, Navbars &#125; from &#x27;~/store/home&#x27;</span><br><span class="line">import homeOnePlusInfoSave from &#x27;~/service/saveData/onePlusInfo&#x27;</span><br><span class="line"></span><br><span class="line">const homeInfoStore = useHomeInfoStore() // pinia 仓库</span><br><span class="line">const &#123; data &#125; = await getHomeOnePlusInfoReq() // 请求数据</span><br><span class="line">// 错误处理</span><br><span class="line">const errorSolve = () =&gt; &#123;</span><br><span class="line">  // client 和 server 需要分开处理</span><br><span class="line">  if (import.meta.client) &#123;</span><br><span class="line">    ElMessage.error(&#x27;获取OnePlus专区数据失败，使用备份数据&#x27;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.log(&#x27;获取OnePlus专区数据失败，使用备份数据&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  // 使用备份数据</span><br><span class="line">  const homeOnePlusInfo = ref(homeOnePlusInfoSave.data)</span><br><span class="line">  // 更新pinia仓库数据</span><br><span class="line">  homeInfoStore.updateNavbar(homeOnePlusInfo.value.navbars as Navbars)</span><br><span class="line">  homeInfoStore.updateBanner(homeOnePlusInfo.value.banners)</span><br><span class="line">  homeInfoStore.updateCategory(homeOnePlusInfo.value.categorys as unknown as Categorys)</span><br><span class="line">&#125;</span><br><span class="line">// 接口请求失败则使用备份数据</span><br><span class="line">if (!data.value) &#123;</span><br><span class="line">  errorSolve()</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  const &#123; code, data: curData &#125; = data.value</span><br><span class="line">  if (code === 200) &#123;</span><br><span class="line">    // 更新pinia仓库数据</span><br><span class="line">    homeInfoStore.updateNavbar(curData.navbars)</span><br><span class="line">    homeInfoStore.updateBanner(curData.banners)</span><br><span class="line">    homeInfoStore.updateCategory(curData.categorys)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 返回数据失败则使用备份数据</span><br><span class="line">    errorSolve()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.home &#123;</span><br><span class="line">  background-color: $bgGrayColor;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="智能硬件"><a href="#智能硬件" class="headerlink" title="智能硬件"></a>智能硬件</h2><p><code>pages/intelligent.vue</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">    &lt;!-- 页面统一管理组件 --&gt;</span><br><span class="line">    &lt;base-content</span><br><span class="line">      :banners=&quot;homeInfoStore.banners&quot;</span><br><span class="line">      :categorys=&quot;homeInfoStore.categorys&quot;</span><br><span class="line">      class=&quot;wrapper&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; getHomeIntelligentInfoReq &#125; from &#x27;~/service/home&#x27;</span><br><span class="line">import &#123; useHomeInfoStore &#125; from &#x27;~/store/home&#x27;</span><br><span class="line">import type &#123; Categorys, Navbars &#125; from &#x27;~/store/home&#x27;</span><br><span class="line">import homeIntelligentInfoSave from &#x27;~/service/saveData/homeIntelligentInfo&#x27;</span><br><span class="line"></span><br><span class="line">const homeInfoStore = useHomeInfoStore() // pinia 仓库</span><br><span class="line">const &#123; data &#125; = await getHomeIntelligentInfoReq() // 请求数据</span><br><span class="line">// 错误处理</span><br><span class="line">const errorSolve = () =&gt; &#123;</span><br><span class="line">  // client 和 server 需要分开处理</span><br><span class="line">  if (import.meta.client) &#123;</span><br><span class="line">    ElMessage.error(&#x27;获取智能硬件数据失败，使用备份数据&#x27;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.log(&#x27;获取智能硬件数据失败，使用备份数据&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  // 使用备份数据</span><br><span class="line">  const homeIntelligentInfo = ref(homeIntelligentInfoSave.data)</span><br><span class="line">  // 更新pinia仓库数据</span><br><span class="line">  homeInfoStore.updateNavbar(homeIntelligentInfo.value.navbars as Navbars)</span><br><span class="line">  homeInfoStore.updateBanner(homeIntelligentInfo.value.banners)</span><br><span class="line">  homeInfoStore.updateCategory(homeIntelligentInfo.value.categorys as unknown as Categorys)</span><br><span class="line">&#125;</span><br><span class="line">// 接口请求失败则使用备份数据</span><br><span class="line">if (!data.value) &#123;</span><br><span class="line">  errorSolve()</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  const &#123; code, data: curData &#125; = data.value</span><br><span class="line">  if (code === 200) &#123;</span><br><span class="line">    // 更新pinia仓库数据</span><br><span class="line">    homeInfoStore.updateNavbar(curData.navbars)</span><br><span class="line">    homeInfoStore.updateBanner(curData.banners)</span><br><span class="line">    homeInfoStore.updateCategory(curData.categorys)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 返回数据失败则使用备份数据</span><br><span class="line">    errorSolve()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.home &#123;</span><br><span class="line">  background-color: $bgGrayColor;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p><code>pages/oppo-service.vue</code>。服务只是一个简单的页面，并没有做相关的代码编写。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;Page: oppo-service&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="详情"><a href="#详情" class="headerlink" title="详情"></a>详情</h2><p><code>pages/category-detail.vue</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;oppo-detail&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">      &lt;el-tabs class=&quot;oppo-tabs&quot; v-model=&quot;activeName&quot;&gt;</span><br><span class="line">        &lt;template v-for=&quot;item in detailData&quot; :key=&quot;item?.id&quot;&gt;</span><br><span class="line">          &lt;el-tab-pane :label=&quot;item?.title&quot; :name=&quot;item?.title&quot;&gt;</span><br><span class="line">            &lt;category-grid :categoryUrl=&quot;&#x27;&#x27;&quot; :product-detailss=&quot;item?.productDetailss&quot; /&gt;</span><br><span class="line">          &lt;/el-tab-pane&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/el-tabs&gt;</span><br><span class="line">      &lt;el-divider&gt;</span><br><span class="line">        &lt;span class=&quot;no-more&quot;&gt;没有更多&lt;/span&gt;</span><br><span class="line">      &lt;/el-divider&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; getDetailReq &#125; from &#x27;~/service/detail&#x27;</span><br><span class="line">import detailInfoSave from &#x27;~/service/saveData/detailInfo&#x27;</span><br><span class="line">import type &#123; oppoType &#125; from &#x27;~/service/detail&#x27;</span><br><span class="line">import type &#123; IProductDetailss &#125; from &#x27;~/store/detail&#x27;</span><br><span class="line"></span><br><span class="line">const route = useRoute()</span><br><span class="line">const &#123; data &#125; = await getDetailReq(route.query.type as oppoType)</span><br><span class="line">const detailData = reactive&lt;IProductDetailss&gt;(&#123;&#125;) // 详情数据</span><br><span class="line">const activeName = ref(&#x27;&#x27;)</span><br><span class="line">// 错误处理</span><br><span class="line">const errorSolve = () =&gt; &#123;</span><br><span class="line">  // client 和 server 需要分开处理</span><br><span class="line">  if (import.meta.client) &#123;</span><br><span class="line">    ElMessage.error(&#x27;获取详情数据失败，使用备份数据&#x27;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.log(&#x27;获取详情数据失败，使用备份数据&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  // 使用备份数据</span><br><span class="line">  const detailInfo = ref(detailInfoSave.data)</span><br><span class="line">  Object.assign(detailData, detailInfo.value)</span><br><span class="line">  activeName.value = detailInfo.value[0].title as string</span><br><span class="line">&#125;</span><br><span class="line">if (!data.value) &#123;</span><br><span class="line">  errorSolve()</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  const &#123; code, data: curData &#125; = data.value</span><br><span class="line">  if (code === 200) &#123;</span><br><span class="line">    Object.assign(detailData, curData)</span><br><span class="line">    activeName.value = curData[0].title as string</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    errorSolve()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.oppo-detail &#123;</span><br><span class="line">  padding: 8px 0 60px 0;</span><br><span class="line">  background-color: $bgGrayColor;</span><br><span class="line">  .oppo-tabs &#123;</span><br><span class="line">    :deep(.el-tabs__header) &#123;</span><br><span class="line">      background-color: #fff;</span><br><span class="line">    &#125;</span><br><span class="line">    :deep(.el-tabs__nav-wrap) &#123;</span><br><span class="line">      padding: 0 52px;</span><br><span class="line">      height: 48px;</span><br><span class="line">      /* 底部线 */</span><br><span class="line">      &amp;::after &#123;</span><br><span class="line">        background-color: #fff;</span><br><span class="line">      &#125;</span><br><span class="line">      /* 按钮 */</span><br><span class="line">      .el-tabs__nav-prev,</span><br><span class="line">      .el-tabs__nav-next &#123;</span><br><span class="line">        width: 48px;</span><br><span class="line">        .el-icon,</span><br><span class="line">        svg &#123;</span><br><span class="line">          width: 25px;</span><br><span class="line">          height: 25px;</span><br><span class="line">        &#125;</span><br><span class="line">        svg &#123;</span><br><span class="line">          position: relative;</span><br><span class="line">          top: 10px;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      .el-tabs__active-bar &#123;</span><br><span class="line">        background-color: $priceColor;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    :deep(.el-tabs__item) &#123;</span><br><span class="line">      position: relative;</span><br><span class="line">      padding-top: 5px;</span><br><span class="line">      opacity: 0.6;</span><br><span class="line">      height: 48px;</span><br><span class="line">      font-weight: 400;</span><br><span class="line">      &amp;:hover,</span><br><span class="line">      &amp;.is-active &#123;</span><br><span class="line">        color: $priceColor;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .no-more &#123;</span><br><span class="line">    opacity: 0.5;</span><br><span class="line">    font-size: 18px;</span><br><span class="line">    color: #343a40;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ssr-实战&quot;&gt;&lt;a href=&quot;#ssr-实战&quot; class=&quot;headerlink&quot; title=&quot;ssr 实战&quot;&gt;&lt;/a&gt;ssr 实战&lt;/h2&gt;&lt;p&gt;oppo 官网，实现了 OPPO 专区、OnePlus 专区、智能硬件、详情页 的内容。&lt;/p&gt;
&lt;p&gt;服务</summary>
      
    
    
    
    <category term="SSR" scheme="http://ran-up.github.io/categories/SSR/"/>
    
    
    <category term="nuxt" scheme="http://ran-up.github.io/tags/nuxt/"/>
    
  </entry>
  
  <entry>
    <title>nuxt初体验</title>
    <link href="http://ran-up.github.io/2025/01/29/SSR/nuxt/nuxt%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://ran-up.github.io/2025/01/29/SSR/nuxt/nuxt%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2025-01-29T09:40:41.000Z</published>
    <updated>2025-02-15T04:03:09.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>SSR：Server side Render，服务器端渲染。</p><p>SPA：Client side Render，客户端渲染。</p><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>命令：<code>npx nuxi init &lt;project-name&gt;</code></p><h2 id="创建项目报错"><a href="#创建项目报错" class="headerlink" title="创建项目报错"></a>创建项目报错</h2><p>新建项目运行报错信息：</p><blockquote><p> Failed to download template from registry: Failed to download <a href="https://raw.githubusercontent.com/nuxt/starter/templates/templates/v3.json">https://raw.githubusercontent.com/nuxt/starter/templates/templates/v3.json</a>: TypeError: fetch failed</p></blockquote><p><strong>原因：</strong>DNS 对 Nuxt 服务器域名会解析失败</p><p><strong>解决办法：</strong>在 hosts 文件中直接将主机映射到对应 IP 上。</p><p><strong>步骤：</strong></p><ol><li><p>去 <a href="https://www.ipaddress.com/">查询IP</a> 的网址查询 raw.githubusercontent.com 的 IP 地址。</p><p><img src="/images/SSR/nuxt/nuxt%E5%88%9D%E4%BD%93%E9%AA%8C/ip%E6%98%A0%E5%B0%84.png"></p></li><li><p>windows 将 上面的信息添加到 hosts 文件中。</p><ul><li>windows 的路径：C:\Windows\System32\drivers\etc</li><li>Mac 的路径：&#x2F;etc&#x2F;hosts</li></ul><p><img src="/images/SSR/nuxt/nuxt%E5%88%9D%E4%BD%93%E9%AA%8C/hosts%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">185.199.108.133  raw.githubusercontent.com</span><br><span class="line"># 185.199.109.133  raw.githubusercontent.com</span><br><span class="line"># 185.199.110.133  raw.githubusercontent.com</span><br><span class="line"># 185.199.111.133  raw.githubusercontent.com</span><br></pre></td></tr></table></figure></li><li><p>重新打开一个终端进行项目创建。如果不成功则注释掉换下一个 ip 映射测试。我这里第三个成功了。</p></li></ol><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul><li><p>pages&#x2F; – 目录是可选的，</p><ul><li><p>如果不存在，则不包含 vue-router 依赖。</p></li><li><p>如果存在，请使用 <code>&lt;NuxtPage&gt;</code> 组件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;NuxtLayout&gt;</span><br><span class="line">            &lt;NuxtPage/&gt;</span><br><span class="line">        &lt;/NuxtLayout&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>由于 <code>&lt;NuxtPage&gt;</code> 在内部使用的是 Vue 的 <code>&lt;Suspense&gt;</code> 组件，因此无法将其设置为根组件。</p></li></ul></li><li></li></ul><h2 id="内置组件"><a href="#内置组件" class="headerlink" title="内置组件"></a>内置组件</h2><p>因为这些组件名称与本机 HTML 元素匹配，所以它们在模板中必须大写。</p><h3 id="欢迎页面组件"><a href="#欢迎页面组件" class="headerlink" title="欢迎页面组件"></a>欢迎页面组件</h3><p><code>&lt;NuxtWelcome&gt;</code> 欢迎页面组件，该组件是 @nuxt&#x2F;ui 的一部分。</p><h3 id="页面占位组件"><a href="#页面占位组件" class="headerlink" title="页面占位组件"></a>页面占位组件</h3><p><code>&lt;NuxtPage&gt;</code> 是 Nuxt 自带的页面占位组件。是对 <code>&lt;router-view&gt;</code> 的封装。</p><h3 id="页面布局组件"><a href="#页面布局组件" class="headerlink" title="页面布局组件"></a>页面布局组件</h3><p><code>&lt;NuxtLayout&gt;</code> 是 Nuxt 自带的页面布局组件，可以将<strong>多个页面共性东西</strong>抽取到 Layout 布局中。比如：每个页面的页眉和页脚组件，这些具有共性的组件我们是可以写到一个 Layout 布局中。</p><p><code>&lt;NuxtLayout&gt;</code> 是使用 <code>&lt;slot&gt;</code> 组件来显示页面中的内容。</p><p><code>&lt;NuxtLayout&gt;</code> 有两种使用方式：</p><ul><li>默认布局<ul><li>在 layouts 目录下新建默认的布局组件，比如：<code>layouts/default.vue</code>。</li><li>然后在 app.vue 中通过 <code>&lt;NuxtLayout&gt;</code> 内置组件来使用。</li></ul></li><li>自定义布局<ul><li>在 layouts 文件夹下新建 Layout 布局组件，比如:<code> layouts/custom-layout.vue</code>。</li><li>然后在 app.vue中给 <code>&lt;NuxtLayout&gt;</code> 内置组件指定 name 属性的值为：<code>custom-layout</code>。</li><li>也支持在页面中使用 <code>definePageMeta</code> 宏函数来指定 layout 布局。</li></ul></li></ul><h4 id="默认布局"><a href="#默认布局" class="headerlink" title="默认布局"></a>默认布局</h4><h5 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h5><ul><li>layouts<ul><li>default.vue</li></ul></li><li>pages<ul><li>detail.vue</li><li>index.vue</li></ul></li><li>app.vue</li></ul><h5 id="layouts-x2F-default-vue"><a href="#layouts-x2F-default-vue" class="headerlink" title="layouts&#x2F;default.vue"></a>layouts&#x2F;default.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div class=&quot;base header&quot;&gt;header&lt;/div&gt;</span><br><span class="line">        &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;div class=&quot;base footer&quot;&gt;footer&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.base &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 80px;</span><br><span class="line">    line-height: 80px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.header &#123; background-color: red; &#125;</span><br><span class="line">.footer &#123; background-color: skyblue; &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="app-vue"><a href="#app-vue" class="headerlink" title="app.vue"></a>app.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;NuxtLayout&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;NuxtLink to=&quot;/&quot;&gt;</span><br><span class="line">                &lt;button&gt;Home&lt;/button&gt;</span><br><span class="line">            &lt;/NuxtLink&gt;</span><br><span class="line">            &lt;NuxtLink to=&quot;/detail&quot;&gt;</span><br><span class="line">                &lt;button&gt;detail&lt;/button&gt;</span><br><span class="line">            &lt;/NuxtLink&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;NuxtPage&gt;&lt;/NuxtPage&gt;</span><br><span class="line">    &lt;/NuxtLayout&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">a &#123; margin-right: 10px; &#125;</span><br><span class="line">button &#123; cursor: pointer; &#125;</span><br><span class="line">.router-link-active button &#123; color: red; &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="pages-x2F-index-vue"><a href="#pages-x2F-index-vue" class="headerlink" title="pages&#x2F;index.vue"></a>pages&#x2F;index.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;Page: index&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="pages-x2F-detail-vue"><a href="#pages-x2F-detail-vue" class="headerlink" title="pages&#x2F;detail.vue"></a>pages&#x2F;detail.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt; &lt;div&gt;Page: detail&lt;/div&gt; &lt;/template&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/SSR/nuxt/nuxt%E5%88%9D%E4%BD%93%E9%AA%8C/layouts%E7%9A%84%E9%BB%98%E8%AE%A4%E5%B8%83%E5%B1%80.png"></p><h4 id="自定义布局"><a href="#自定义布局" class="headerlink" title="自定义布局"></a>自定义布局</h4><h5 id="目录结构-2"><a href="#目录结构-2" class="headerlink" title="目录结构"></a>目录结构</h5><ul><li>layouts<ul><li>custom.vue</li><li>default.vue</li></ul></li><li>pages<ul><li>detail.vue</li><li>index.vue</li><li>login.vue</li></ul></li><li>app.vue</li></ul><p>pages&#x2F;detail.vue 和 pages&#x2F;index.vue 内容和上面的默认布局内容一样</p><h5 id="layouts-x2F-custom-vue"><a href="#layouts-x2F-custom-vue" class="headerlink" title="layouts&#x2F;custom.vue"></a>layouts&#x2F;custom.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="layouts-x2F-default-vue-1"><a href="#layouts-x2F-default-vue-1" class="headerlink" title="layouts&#x2F;default.vue"></a>layouts&#x2F;default.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div class=&quot;base header&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;header-content&quot;&gt;</span><br><span class="line">                &lt;h1&gt;header&lt;/h1&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;NuxtLink to=&quot;/&quot;&gt;&lt;button&gt;Home&lt;/button&gt;&lt;/NuxtLink&gt;</span><br><span class="line">                    &lt;NuxtLink to=&quot;/detail&quot;&gt;&lt;button&gt;detail&lt;/button&gt;&lt;/NuxtLink&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;login-btn&quot; @click=&quot;loginHandler&quot;&gt;登录&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;div class=&quot;base footer&quot;&gt;footer&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const loginHandler = () =&gt; &#123; navigateTo(&#x27;/login&#x27;) &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.base &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 80px;</span><br><span class="line">    line-height: 80px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.header &#123; background-color: red; &#125;</span><br><span class="line">.header-content &#123;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    width: 1200px;</span><br><span class="line">    height: 100%;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">.header-content .login-btn &#123;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">    color: #eee;</span><br><span class="line">&#125;</span><br><span class="line">.header-content .login-btn:hover &#123; color: #333; &#125;</span><br><span class="line">.footer &#123; background-color: skyblue; &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="layouts-x2F-login-vue"><a href="#layouts-x2F-login-vue" class="headerlink" title="layouts&#x2F;login.vue"></a>layouts&#x2F;login.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">definePageMeta(&#123; layout: &#x27;custom&#x27; &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div style=&quot;margin-bottom: 30px&quot;&gt;Page: login&lt;/div&gt;</span><br><span class="line">        &lt;NuxtLink to=&quot;/&quot;&gt;go Home page&lt;/NuxtLink&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="app-vue-1"><a href="#app-vue-1" class="headerlink" title="app.vue"></a>app.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;NuxtLayout&gt; &lt;NuxtPage&gt;&lt;/NuxtPage&gt; &lt;/NuxtLayout&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">a &#123; margin-right: 10px; &#125;</span><br><span class="line">button &#123; cursor: pointer; &#125;</span><br><span class="line">.router-link-active button &#123; color: red; &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/SSR/nuxt/nuxt%E5%88%9D%E4%BD%93%E9%AA%8C/layout%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B8%83%E5%B1%801.png"></p><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><p>这里将 导航移动到 default 页面是因为，login 页面的内容也是显示到 <code>&lt;NuxtPage&gt;</code> 组件中，如果继续放在这里，那么在 login 页面中也会显示之前的导航信息。</p><p>当然也可以不这样，直接判断信息在 app.vue 中隐藏菜单信息。</p><ul><li>通过 <code>$route.path === &#39;/login&#39;</code> 来动态显示</li><li>通过<code> $route.meta.layout !== &#39;custom&#39;</code> 来动态显示</li><li>…</li></ul><p><img src="/images/SSR/nuxt/nuxt%E5%88%9D%E4%BD%93%E9%AA%8C/layout%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B8%83%E5%B1%802.png"></p><p><strong>方式一</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;NuxtLayout&gt;</span><br><span class="line">        &lt;div :style=&quot;&#123; display: $route.path === &#x27;/login&#x27; ? &#x27;none&#x27; : &#x27;block&#x27; &#125;&quot;&gt;</span><br><span class="line">            &lt;NuxtLink to=&quot;/&quot;&gt;&lt;button&gt;Home&lt;/button&gt;&lt;/NuxtLink&gt;</span><br><span class="line">            &lt;NuxtLink to=&quot;/detail&quot;&gt;&lt;button&gt;detail&lt;/button&gt;&lt;/NuxtLink&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;NuxtPage&gt;&lt;/NuxtPage&gt;</span><br><span class="line">    &lt;/NuxtLayout&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">a &#123; margin-right: 10px;&#125;</span><br><span class="line">button &#123; ursor: pointer; </span><br><span class="line">.router-link-active button &#123; olor: red; </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>方式二</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;NuxtLayout&gt;</span><br><span class="line">        &lt;div v-if=&quot;$route.meta.layout !== &#x27;custom&#x27;&quot;&gt;</span><br><span class="line">            &lt;NuxtLink to=&quot;/&quot;&gt;&lt;button&gt;Home&lt;/button&gt;&lt;/NuxtLink&gt;</span><br><span class="line">            &lt;NuxtLink to=&quot;/detail&quot;&gt;&lt;button&gt;detail&lt;/button&gt;&lt;/NuxtLink&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;NuxtPage&gt;&lt;/NuxtPage&gt;</span><br><span class="line">    &lt;/NuxtLayout&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">a &#123; margin-right: 10px;&#125;</span><br><span class="line">button &#123; ursor: pointer; </span><br><span class="line">.router-link-active button &#123; olor: red; </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="客户端渲染组件"><a href="#客户端渲染组件" class="headerlink" title="客户端渲染组件"></a>客户端渲染组件</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p><code>&lt;ClientOnly&gt;</code> 该组件中的默认插槽内容<strong>只在客户端渲染</strong>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;ClientOnly&gt;&lt;div&gt;我只会在客户端渲染&lt;/div&gt;/ClientOnly&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;Home Page&lt;/h1&gt;</span><br><span class="line">            &lt;p&gt;Home page content goes here&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/SSR/nuxt/nuxt%E5%88%9D%E4%BD%93%E9%AA%8C/ClientOnly%E7%BB%84%E4%BB%B6.png"></p><h4 id="fallback-属性"><a href="#fallback-属性" class="headerlink" title="fallback 属性"></a>fallback 属性</h4><p>可以给 <code>&lt;ClientOnly&gt;</code> 组件添加 <code>fallback</code> 属性，该属性的内容在组件还未加载出来之前进行占位和提示。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ClientOnly fallback=&quot;正在加载...&quot;&gt;&lt;div&gt;我只会在客户端渲染&lt;/div&gt;&lt;/ClientOnly&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/SSR/nuxt/nuxt%E5%88%9D%E4%BD%93%E9%AA%8C/ClientOnly%E7%BB%84%E4%BB%B6%E7%9A%84fallback%E5%B1%9E%E6%80%A7.png"></p><h4 id="fallback-tag-属性"><a href="#fallback-tag-属性" class="headerlink" title="fallback-tag 属性"></a>fallback-tag 属性</h4><p><code>fallback-tag</code> 属性可以修改 fallback 中内容的 HTML 标签。它默认是 <code>&lt;span&gt;</code> 标签，我们可以使用 <code>fallback-tag</code> 来设置其标签。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ClientOnly fallback-tag=&quot;div&quot; fallback=&quot;正在加载...&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/SSR/nuxt/nuxt%E5%88%9D%E4%BD%93%E9%AA%8C/ClientOnly%E7%BB%84%E4%BB%B6%E7%9A%84fallback-tag%E5%B1%9E%E6%80%A7.png"></p><h4 id="插槽用法"><a href="#插槽用法" class="headerlink" title="插槽用法"></a>插槽用法</h4><p><code>&lt;ClientOnly&gt;</code> 组件中的<strong>默认插槽</strong>的内容只会在<strong>客户端渲染</strong>，而 <strong>fallback 插槽</strong>中的内容只在<strong>服务器端渲染</strong>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ClientOnly&gt;</span><br><span class="line">    &lt;div&gt;客户端中显示&lt;/div&gt;</span><br><span class="line">    &lt;template #fallback&gt;</span><br><span class="line">&lt;div&gt;服务器端中显示&lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/ClientOnly&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/SSR/nuxt/nuxt%E5%88%9D%E4%BD%93%E9%AA%8C/ClientOnly%E7%BB%84%E4%BB%B6%E6%8F%92%E6%A7%BD%E7%94%A8%E6%B3%95.png"></p><h3 id="页面导航组件"><a href="#页面导航组件" class="headerlink" title="页面导航组件"></a>页面导航组件</h3><h4 id="NuxtLink-组件"><a href="#NuxtLink-组件" class="headerlink" title="NuxtLink 组件"></a>NuxtLink 组件</h4><p><code>&lt;NuxtLink&gt;</code> 是 Nuxt 内置组件，是对 RouterLink 的封装，用来实现页面的导航。</p><p>NuxtLink 组件属性：</p><ul><li>to —- 支持路由路径、路由对象、URL</li><li>href —- to 的别名</li><li>active-class —- 激活连接的类名</li><li>target —- 和 a 标签的 target 一样，指定何种方式显示新页面</li><li>…</li></ul><p>外部链接会加上 rel&#x3D;”noopener noreferrer”，表示不携带 opener 和 referrer 信息。也可以手动指定 external，当然只要是外部连接就会自动添加上 rel&#x3D;”noopener noreferrer”。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div class=&quot;page&quot;&gt;</span><br><span class="line">            &lt;NuxtLink to=&quot;/&quot;&gt;首页&lt;/NuxtLink&gt;</span><br><span class="line">            &lt;NuxtLink to=&quot;/home&quot;&gt;home&lt;/NuxtLink&gt;</span><br><span class="line">            &lt;!-- href 是 to 的别名 --&gt;</span><br><span class="line">            &lt;NuxtLink href=&quot;/detail&quot; replace&gt;detail index 有 replace&lt;/NuxtLink&gt;</span><br><span class="line">            &lt;NuxtLink to=&quot;/detail/2&quot; active-class=&quot;active-red&quot;&gt;detail [id]&lt;/NuxtLink&gt;</span><br><span class="line">            &lt;!-- &lt;NuxtLink to=&quot;/user-admin?username=123&amp;password=123123&quot;&gt;user-[type]&lt;/NuxtLink&gt; --&gt;</span><br><span class="line">            &lt;NuxtLink :to=&quot;&#123; path: &#x27;/user-admin&#x27;, query: &#123; username: 123, password: 123123 &#125; &#125;&quot;&gt;</span><br><span class="line">                user-[type]</span><br><span class="line">            &lt;/NuxtLink&gt;</span><br><span class="line">            &lt;!-- 外部链接会加上 rel=&quot;noopener noreferrer&quot; 不携带 opener 和 referrer 信息 --&gt;</span><br><span class="line">            &lt;!-- 也可以手动指定 external，当然外部连接会自动添加上 rel=&quot;noopener noreferrer&quot; --&gt;</span><br><span class="line">            &lt;NuxtLink to=&quot;https:www.jd.com&quot; external target=&quot;_blank&quot;&gt;京东&lt;/NuxtLink&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;NuxtPage&gt;&lt;/NuxtPage&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.page &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    gap: 0 20px;</span><br><span class="line">&#125;</span><br><span class="line">.active-red &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="navigateTo-函数"><a href="#navigateTo-函数" class="headerlink" title="navigateTo 函数"></a>navigateTo 函数</h4><p>还可以使用编程导航 <code>navigateTo</code> 函数。通过编程导航可以轻松实现动态导航，但动态导航不利于 SEO。</p><p><strong>navigateTo 函数在服务器端和客户端都可以使用，也可以用于插件、中间件等，还可以直接用来执行页面导航。</strong></p><p><code>navigateTo(to, options)</code> 函数：</p><ul><li>to —- 可以是纯字符串、外部 URL、路由对象。</li><li>options —- 导航配置，可选。<ul><li>replace —- false（默认）、true，为 true 时替换当前路由页面</li><li>external —- false（默认）、true，不允许导航到外部链接，true 则允许。</li><li>redirectCode —- 数字，重定向代码</li><li>…</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div class=&quot;page&quot;&gt;</span><br><span class="line">            &lt;button @click=&quot;goToPage(&#x27;/&#x27;)&quot;&gt;首页&lt;/button&gt;</span><br><span class="line">            &lt;button @click=&quot;goToPage(&#x27;/home&#x27;)&quot;&gt;home&lt;/button&gt;</span><br><span class="line">            &lt;button</span><br><span class="line">                @click=&quot;goToPage(&#123; path: &#x27;/detail/3&#x27;, query: &#123; username: 123, password: 123123 &#125; &#125;)&quot;</span><br><span class="line">            &gt;</span><br><span class="line">                detail</span><br><span class="line">            &lt;/button&gt;</span><br><span class="line">            &lt;button @click=&quot;goToPage(&#x27;https://www.jd.com&#x27;)&quot;&gt;京东&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;NuxtPage&gt;&lt;/NuxtPage&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const goToPage = url =&gt; &#123;</span><br><span class="line">    if (/^http/i.test(url)) &#123;</span><br><span class="line">        // 这里不加 external 是跳不过去的</span><br><span class="line">        // return navigateTo(url, &#123; external: true &#125;)</span><br><span class="line">        return navigateTo(url, &#123;</span><br><span class="line">            open: &#123;</span><br><span class="line">                target: &#x27;_blank&#x27;,</span><br><span class="line">                // 窗口特性，设置窗口大小</span><br><span class="line">                windowFeatures: &#123;</span><br><span class="line">                    width: 600,</span><br><span class="line">                    height: 500</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    navigateTo(url)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.page &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    gap: 0 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="abortNavigation-函数"><a href="#abortNavigation-函数" class="headerlink" title="abortNavigation 函数"></a>abortNavigation 函数</h4><p>中止导航，并显示可选的错误消息。</p><p><code>abortNavigation(Error | string)</code></p><ul><li><p>Error —- 错误对象</p></li><li><p>string —- 错误字符串</p></li><li></li></ul><h4 id="useRouter"><a href="#useRouter" class="headerlink" title="useRouter"></a>useRouter</h4><p>除了可以通过  <code>navigateTo</code> 函数来实现编程导航，也可以使用 useRouter ( 或 Options API 的 this.$router )。</p><ul><li>back —- 页面返回，router.go(-1)</li><li>forward —- 页面前进，router.go(1)</li><li>go —- 页面返回或前进</li><li>push —- 建议用 navigateTo</li><li>replace — 建议用 navigateTo</li><li>beforeEach —- 路由守卫钩子，每次导航前执行</li><li>afterEach —- 路由守卫钩子，每次导航后执行</li></ul><h3 id="useRouter-与-navigateTo"><a href="#useRouter-与-navigateTo" class="headerlink" title="useRouter 与 navigateTo"></a>useRouter 与 navigateTo</h3><p>假如现在有两个页面 <code>pages/index.vue</code>、<code>pages/lazy.vue</code> 我们在 lazy 组件中设置路由跳转到 index 组件中，以此对比 useRouter 和 navigateTo 的区别。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pages/index.vue</span></span><br><span class="line"><span class="title function_">useRouter</span>().<span class="title function_">push</span>(<span class="string">&#x27;/lazy&#x27;</span>) <span class="comment">// 页面有很明显的切换过程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面直接在服务端渲染时就切换完毕了，在浏览器中无明显的切换过程</span></span><br><span class="line"><span class="title function_">navigateTo</span>(<span class="string">&#x27;/lazy&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的 111 会在浏览器中输出</span></span><br><span class="line"><span class="title function_">useRouter</span>().<span class="title function_">push</span>(<span class="string">&#x27;/lazy&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的 111 会在编辑器终端输出</span></span><br><span class="line"><span class="title function_">navigateTo</span>(<span class="string">&#x27;/lazy&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;111&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="SEO-组件"><a href="#SEO-组件" class="headerlink" title="SEO 组件"></a>SEO 组件</h3><p><code>&lt;Title&gt;</code>, <code>&lt;Base&gt;</code>, <code>&lt;NoScript&gt;</code>, <code>&lt;Style&gt;</code>, <code>&lt;Meta&gt;</code>, <code>&lt;Link&gt;</code>, <code>&lt;Body&gt;</code>, <code>&lt;Html&gt;</code> and <code>&lt;Head&gt;</code></p><p><code>&lt;Head&gt;</code> 和 <code>&lt;Body&gt;</code> 可以接受嵌套的 Meta 标记（出于美观原因），但这不会影响嵌套的 Meta 标记在最终 HTML 中<em>的呈现位置</em>。</p><h2 id="nuxt-config-js"><a href="#nuxt-config-js" class="headerlink" title="nuxt.config.js"></a>nuxt.config.js</h2><h3 id="关闭-ssr"><a href="#关闭-ssr" class="headerlink" title="关闭 ssr"></a>关闭 ssr</h3><p><code>ssr: false</code> 关闭 SSR，开启 SPA。值：false&#x2F;true，true 为默认值。</p><h3 id="运行时配置"><a href="#运行时配置" class="headerlink" title="运行时配置"></a>运行时配置</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nuxt.config.ts</span></span><br><span class="line"><span class="attr">runtimeConfig</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">1</span>, <span class="comment">// 只能在服务端访问</span></span><br><span class="line">    <span class="attr">public</span>: &#123; <span class="comment">// 两端都可以访问</span></span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&#x27;localhost:8080&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.vue</span></span><br><span class="line"><span class="keyword">const</span> runtimeConfig = <span class="title function_">useRuntimeConfig</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(runtimeConfig.<span class="property">count</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(runtimeConfig.<span class="property">public</span>.<span class="property">baseURL</span>)</span><br></pre></td></tr></table></figure><h2 id="路由为哈希模式"><a href="#路由为哈希模式" class="headerlink" title="路由为哈希模式"></a>路由为哈希模式</h2><p>服务器的路由只能是 history 模式，客户端的路由可以是 history 或 hash 模式。</p><p>若需要将路由模式切换为 hash 模式，只能在 SPA 模式下才能启用哈希模式，也就是说需要将 SSR 关闭后再进行设置。启动后，URL 永远不会发送到服务器，并且不支持 SSR。</p><blockquote><p>解释一下 为什么说<strong>URL永远不会发送到服务器</strong>，并且<strong>不支持SSR</strong>？</p><p>总结：SSR 的核心是 <strong>在服务器生成完整的 HTML 内容</strong>，如果使用 Hash 模式则无法知道客户端实际需要渲染的路由。因为在 Hash 模式下，URL 的路径会被 # 符号分隔，# 前的部分会发送到服务器，# 后的部分会留在客户端。这会导致服务器永远接收的都是根路径，无法知道前端具体的路由，导致无法正确进行服务端渲染。</p><p><strong>#</strong> 符号最初设计用于 <strong>页面内锚点跳转</strong>，前端框架通过监听 <code>hashchange</code> 事件动态更新页面内容，无需像服务器发起新请求。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">    <span class="attr">ssr</span>: <span class="literal">false</span>, <span class="comment">// 关闭 SSR，开启 SPA</span></span><br><span class="line">    <span class="attr">router</span>: &#123;</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">hashMode</span>: <span class="literal">true</span> <span class="comment">// 路由为 hash 模式</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="runtimeConfig-vs-app-config"><a href="#runtimeConfig-vs-app-config" class="headerlink" title="runtimeConfig vs app.config"></a>runtimeConfig vs app.config</h2><p>它们都用于应用程序公开变量。</p><ul><li>runtimeConfig：定义环境变量。运行时需要指定的私有或公有 token。</li><li>app.config：定义公共变量。在构建时确定的公共 token、网站配置。</li></ul><h2 id="全局样式"><a href="#全局样式" class="headerlink" title="全局样式"></a>全局样式</h2><ol><li>在 app.vue 文件中编写</li><li>在外部文件中编写（推荐）<ol><li>在 assets&#x2F;style 中编写全局样式，如 global.css。</li><li>去 nuxt.config 中的 css 选型中进行配置</li></ol></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// assets/styles/global.css -- 全局样式</span></span><br><span class="line">body &#123;</span><br><span class="line">    background-<span class="attr">color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nuxt.config.js -- css 配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">    <span class="attr">css</span>: [<span class="string">&#x27;@/assets/styles/global.css&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>也可以使用 SCSS。</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// assets/styles/main.scss</span></span><br><span class="line"><span class="variable">$primary-bg</span>: skyblue;</span><br><span class="line"><span class="variable">$primary-font</span>: <span class="number">20px</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// app.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;page&quot;&gt;</span><br><span class="line">    &lt;h1&gt;Home Page&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Home page content goes here&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">@use &#x27;@/assets/styles/main.scss&#x27; as main;</span><br><span class="line"></span><br><span class="line">.page &#123;</span><br><span class="line">    background-color: main.$primary-bg;</span><br><span class="line">    font-size: main.$primary-font;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nuxt.config.js -- css 配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">    <span class="attr">css</span>: [<span class="string">&#x27;@/assets/styles/global.css&#x27;</span>, <span class="string">&#x27;@/assets/styles/main.scss&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面的是手动导入 scss 文件，我们可以配置使其自动导入。</p><p>修改 app.vue 和 nuxt.config.js 的代码。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// app.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;page&quot;&gt;</span><br><span class="line">    &lt;h1&gt;Home Page&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Home page content goes here&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.page &#123;</span><br><span class="line">    background-color: $primary-bg;</span><br><span class="line">    font-size: $primary-font;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nuxt.config.js -- css 配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">    <span class="attr">css</span>: [<span class="string">&#x27;@/assets/styles/global.css&#x27;</span>],</span><br><span class="line">    <span class="attr">vite</span>: &#123;</span><br><span class="line">        <span class="attr">css</span>: &#123;</span><br><span class="line">            <span class="attr">preprocessorOptions</span>: &#123;</span><br><span class="line">                <span class="attr">scss</span>: &#123;</span><br><span class="line">                    <span class="attr">additionalData</span>: <span class="string">&#x27;@use &quot;@/assets/styles/main.scss&quot; as *;&#x27;</span> <span class="comment">// 这里配置后就不需要在上面的 css 选项中再配置了</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这种就会在 .scss 和 使用了 lange&#x3D;”scss” 的文件的首行自动添加导入设置的 .scss 文件配置。</p><h2 id="判断目前是什么端"><a href="#判断目前是什么端" class="headerlink" title="判断目前是什么端"></a>判断目前是什么端</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>在 <code>nuxt.config.ts</code> 中的 <code>runtimeConfig</code> 中随便写点代码，然后去控制台输出，看哪个端的控制端有内容。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nuxt.config.ts</span></span><br><span class="line"><span class="attr">runtimeConfig</span>: &#123;</span><br><span class="line">    <span class="attr">isServer</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.vue</span></span><br><span class="line"><span class="keyword">const</span> runtimeConfig = <span class="title function_">useRuntimeConfig</span>()</span><br><span class="line"><span class="keyword">if</span> (runtimeConfig.<span class="property">isServer</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server 端&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.vue</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">server</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务端&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;客户端&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="资源导入"><a href="#资源导入" class="headerlink" title="资源导入"></a>资源导入</h2><h3 id="图片资源"><a href="#图片资源" class="headerlink" title="图片资源"></a>图片资源</h3><p><strong>public 目录：</strong>静态资源的公共服务器，可以直接通过 URL 访问。如：<code>/images/xx.png</code>。</p><p><strong>assets 目录：</strong> 存放样式表、字体等，可以使用 <code>@/assets</code> 等路径访问目录中的内容。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;page&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h2&gt;public&lt;/h2&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h3&gt;通过img标签引入&lt;/h3&gt;</span><br><span class="line">                &lt;img src=&quot;/public/星空.jpg&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">                &lt;img src=&quot;@/public/星空.jpg&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h3&gt;通过背景引入&lt;/h3&gt;</span><br><span class="line">                &lt;div class=&quot;public-bg public-bg1&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;public-bg public-bg2&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h2&gt;assets&lt;/h2&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h3&gt;通过img标签引入&lt;/h3&gt;</span><br><span class="line">                &lt;img src=&quot;@/assets/images/R-C.jpg&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h3&gt;通过背景引入&lt;/h3&gt;</span><br><span class="line">                &lt;div class=&quot;assets-bg&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.page &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    gap: 0 50px;</span><br><span class="line">&#125;</span><br><span class="line">img &#123;</span><br><span class="line">    margin: 10px;</span><br><span class="line">    width: 200px;</span><br><span class="line">&#125;</span><br><span class="line">.public-bg &#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    margin: 10px;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 110px;</span><br><span class="line">    background-size: contain;</span><br><span class="line">&#125;</span><br><span class="line">.public-bg1 &#123;</span><br><span class="line">    background-image: url(/public/星空.jpg);</span><br><span class="line">&#125;</span><br><span class="line">.public-bg2 &#123;</span><br><span class="line">    background-image: url(@/public/星空.jpg);</span><br><span class="line">&#125;</span><br><span class="line">.assets-bg &#123;</span><br><span class="line">    margin: 10px;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 110px;</span><br><span class="line">    background-image: url(@/assets/images/R-C.jpg);</span><br><span class="line">    background-size: contain;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/SSR/nuxt/nuxt%E5%88%9D%E4%BD%93%E9%AA%8C/%E8%B5%84%E6%BA%90%E5%AF%BC%E5%85%A5.png"></p><h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><p>可以将字体图标文件放在 assets 目录中，通过 <code>@/assets</code> 等路径进行获取。之后在 <code>nuxt.config.js</code> 的 css 选项中配置让其全局生效。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nuxt.config.js -- css 配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">    <span class="attr">css</span>: [<span class="string">&#x27;@/assets/iconfont/iconfont.css&#x27;</span>], <span class="comment">// 字体图标</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h2><p>nuxt 项目的页面在 <strong>pages</strong> 目录下创建。nuxt 会根据该目录的目录结构和其文件名自动生成对应的路由。</p><p>可以使用命令来便捷创建页面。</p><ul><li><code>npx nuxi add page xxx</code> —- 创建页面</li><li><code>npx nuxi add page xxx/xx</code> —- 创建xxx目录并在内部创建xx页面</li><li><code>npx nuxi add page xxx/[id]</code> —- 创建xxx目录并在内部创建动态路由页面</li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>动态路由也是根据目录结构和文件的名称自动生成。</p><p>动态路由语法：页面组件目录 或 页面组件文件都 支持 [ ] 方括号语法，[ ] 方括号中编写动态路由参数。</p><p>例如：</p><ul><li>pages&#x2F;detail&#x2F;[id].vue —- &#x2F;detail&#x2F;:id</li><li>pages&#x2F;detail&#x2F;user-[type].vue —- &#x2F;detail&#x2F;user-:type</li><li>pages&#x2F;detail&#x2F;[role]&#x2F;[id].vue —- &#x2F;detail&#x2F;:role&#x2F;:id</li><li>pages&#x2F;detail-[role]&#x2F;[id].vue —- &#x2F;detail-:role&#x2F;:id</li></ul><p>动态路由和 index.vue 可以同时存在。</p><h3 id="可选路由"><a href="#可选路由" class="headerlink" title="可选路由"></a>可选路由</h3><p>文件夹使用双括号 [[]] 命名，支持使用或不使用。</p><p>如 <code>pages/[[test]]/testRoute.vue</code>，这里浏览器访问：<code>http://localhost:3000/test/testRoute</code> 或 <code>http://localhost:3000/testRoute</code> 都可以。</p><h3 id="路由参数"><a href="#路由参数" class="headerlink" title="路由参数"></a>路由参数</h3><p>通过 [ ] 方括号语法定义的动态路由，如目录结构为 <code>pages/detail/[id].vue</code>，可以 URL 路径传递动态路由参数 <code>/detail/12?name=zhangsan</code>，在 [id].vue 中通过 <code>$route.params.id</code> 和 <code>$route.query.name</code> 获取，也可以使用 useRoute 函数。</p><h3 id="全局路由（404-page）"><a href="#全局路由（404-page）" class="headerlink" title="全局路由（404 page）"></a>全局路由（404 page）</h3><p>用户可能会手动修改 URL 或 我们忘记创建某个页面，导致页面跳转出错，虽然 Nuxt 给我们定制了一个 404 页面，但不符合每个项目的需求，可能需要自定义。</p><p>我们可以通过 [ ] 方括号，并在内加入三个点，如：[…slug].vue。其中的 slug 可以是其它的字符串。</p><p>我们可以在 pages 根目录下创建该页面，也可以在任意子目录下创建该页面。需要注意的是子目录下的是该目录下输入的 URL 不存在则使用该目录下的 404 页面；pages 根目录下的是捕获全局的错误 URL。</p><h3 id="路由匹配机制"><a href="#路由匹配机制" class="headerlink" title="路由匹配机制"></a>路由匹配机制</h3><p><strong>预定义路由优先于动态路由，动态路由优先于捕获所有路由。</strong>先找预定义路由，后动态路由，最后捕获所有路由（404页面）。</p><ul><li>预定路由：pages&#x2F;detail&#x2F;create.vue<ul><li>匹配 &#x2F;detail&#x2F;create</li></ul></li><li>动态路由：pages&#x2F;detail&#x2F;[id].vue<ul><li>匹配 &#x2F;detail&#x2F;1、&#x2F;detail&#x2F;abc、…</li><li>不匹配 &#x2F;detail&#x2F;、&#x2F;detail&#x2F;create、&#x2F;detail&#x2F;1&#x2F;1、…</li></ul></li><li>捕获所有路由：pages&#x2F;detail&#x2F;[…slug].vue<ul><li>匹配 &#x2F;detail&#x2F;1&#x2F;1、&#x2F;detail&#x2F;a&#x2F;b、…</li><li>不匹配 &#x2F;detail&#x2F;、…</li></ul></li></ul><h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><p>嵌套路由也是根据目录结构和文件的名称自动生成。</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>在 pages 目录下创建一个一级路由，如：parent.vue 文件。</li><li>在 pages 目录下创建一个<mark>一级路由同名的文件夹</mark>，如：parent 文件夹。</li><li>二级路由在 parent 文件夹中创建即可。</li><li>在 app.vue 和 parent.vue 文件中编写页面占位，使用 <code>&lt;NuxtLink&gt;</code> 。</li><li>app.vue 中的页面占位是为了显示 parent.vue 等一级路由；parent.vue 中的页面占位是为了显示 parent 目录下的二级路由。</li></ol><h4 id="简单目录结构"><a href="#简单目录结构" class="headerlink" title="简单目录结构"></a>简单目录结构</h4><ul><li>pages<ul><li>parent<ul><li>child1.vue —- 二级路由，child1 页面</li><li>child2.vue —- 二级路由，child2 页面</li><li>index.vue —- 二级路由默认页面</li></ul></li><li>index.vue —- 一级路由默认页面</li><li>parent.vue —- 一级路由，parent 页面</li></ul></li><li>app.vue</li></ul><h4 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h4><h5 id="app-vue-2"><a href="#app-vue-2" class="headerlink" title="app.vue"></a>app.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;NuxtLink to=&quot;/&quot; :active-class=&quot;$route.path === &#x27;/&#x27; ? &#x27;active&#x27; : &#x27;&#x27;&quot;&gt;</span><br><span class="line">                &lt;button&gt;Home&lt;/button&gt;</span><br><span class="line">            &lt;/NuxtLink&gt;</span><br><span class="line">            &lt;NuxtLink to=&quot;/parent&quot; :active-class=&quot;$route.path.includes(&#x27;parent&#x27;) ? &#x27;active&#x27; : &#x27;&#x27;&quot;&gt;</span><br><span class="line">                &lt;button&gt;Parent&lt;/button&gt;</span><br><span class="line">            &lt;/NuxtLink&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;NuxtPage&gt;&lt;/NuxtPage&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">a &#123;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line">&#125;</span><br><span class="line">button &#123;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">.router-link-active.router-link-exact-active button,</span><br><span class="line">.active button &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h5 id="pages-x2F-index-vue-1"><a href="#pages-x2F-index-vue-1" class="headerlink" title="pages&#x2F;index.vue"></a>pages&#x2F;index.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;Page: index&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="pages-x2F-parent-vue"><a href="#pages-x2F-parent-vue" class="headerlink" title="pages&#x2F;parent.vue"></a>pages&#x2F;parent.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;Page: parent&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;NuxtLink to=&quot;/parent&quot;&gt;</span><br><span class="line">                &lt;button&gt;parent home&lt;/button&gt;</span><br><span class="line">            &lt;/NuxtLink&gt;</span><br><span class="line">            &lt;NuxtLink to=&quot;/parent/child1&quot;&gt;</span><br><span class="line">                &lt;button&gt;parent child1&lt;/button&gt;</span><br><span class="line">            &lt;/NuxtLink&gt;</span><br><span class="line">            &lt;NuxtLink to=&quot;/parent/child2&quot;&gt;</span><br><span class="line">                &lt;button&gt;parent child2&lt;/button&gt;</span><br><span class="line">            &lt;/NuxtLink&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;NuxtPage&gt;&lt;/NuxtPage&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="pages-x2F-parent-x2F-index-vue"><a href="#pages-x2F-parent-x2F-index-vue" class="headerlink" title="pages&#x2F;parent&#x2F;index.vue"></a>pages&#x2F;parent&#x2F;index.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;Page: parent/index&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="pages-x2F-parent-x2F-child1-vue"><a href="#pages-x2F-parent-x2F-child1-vue" class="headerlink" title="pages&#x2F;parent&#x2F;child1.vue"></a>pages&#x2F;parent&#x2F;child1.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Page: parent/child1</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="pages-x2F-parent-x2F-child2-vue"><a href="#pages-x2F-parent-x2F-child2-vue" class="headerlink" title="pages&#x2F;parent&#x2F;child2.vue"></a>pages&#x2F;parent&#x2F;child2.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Page: parent/child2</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="路由中间件"><a href="#路由中间件" class="headerlink" title="路由中间件"></a>路由中间件</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Nuxt 提供了一个可定制的 路由中间件，可以在整个应用程序中使用，非常适合在导航到特定路由之前提取我们想要运行的代码。用来监听路由的导航，包括：局部和全局监听（支持在服务器和客户端执行）。</p><h4 id="路由中间件分三类："><a href="#路由中间件分三类：" class="headerlink" title="路由中间件分三类："></a>路由中间件分三类：</h4><ul><li>匿名（或内联）路由中间件：在页面中使用 <code>definePageMeta</code> 函数定义，可监听局部路由。当注册多个中间件时，会按照注册顺序来执行。</li><li>命名路由中间件：在 middleware 目录下定义，并且会自动加载中间件。命名通常使用短横线。也需要在 <code>definePageMeta</code> 函数定义。</li><li>全局路由中间件：在 middleware 目录中，需要带 .global 后缀的文件，每次路由更改会自动运行。</li></ul><p><strong>全局路由中间件的优先级最高，支持服务端和客户端。</strong></p><h4 id="路由中间件执行顺序："><a href="#路由中间件执行顺序：" class="headerlink" title="路由中间件执行顺序："></a>路由中间件执行顺序：</h4><ol><li>全局路由中间件</li><li>页面定义的路由中间件顺序（多个路由中间件使用数组语法）</li></ol><p>如果有多个全局路由中间件，则根据目录的顺序依次执行。</p><p>若想手动指定全局路由中间件的执行顺序，则可以在文件名前面加上<strong>字母</strong>编号。</p><p><strong>注意：</strong><mark>文件名是按照字母排序的，而不是按照数值排序</mark>。如：<code>10.new.global.ts</code> 将位于 <code>2.new.global.ts</code> 之前。</p><h4 id="匿名（或内联）路由中间件"><a href="#匿名（或内联）路由中间件" class="headerlink" title="匿名（或内联）路由中间件"></a>匿名（或内联）路由中间件</h4><p>匿名（或内联）路由中间件，只能用在单文件中，如：index.vue、parent.vue 等文件中。不能用在 app.vue 中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- pages/index.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">definePageMeta(&#123;</span><br><span class="line">    middleware: [</span><br><span class="line">        function (to, from) &#123;</span><br><span class="line">            console.log(&#x27;我是匿名中间件&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;Page: index&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="命名路由中间件"><a href="#命名路由中间件" class="headerlink" title="命名路由中间件"></a>命名路由中间件</h4><h5 id="middleware-x2F-home-ts"><a href="#middleware-x2F-home-ts" class="headerlink" title="middleware&#x2F;home.ts"></a>middleware&#x2F;home.ts</h5><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtRouteMiddleware</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是命名中间件，是第一个中间件&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtRouteMiddleware</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/about&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">navigateTo</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="pages-x2F-index-vue-2"><a href="#pages-x2F-index-vue-2" class="headerlink" title="pages&#x2F;index.vue"></a>pages&#x2F;index.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">definePageMeta(&#123;</span><br><span class="line">    // middleware: [&#x27;home&#x27;] // 单个</span><br><span class="line">    // middleware: &#x27;home&#x27; // 单个</span><br><span class="line">    middleware: [ // 多个</span><br><span class="line">        &#x27;home&#x27;,</span><br><span class="line">        function (to, from) &#123;</span><br><span class="line">            console.log(&#x27;我是匿名中间件，也是第二个中间件&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;Page: index&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="全局路由中间件"><a href="#全局路由中间件" class="headerlink" title="全局路由中间件"></a>全局路由中间件</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// middleware/main.global.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtRouteMiddleware</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是全局中间件，是优先级最高的中间件&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由验证（validate）"><a href="#路由验证（validate）" class="headerlink" title="路由验证（validate）"></a>路由验证（validate）</h3><p>Nuxt支持对每个页面路由进行验证，我们可以通过 definePageMeta 中的 validate 属性来对路由进行验证。</p><p>validate 属性接受一个回调函数，回调函数中以 route 作为参数。</p><p>回调函数的返回值支持：</p><ul><li>返回 boolean 值来确定是否放行路由<ul><li>true 放行路由</li><li>false 默认重定向到内置的 404 页面。<strong>可以自定义错误页面，在项目根目录（不是pages目录）新建 error.vue</strong></li></ul></li><li>返回对象：<code>&#123; statusCode:401 &#125;</code>  返回自定义的 401 页面，验证失败</li></ul><h4 id="返回-boolean"><a href="#返回-boolean" class="headerlink" title="返回 boolean"></a>返回 boolean</h4><h5 id="目录结构-3"><a href="#目录结构-3" class="headerlink" title="目录结构"></a>目录结构</h5><ul><li>pages<ul><li>detail<ul><li>[id].vue</li><li>index.vue</li></ul></li><li>index.vue</li></ul></li><li>app.vue</li><li>error.vue —- 路由验证错误页面</li></ul><h5 id="pages-x2F-detail-x2F-id-vue"><a href="#pages-x2F-detail-x2F-id-vue" class="headerlink" title="pages&#x2F;detail&#x2F;[id].vue"></a>pages&#x2F;detail&#x2F;[id].vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">definePageMeta(&#123;</span><br><span class="line">    validate: route =&gt; &#123;</span><br><span class="line">        return /^\d+$/i.test(route.params.id)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;Page: detail/[id]&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="pages-x2F-detail-x2F-index-vue"><a href="#pages-x2F-detail-x2F-index-vue" class="headerlink" title="pages&#x2F;detail&#x2F;index.vue"></a>pages&#x2F;detail&#x2F;index.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Page: detail/index</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="pages-x2F-index-vue-3"><a href="#pages-x2F-index-vue-3" class="headerlink" title="pages&#x2F;index.vue"></a>pages&#x2F;index.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;Page: index&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="error-vue"><a href="#error-vue" class="headerlink" title="error.vue"></a>error.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;error&lt;/div&gt;</span><br><span class="line">        &lt;div style=&quot;margin-top: 30px&quot;&gt;&#123;&#123; $route &#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div style=&quot;margin-top: 30px&quot;&gt;</span><br><span class="line">            &lt;button @click=&quot;goToHomeHandler&quot;&gt;返回首页&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const goToHomeHandler = () =&gt; &#123;</span><br><span class="line">    clearError(&#123; redirect: &#x27;/&#x27; &#125;) // 清除错误，返回首页</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="app-vue-3"><a href="#app-vue-3" class="headerlink" title="app.vue"></a>app.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;NuxtLink to=&quot;/&quot;&gt;</span><br><span class="line">                &lt;button&gt;Home&lt;/button&gt;</span><br><span class="line">            &lt;/NuxtLink&gt;</span><br><span class="line">            &lt;NuxtLink to=&quot;/detail&quot;&gt;</span><br><span class="line">                &lt;button&gt;detail&lt;/button&gt;</span><br><span class="line">            &lt;/NuxtLink&gt;</span><br><span class="line">            &lt;NuxtLink to=&quot;/detail/1&quot;&gt;</span><br><span class="line">                &lt;button&gt;detail/1&lt;/button&gt;</span><br><span class="line">            &lt;/NuxtLink&gt;</span><br><span class="line">            &lt;NuxtLink to=&quot;/detail/abc&quot;&gt;</span><br><span class="line">                &lt;button&gt;detail/abc&lt;/button&gt;</span><br><span class="line">            &lt;/NuxtLink&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;NuxtPage&gt;&lt;/NuxtPage&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">a &#123;</span><br><span class="line">    margin-right: 10px;</span><br><span class="line">&#125;</span><br><span class="line">button &#123;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">.router-link-active button &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="返回对象"><a href="#返回对象" class="headerlink" title="返回对象"></a>返回对象</h4><p>其他页面和上面一样。</p><h5 id="修改-id-vue"><a href="#修改-id-vue" class="headerlink" title="修改 [id].vue"></a>修改 [id].vue</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">definePageMeta</span>(&#123;</span><br><span class="line">    <span class="attr">validate</span>: <span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">statusCode</span>: <span class="number">302</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="修改-error-vue"><a href="#修改-error-vue" class="headerlink" title="修改 error.vue"></a>修改 error.vue</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;error&lt;/div&gt;</span><br><span class="line">        &lt;div style=&quot;margin-top: 30px&quot;&gt;&#123;&#123; $route &#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div style=&quot;margin-top: 30px&quot;&gt;statusCode: &#123;&#123; props.error.statusCode &#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div style=&quot;margin-top: 30px&quot;&gt;</span><br><span class="line">            &lt;button @click=&quot;goToHomeHandler&quot;&gt;返回首页&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps([&#x27;error&#x27;]) // 接收传递的错误信息</span><br><span class="line">const goToHomeHandler = () =&gt; &#123;</span><br><span class="line">    clearError(&#123; redirect: &#x27;/&#x27; &#125;) // 清除错误，返回首页</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="渲染模式"><a href="#渲染模式" class="headerlink" title="渲染模式"></a>渲染模式</h2><p>浏览器和服务器都可以解释 JavaScript 代码，将 Vue.js 组件转换为 HTML 元素。这一步称为<strong>渲染</strong>。</p><ul><li>在客户端将 Vue.js 组件呈现为 HTML 元素，称为：客户端渲染模式。</li><li>在服务器将 Vue.js 组件呈现为 HTML 元素，称为：服务器渲染模式 或 通用渲染。</li></ul><p>而Nuxt3是支持多种渲染模式：</p><ul><li><p>客户端渲染模式（CSR）：将 srr 设置为 false。</p><ul><li>优点：<ul><li>开发速度快。不必担心代码的服务器兼容性，仅用于浏览器的 API。</li><li>便宜。只需要在任何带有 HTML、CSS 和 JavaScript 文件的静态服务器上托管仅限客户端应用程序即可。</li><li>离线。代码完全在浏览器中运行，可以在互联网不可用时很好地保持工作。</li></ul></li><li>缺点：<ul><li>性能不好。需要等浏览器下载、解析和运行 JS 文件。</li><li>搜索引擎优化不好。爬虫在第一次索引页面时不会等待界面完全呈现。</li></ul></li></ul></li><li><p>服务器渲染模式（SSR）：将 ssr 设置为 true。</p><ul><li>优点：<ul><li>性能好。用户可以立即访问页面内容。浏览器显示静态内容比 JS 生成的内容快，且在水合过程中保留了程序交互性。</li><li>搜索引擎优化很好。渲染是将整个页面返回，爬虫能直接索引页面内容。</li></ul></li><li>缺点：<ul><li>开发受限。服务器和浏览器的环境不同，提供的 API 也不同。</li><li>成本问题。服务器运行才能动态显示页面，每月成本增加；但浏览器接管了客户端导航的通用渲染，服务器的调用会大大减少。</li></ul></li><li>适用于任何面向内容的网站：博客、营销网站、投资组合、电子商务网站和市场。</li></ul></li><li><p>混合渲染模式（CSR | SSR | SSG | SWR）：允许每个路由使用不同的缓存规则，并决定服务器应该如何响应给定URL上的新请求。需要再 routeRules 根据每个路由动态配置渲染模式。</p><ul><li><p>SSG：静态站点生成。在构建时预先生成所有静态 HTML 文件，直接托管在 CDN 上。首次加载极快，SEO 支持非常好。不过当数据需要更新时，需要重新构建。适合内容固定的页面，比如：文档、博客等。</p></li><li><p>SWR：过时数据优先更新策略。在数据获取时优先返回缓存（可能过期的数据），同时在后台静默更新最新数据。</p><ul><li><p>工作流程：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">用户-&gt;&gt;客户端: 发起请求</span><br><span class="line">客户端-&gt;&gt;缓存: 检查是否存在旧数据</span><br><span class="line">缓存--&gt;&gt;客户端: 立即返回旧数据</span><br><span class="line">客户端-&gt;&gt;服务器: 后台发起验证请求</span><br><span class="line">服务器--&gt;&gt;客户端: 返回新数据</span><br><span class="line">客户端-&gt;&gt;缓存: 更新缓存</span><br><span class="line">客户端-&gt;&gt;UI: 静默更新界面</span><br></pre></td></tr></table></figure></li><li><p>优势：</p><ul><li>零等待加载：用户立即看到内容。</li><li>带宽优化：减少重复请求。</li><li>自动更新：保持数据新鲜度。</li><li>离线支持：配合 Service Worker 实现。</li></ul></li></ul></li></ul></li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nuxt.config.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">    <span class="attr">routeRules</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;/&#x27;</span>: &#123; <span class="attr">prerender</span>: <span class="literal">true</span> &#125;, <span class="comment">// 构建时预渲染</span></span><br><span class="line">        <span class="string">&#x27;/detail&#x27;</span>: &#123; <span class="attr">ssr</span>: <span class="literal">true</span> &#125;, <span class="comment">// 服务器端渲染</span></span><br><span class="line">        <span class="string">&#x27;/news&#x27;</span>: &#123; <span class="attr">swr</span>: <span class="number">3600</span> &#125;, <span class="comment">// 混合渲染模式，每隔 1h 重新获取最新数据</span></span><br><span class="line">        <span class="string">&#x27;/order/**&#x27;</span>: &#123; <span class="attr">ssr</span>: <span class="literal">false</span> &#125; <span class="comment">// 客户端渲染</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>Nuxt 支持自定义插件进行扩展，创建插件有两种方式：单个文件中使用 <code>useNuxtApp(name, value)</code> 创建、在 plugins 目录中创建。</p><p>Nuxt 会自动读取 <code>plugins/</code> 目录中的文件，并在创建 Vue 应用程序时加载它们。即里面的所有插件都是自动注册的，不需要单独将它们添加到<code>nuxt.config.ts</code>中。</p><p><strong>注意：</strong>只有目录顶层的文件（或任何子目录中的索引文件）才会自动注册为插件。</p><h3 id="单文件中创建"><a href="#单文件中创建" class="headerlink" title="单文件中创建"></a>单文件中创建</h3><p>在 <code>useNuxtApp()</code> 中的 <code>provide(name, value)</code> 方法直接创建。<code>useNuxtApp()</code> 提供了访问 Nuxt 共享运行时上下文的方法和属性（两端可用）：provide、hooks、callhook、vueApp 等。</p><p>感觉在 app.vue 中创建查询，pages 目录下的文件创建后切换路由控制台会报错。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;NuxtPage&gt;&lt;/NuxtPage&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const price = ref(78)</span><br><span class="line">const nuxtApp = useNuxtApp()</span><br><span class="line">nuxtApp.provide(&#x27;doublePrice&#x27;, () =&gt; price.value * 2)</span><br><span class="line">nuxtApp.provide(&#x27;increment&#x27;, ++price.value)</span><br><span class="line">console.log(nuxtApp.$doublePrice(), nuxtApp.$increment) // 158 79</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="plugins-目录中创建"><a href="#plugins-目录中创建" class="headerlink" title="plugins 目录中创建"></a>plugins 目录中创建</h3><ul><li>在 plugins 目录中创建插件（推荐）<ul><li>顶级和子目录 index 文件写的插件会创建 Vue 应用程序时自动加载和注册。</li><li>如果带有 .server 或 .client 后缀的插件名，那么可以区分服务器端或客户端的运行环境。</li></ul></li></ul><p><strong>步骤：</strong></p><ol><li>在 plugins 目录中创建插件文件。</li><li>接着在 <code>defineNuxtPlugin</code> 函数创建插件，参数是一个回调函数。</li><li>然后在组件中使用 useNuxtApp() 拿到插件中的方法。</li></ol><p><strong>注意：</strong>插件注册顺序可以通过在文件名前加上一个数字来控制插件注册的顺序。有助于实现插件间的相互依赖。如：<code>plugins/1.price.ts</code>、&#96;&#96;plugins&#x2F; 2.string.ts&#96;…</p><p><strong>注意：</strong>文件名是按字符串排序的，而不是按数值排序的。也就是：<code>10.new.ts</code> 将排在 <code>2.new.ts</code> 前面。可以用 <code>0作为</code> 个位数的前缀</p><h4 id="创建帮助函数"><a href="#创建帮助函数" class="headerlink" title="创建帮助函数"></a>创建帮助函数</h4><h5 id="使用组合-API"><a href="#使用组合-API" class="headerlink" title="使用组合 API"></a>使用组合 API</h5><p>需要注意的是，使用组合在插件间互相依赖情况下可能无法工作；插件依赖 vue.js 生命周期的情况下无法工作。</p><h6 id="plugins-x2F-price-ts"><a href="#plugins-x2F-price-ts" class="headerlink" title="plugins&#x2F;price.ts"></a>plugins&#x2F;price.ts</h6><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义插件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtPlugin</span>(<span class="function"><span class="params">nuxtApp</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">provide</span>: &#123;</span><br><span class="line">            formatPrice (<span class="attr">value</span>: <span class="built_in">number</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> value.<span class="title function_">toFixed</span>(<span class="number">2</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="pages-x2F-detail-vue-1"><a href="#pages-x2F-detail-vue-1" class="headerlink" title="pages&#x2F;detail.vue"></a>pages&#x2F;detail.vue</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 使用插件中的方法</span><br><span class="line">const &#123; $formatPrice &#125; = useNuxtApp()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;Page: detail&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;34.5678 =&gt; &#123;&#123; $formatPrice(34.5678) &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="server-或-client-后缀"><a href="#server-或-client-后缀" class="headerlink" title=".server 或 .client 后缀"></a>.server 或 .client 后缀</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// plugins/time.client.ts ---- 定义</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtPlugin</span>(<span class="function">(<span class="params">nuxtApp</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">provide</span>: &#123;</span><br><span class="line">            currentTime () &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">status</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">userInfo</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.vue ---- 使用</span></span><br><span class="line"><span class="keyword">const</span> &#123; $currentTime, $status, $userInfo &#125; = <span class="title function_">useNuxtApp</span>()</span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">client</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>, $currentTime(), $status, $userInfo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="app-生命周期"><a href="#app-生命周期" class="headerlink" title="app 生命周期"></a>app 生命周期</h2><p>使用 Hooks 监听App的生命周期。</p><p><code>nuxtApp.hook(hook api, func)</code></p><table><thead><tr><th>Hook</th><th>Arguments</th><th>Environment</th><th>Description</th></tr></thead><tbody><tr><td><code>app:created</code></td><td><code>vueApp</code></td><td>Server &amp; Client</td><td>Called when initial <code>vueApp</code> instance is created.</td></tr><tr><td><code>app:error</code></td><td><code>err</code></td><td>Server &amp; Client</td><td>Called when a fatal error occurs.</td></tr><tr><td><code>app:error:cleared</code></td><td><code>&#123; redirect? &#125;</code></td><td>Server &amp; Client</td><td>Called when a fatal error occurs.</td></tr><tr><td><code>app:data:refresh</code></td><td><code>keys?</code></td><td>Server &amp; Client</td><td>(internal)</td></tr><tr><td><code>vue:setup</code></td><td>-</td><td>Server &amp; Client</td><td>(internal)</td></tr><tr><td><code>vue:error</code></td><td><code>err, target, info</code></td><td>Server &amp; Client</td><td>Called when a vue error propagates to the root component. <a href="https://vuejs.org/api/composition-api-lifecycle.html#onerrorcaptured">Learn More</a>.</td></tr><tr><td><code>app:rendered</code></td><td><code>renderContext</code></td><td>Server</td><td>Called when SSR rendering is done.</td></tr><tr><td><code>app:redirected</code></td><td>-</td><td>Server</td><td>Called before SSR redirection.</td></tr><tr><td><code>app:beforeMount</code></td><td><code>vueApp</code></td><td>Client</td><td>Called before mounting the app, called only on client side.</td></tr><tr><td><code>app:mounted</code></td><td><code>vueApp</code></td><td>Client</td><td>Called when Vue app is initialized and mounted in browser.</td></tr><tr><td><code>app:suspense:resolve</code></td><td><code>appComponent</code></td><td>Client</td><td>On <a href="https://vuejs.org/guide/built-ins/suspense.html#suspense">Suspense</a> resolved event.</td></tr><tr><td><code>app:manifest:update</code></td><td><code>&#123; id, timestamp &#125;</code></td><td>Client</td><td>Called when there is a newer version of your app detected.</td></tr><tr><td><code>link:prefetch</code></td><td><code>to</code></td><td>Client</td><td>Called when a <code>&lt;NuxtLink&gt;</code> is observed to be prefetched.</td></tr><tr><td><code>page:start</code></td><td><code>pageComponent?</code></td><td>Client</td><td>Called on <a href="https://vuejs.org/guide/built-ins/suspense.html#suspense">Suspense</a> pending event.</td></tr><tr><td><code>page:finish</code></td><td><code>pageComponent?</code></td><td>Client</td><td>Called on <a href="https://vuejs.org/guide/built-ins/suspense.html#suspense">Suspense</a> resolved event.</td></tr><tr><td><code>page:loading:start</code></td><td>-</td><td>Client</td><td>Called when the <code>setup()</code> of the new page is running.</td></tr><tr><td><code>page:loading:end</code></td><td>-</td><td>Client</td><td>Called after <code>page:finish</code></td></tr><tr><td><code>page:transition:finish</code></td><td><code>pageComponent?</code></td><td>Client</td><td>After page transition <a href="https://vuejs.org/guide/built-ins/transition.html#javascript-hooks">onAfterLeave</a> event.</td></tr><tr><td><code>dev:ssr-logs</code></td><td><code>logs</code></td><td>Client</td><td>Called with an array of server-side logs that have been passed to the client (if <code>features.devLogs</code> is enabled).</td></tr><tr><td><code>page:view-transition:start</code></td><td><code>transition</code></td><td>Client</td><td>Called after <code>document.startViewTransition</code> is called when <a href="https://nuxt.com/docs/getting-started/transitions#view-transitions-api-experimental">experimental viewTransition support is enabled</a>.</td></tr></tbody></table><h3 id="使用插件来监听（推荐）"><a href="#使用插件来监听（推荐）" class="headerlink" title="使用插件来监听（推荐）"></a>使用插件来监听（推荐）</h3><h3 id="plugins-x2F-lifecycle-ts"><a href="#plugins-x2F-lifecycle-ts" class="headerlink" title="plugins&#x2F;lifecycle.ts"></a>plugins&#x2F;lifecycle.ts</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtPlugin</span>(<span class="function"><span class="params">nuxtApp</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// client &amp;&amp; server</span></span><br><span class="line">    nuxtApp.<span class="title function_">hook</span>(<span class="string">&#x27;app:created&#x27;</span>, <span class="function"><span class="params">vueApp</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app:created&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// client &amp;&amp; server</span></span><br><span class="line">    nuxtApp.<span class="title function_">hook</span>(<span class="string">&#x27;app:error&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app:error&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// client &amp;&amp; server</span></span><br><span class="line">    nuxtApp.<span class="title function_">hook</span>(<span class="string">&#x27;vue:setup&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;vue:setup&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// client &amp;&amp; server</span></span><br><span class="line">    nuxtApp.<span class="title function_">hook</span>(<span class="string">&#x27;vue:error&#x27;</span>, <span class="function">(<span class="params">err, target, info</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;vue:error&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// server</span></span><br><span class="line">    nuxtApp.<span class="title function_">hook</span>(<span class="string">&#x27;app:rendered&#x27;</span>, <span class="function"><span class="params">renderContext</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app:rendered&#x27;</span>)        </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// client</span></span><br><span class="line">    nuxtApp.<span class="title function_">hook</span>(<span class="string">&#x27;app:beforeMount&#x27;</span>, <span class="function"><span class="params">vueApp</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app:beforeMount&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// client</span></span><br><span class="line">    nuxtApp.<span class="title function_">hook</span>(<span class="string">&#x27;app:mounted&#x27;</span>, <span class="function"><span class="params">vueApp</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app:mounted&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    client 执行顺序</span></span><br><span class="line"><span class="comment">        app:created</span></span><br><span class="line"><span class="comment">        app:beforeMount</span></span><br><span class="line"><span class="comment">        vue:setup</span></span><br><span class="line"><span class="comment">        app:mounted </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    server 执行顺序</span></span><br><span class="line"><span class="comment">        app:created</span></span><br><span class="line"><span class="comment">        vue:setup</span></span><br><span class="line"><span class="comment">        app:rendered</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="在-app-vue-中监听"><a href="#在-app-vue-中监听" class="headerlink" title="在 app.vue 中监听"></a>在 app.vue 中监听</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">const</span> nuxtApp = <span class="title function_">useNuxtApp</span>()</span><br><span class="line">nuxtApp.<span class="title function_">hook</span>(<span class="string">&#x27;app:created&#x27;</span>, <span class="function"><span class="params">vueApp</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app:created&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// client &amp;&amp; server</span></span><br><span class="line">nuxtApp.<span class="title function_">hook</span>(<span class="string">&#x27;app:error&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app:error&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// client &amp;&amp; server</span></span><br><span class="line">nuxtApp.<span class="title function_">hook</span>(<span class="string">&#x27;vue:setup&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;vue:setup&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// client &amp;&amp; server</span></span><br><span class="line">nuxtApp.<span class="title function_">hook</span>(<span class="string">&#x27;vue:error&#x27;</span>, <span class="function">(<span class="params">err, target, info</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;vue:error&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// server</span></span><br><span class="line">nuxtApp.<span class="title function_">hook</span>(<span class="string">&#x27;app:rendered&#x27;</span>, <span class="function"><span class="params">renderContext</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app:rendered&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// client</span></span><br><span class="line">nuxtApp.<span class="title function_">hook</span>(<span class="string">&#x27;app:beforeMount&#x27;</span>, <span class="function"><span class="params">vueApp</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app:beforeMount&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// client</span></span><br><span class="line">nuxtApp.<span class="title function_">hook</span>(<span class="string">&#x27;app:mounted&#x27;</span>, <span class="function"><span class="params">vueApp</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app:mounted&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">client 执行顺序</span></span><br><span class="line"><span class="comment">    app:mounted </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">server 执行顺序</span></span><br><span class="line"><span class="comment">    app:rendered</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>上面的执行结果只有一个，是因为我们在 setup 里进行的，所以只能执行 <code>vue:setup</code> 后面的生命周期。</p><p><strong>注意：</strong>如果不在 setup 中会报错的。</p><h2 id="组件生命周期"><a href="#组件生命周期" class="headerlink" title="组件生命周期"></a>组件生命周期</h2><h3 id="客户端渲染"><a href="#客户端渲染" class="headerlink" title="客户端渲染"></a>客户端渲染</h3><table><thead><tr><th>options API</th><th>composition API</th></tr></thead><tbody><tr><td>beforeCreate</td><td>setup()</td></tr><tr><td>created</td><td>setup()</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td></tr><tr><td>mounted</td><td>onMounted</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td></tr><tr><td>updated</td><td>onUpdated</td></tr><tr><td>beforeDestory</td><td>onBeforeUnmount</td></tr><tr><td>destoryed</td><td>onUnmounted</td></tr><tr><td>errorCaptured</td><td>onErrorCaptured</td></tr></tbody></table><h3 id="服务器端渲染"><a href="#服务器端渲染" class="headerlink" title="服务器端渲染"></a>服务器端渲染</h3><p>因为没有任何动态更新，所以像 <code>mounted</code>、<code>updated</code> 这样的生命周期钩子不会在 SSR 期间被调用，只会在客户端运行。</p><p>只有 <code>beforeCreate</code> 和 <code>created</code> 这两个钩子会在 SSR 期间被调用。</p><p>应该避免在 <code>beforeCreate</code> 和 <code>created</code> 使用期间编写副作用代码，比如使用定时器 <code>setInterval</code> 等。我们可能会在客户端对这些代码在 <code>beforeUnmout</code> 或 <code>unMounted</code> 中清理。但 SSR 中没有这些钩子。所以在 SSR 中我们需要避免这种情况，将副作用的代码放到 <code>mounted</code> 中。</p><table><thead><tr><th>options API</th><th>composition API</th></tr></thead><tbody><tr><td>beforeCreate</td><td>setup()</td></tr><tr><td>created</td><td>setup()</td></tr></tbody></table><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><p>在 Nuxt 中数据的获取主要是通过下面5个函数来实现（支持 Server 和 Client）：<code>$fetch()、useAsyncData()、useLazyAsyncData()、useFetch()、useLazyFetch()</code>。</p><p><code>$fetch()</code> 刷新会在客户端和服务端都会发起请求，浪费服务器资源，不推荐。后面几个是 hooks api，刷新页面服务端请求数据，客户端不会请求；路由切换客户端请求数据，服务端不会请求；服务端请求数据会通过 hydration 水合到客户端。</p><p><code>useAsyncData()、useFetch()</code> 会阻塞页面导航，也就是需要等数据请求回来后才显示页面信息。可以设置 <code>lazy:true</code> 使其不阻塞页面导航，然后通过 watch 监听数据从而确保数据一定能拿到。</p><p><code>useLazyAsyncData()、useLazyFetch()</code> 不会阻塞页面，相当于设置了 <code>lazy: true</code>，上面函数的简写方式。</p><p><strong>注意：</strong>上面的函数只能在 setup 或 lifecycle hooks 中使用。</p><h3 id="fetch"><a href="#fetch" class="headerlink" title="$fetch()"></a>$fetch()</h3><p><code>$fetch(url, opts)</code> 是一个类原生 fetch 的跨平台请求库。</p><p>不过，<code>$fetch </code> 函数在刷新页面时 client 和 server 都会发起一次请求，浪费服务器资源。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BASE_URL</span> = <span class="string">&#x27;http://codercba.com:9060/juanpi/api&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 刷新页面时 client 和 server 都会发起一次请求，浪费服务器资源</span></span><br><span class="line">$fetch(<span class="variable constant_">BASE_URL</span> + <span class="string">&#x27;/homeInfo&#x27;</span>, &#123;<span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span> &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(res) &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="useAsyncData"><a href="#useAsyncData" class="headerlink" title="useAsyncData()"></a>useAsyncData()</h3><p><code>useAsyncData(key, func)</code> 专门解决异步获取数据的函数，会阻止页面导航。发起异步请求需用到 <code>$fetch</code> 全局函数，当然也可以用其他的，比如 axios。</p><p>使用 <code>useAsyncData</code> 函数，在刷新页面时可以减少客户端发起的一次请求。</p><p>刷新页面时服务端会发起请求，客户端不会发起。每次切换路由后回到此页面 或 修改代码保存后， 客户端会发起请求，服务端不会发起。 也就是客户端和服务端同时只有一方发起请求。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BASE_URL</span> = <span class="string">&#x27;http://codercba.com:9060/juanpi/api&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">data</span>: homeInfo &#125; = <span class="keyword">await</span> <span class="title function_">useAsyncData</span>(<span class="string">&#x27;homeInfo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> $fetch(<span class="variable constant_">BASE_URL</span> + <span class="string">&#x27;/homeInfo&#x27;</span>, &#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;homeInfo:&#x27;</span>, homeInfo.<span class="property">value</span>?.<span class="property">data</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>多个 <code>useAsyncData</code> 函数时，需要<strong>保证 key 的唯一性</strong>，不然请求结果会重复。</p><p>下面代码因为两个函数的请求 key 值不唯一，所以在当前路由进行刷新时会出现重复请求，输出相同的结果。(路由切换不会出现重复请求，只有刷新才会)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BASE_URL</span> = <span class="string">&#x27;http://codercba.com:9060/juanpi/api&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">data</span>: homeInfo &#125; = <span class="keyword">await</span> <span class="title function_">useAsyncData</span>(<span class="string">&#x27;homeInfo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> $fetch(<span class="variable constant_">BASE_URL</span> + <span class="string">&#x27;/homeInfo&#x27;</span>, &#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;homeInfo:&#x27;</span>, homeInfo.<span class="property">value</span>?.<span class="property">data</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">data</span>: goods &#125; = <span class="keyword">await</span> <span class="title function_">useAsyncData</span>(<span class="string">&#x27;homeInfo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> $fetch(<span class="variable constant_">BASE_URL</span> + <span class="string">&#x27;/goods&#x27;</span>, &#123; <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;goods:&#x27;</span>, goods.<span class="property">value</span>?.<span class="property">data</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/SSR/nuxt/nuxt%E5%88%9D%E4%BD%93%E9%AA%8C/useAsyncData%E7%9A%84key%E4%B8%8D%E5%94%AF%E4%B8%80.png"></p><h3 id="useFetch-与-useLazyFetch"><a href="#useFetch-与-useLazyFetch" class="headerlink" title="useFetch() 与 useLazyFetch()"></a>useFetch() 与 useLazyFetch()</h3><h4 id="useFetch"><a href="#useFetch" class="headerlink" title="useFetch()"></a>useFetch()</h4><p><code>useFetch(url, opts)</code> 用于获取任意的 URL 地址的数据，会阻止页面导航。是 <code>useAsyncData</code> 使用 $fetch 的简写。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BASE_URL</span> = <span class="string">&#x27;http://codercba.com:9060/juanpi/api&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">data</span>: homeInfo &#125; = <span class="keyword">await</span> <span class="title function_">useFetch</span>(<span class="variable constant_">BASE_URL</span> + <span class="string">&#x27;/homeInfo&#x27;</span>, &#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span> &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(homeInfo.<span class="property">value</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="验证阻塞页面导航"><a href="#验证阻塞页面导航" class="headerlink" title="验证阻塞页面导航"></a>验证阻塞页面导航</h4><p>下面的代码需要等数据返回后才会进行挂载，也就是输出’onMounted’。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const BASE_URL = &#x27;http://codercba.com:9060/juanpi/api&#x27;</span><br><span class="line"></span><br><span class="line">const &#123; data: homeInfo &#125; = await useFetch(BASE_URL + &#x27;/homeInfo&#x27;, &#123; method: &#x27;GET&#x27; &#125;)</span><br><span class="line">console.log(homeInfo.value)</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;onMounted&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;Page: lazy&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/SSR/nuxt/nuxt%E5%88%9D%E4%BD%93%E9%AA%8C/%E9%98%BB%E5%A1%9E%E9%A1%B5%E9%9D%A2%E9%AA%8C%E8%AF%81.gif"></p><h4 id="取消获取数据阻塞页面"><a href="#取消获取数据阻塞页面" class="headerlink" title="取消获取数据阻塞页面"></a>取消获取数据阻塞页面</h4><p>当页面数据需要获取很多时或网络波动较大时，那我们不可能让用户等待很久。如何解决呢？可以设置 <code>lazy: true</code>，这样就不会阻塞页面的导航了。同时设置 watch 去监听数据，当 data 数据更新后 watch 会自动去赋值那些。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const BASE_URL = &#x27;http://codercba.com:9060/juanpi/api&#x27;</span><br><span class="line"></span><br><span class="line">const &#123; data: homeInfo &#125; = await useFetch(BASE_URL + &#x27;/homeInfo&#x27;, &#123; method: &#x27;GET&#x27;, lazy: true &#125;)</span><br><span class="line">console.log(homeInfo.value)</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;onMounted&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 确保数据一定能拿到</span><br><span class="line">watch(homeInfo, () =&gt; &#123;</span><br><span class="line">    console.log(homeInfo.value)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;Page: lazy&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><img src="/images/SSR/nuxt/nuxt%E5%88%9D%E4%BD%93%E9%AA%8C/useFetch%E8%AE%BE%E7%BD%AElazy%E5%8F%96%E6%B6%88%E9%98%BB%E5%A1%9E%E5%AF%BC%E8%88%AA.png"></p><p>当然我们也可以不用 watch 去监听，当我们切换到其他路由后回到此页面一样能拿到数据。但是不能保证一定能拿到数据，比如网络波动较大，超时那些。</p><h4 id="useLazyFetch"><a href="#useLazyFetch" class="headerlink" title="useLazyFetch()"></a>useLazyFetch()</h4><p>上面的写法有一种简写形式，就是使用 <code>useLazyFetch()</code>，效果与 <code>useFetch(api, &#123; lazy: true &#125;)</code> 一样。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const BASE_URL = &#x27;http://codercba.com:9060/juanpi/api&#x27;</span><br><span class="line"></span><br><span class="line">const &#123; data: homeInfo &#125; = await useLazyFetch(BASE_URL + &#x27;/homeInfo&#x27;, &#123; method: &#x27;GET&#x27; &#125;)</span><br><span class="line">console.log(homeInfo.value)</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;onMounted&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">watch(homeInfo, () =&gt; &#123;</span><br><span class="line">    console.log(homeInfo.value)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;Page: lazy&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="客户端刷新按钮"><a href="#客户端刷新按钮" class="headerlink" title="客户端刷新按钮"></a>客户端刷新按钮</h4><p>如果需要在客户端进行刷新，我们可以解构出 refresh。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const BASE_URL = &#x27;http://codercba.com:9060/juanpi/api&#x27;</span><br><span class="line"></span><br><span class="line">const &#123; data: homeInfo, refresh &#125; = await useLazyFetch(BASE_URL + &#x27;/homeInfo&#x27;, &#123; method: &#x27;GET&#x27; &#125;)</span><br><span class="line">console.log(homeInfo.value)</span><br><span class="line"></span><br><span class="line">const updateHandler = () =&gt; &#123;</span><br><span class="line">    refresh()</span><br><span class="line">&#125;</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">    console.log(&#x27;onMounted&#x27;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">watch(homeInfo, () =&gt; &#123;</span><br><span class="line">    console.log(homeInfo.value)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;Page: lazy&lt;/div&gt;</span><br><span class="line">        &lt;button @click=&quot;updateHandler&quot;&gt;获取最新数据&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="useFetch-vs-axios"><a href="#useFetch-vs-axios" class="headerlink" title="useFetch vs axios"></a>useFetch vs axios</h3><p>获取数据 Nuxt 推荐使用 <code>useFetch()</code>，为什么不是 axios？</p><ul><li>因为 <code>useFetch()</code> 底部使用的是 <code>$fetch()</code>，该函数基于 <code>unjs/ohmyfetch</code> 请求库，并于原生的 Fetch API 有着相同 API。</li><li>unjs&#x2F;ohmyfetch 是一个跨端请求库。运行在服务器，可以智能的处理对 API 接口的直接调用。运行在客户端，可以对后台提供的 API 接口正常的调用（类似 axios），当然也支持第三方接口的调用。会自动解析响应和对数据进行字符串化。</li><li>useFetch 支持之鞥呢的类型提示和智能的推断 API 响应式类型。</li><li>在 setup 中用 useFetch 获取数据，会减去客户端重复发起的请求。</li></ul><h3 id="useFetch-的封装"><a href="#useFetch-的封装" class="headerlink" title="useFetch 的封装"></a>useFetch 的封装</h3><p>步骤：</p><ol><li>定义 request 类并导出。</li><li>在类中定义 request、get、post 方法。</li><li>在 request 中使用 useFetch 发起网络请求。</li><li>添加 TS 类型声明。</li></ol><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">AsyncData</span>, <span class="title class_">UseFetchOptions</span> &#125; <span class="keyword">from</span> <span class="string">&quot;#app&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BASE_URL</span> = <span class="string">&#x27;http://codercba.com:9060/juanpi/api&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Methods</span> = <span class="string">&#x27;GET&#x27;</span> | <span class="string">&#x27;POST&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Request</span> &#123;</span><br><span class="line">    request&lt;T&gt; (<span class="attr">url</span>: <span class="built_in">string</span>, <span class="attr">method</span>: <span class="title class_">Methods</span>, data?: <span class="built_in">any</span>, options?: <span class="title class_">UseFetchOptions</span>&lt;T&gt;):<span class="title class_">Promise</span>&lt;<span class="title class_">AsyncData</span>&lt;T,<span class="title class_">Error</span>&gt;&gt; &#123;</span><br><span class="line">        <span class="comment">// 整合请求配置</span></span><br><span class="line">        <span class="keyword">let</span> newOptions = &#123;</span><br><span class="line">            <span class="attr">baseURL</span>: <span class="variable constant_">BASE_URL</span>,</span><br><span class="line">            <span class="attr">method</span>: method || <span class="string">&#x27;GET&#x27;</span>, <span class="comment">// 没传则默认为 GET</span></span><br><span class="line">            ...options</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据请求类型设置请求体</span></span><br><span class="line">        <span class="keyword">if</span> (method === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">            newOptions.<span class="property">params</span> = data || &#123;&#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newOptions.<span class="property">body</span> = data || &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            useFetch&lt;T&gt;(url, newOptions <span class="keyword">as</span> <span class="built_in">any</span>)</span><br><span class="line">                .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(res <span class="keyword">as</span> <span class="title class_">AsyncData</span>&lt;T, <span class="title class_">Error</span>&gt;)</span><br><span class="line">                &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(err)</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    post&lt;T&gt; (<span class="attr">url</span>: <span class="built_in">string</span>, data?: <span class="built_in">any</span>, options?: <span class="title class_">UseFetchOptions</span>&lt;T&gt;) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">request</span>&lt;T&gt;(url, <span class="string">&#x27;POST&#x27;</span>, data, options)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get&lt;T&gt; (<span class="attr">url</span>: <span class="built_in">string</span>, params?: <span class="built_in">any</span>, options?: <span class="title class_">UseFetchOptions</span>&lt;T&gt;) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">request</span>&lt;T&gt;(url, <span class="string">&#x27;GET&#x27;</span>, params, options)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Request</span>()</span><br></pre></td></tr></table></figure><h2 id="Server-API"><a href="#Server-API" class="headerlink" title="Server API"></a>Server API</h2><p>编写后端服务接口可以在 server&#x2F;api 目录下编写。</p><p>编写一个 &#x2F;api&#x2F;homeinfo 接口：</p><ol><li>新建 server&#x2F;api&#x2F;homeinfo.ts。</li><li>在该文件中使用 <code>defineEventHandler</code> 函数定义接口。</li><li>使用 <code>useFetch</code> 函数调用编写的接口。</li></ol><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// server/api/homeinfo.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineEventHandler</span>(<span class="keyword">async</span> event =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; context &#125; = event</span><br><span class="line">    <span class="keyword">const</span> &#123; req, res &#125; = event.<span class="property">node</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> method1 = req.<span class="property">method</span></span><br><span class="line">    <span class="keyword">const</span> url = req.<span class="property">url</span></span><br><span class="line">    <span class="keyword">const</span> params = context.<span class="property">params</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;method1=&#x27;</span>, method1)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;url=&#x27;</span>, url)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;params=&#x27;</span>, params)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取查询字符串</span></span><br><span class="line">    <span class="keyword">const</span> query = <span class="title function_">getQuery</span>(event)</span><br><span class="line">    <span class="keyword">const</span> method2 = <span class="title function_">getMethod</span>(event) <span class="comment">// 废弃</span></span><br><span class="line">    <span class="keyword">const</span> header = <span class="title function_">getHeaders</span>(event)</span><br><span class="line">    <span class="keyword">const</span> body = <span class="keyword">await</span> <span class="title function_">readBody</span>(event)</span><br><span class="line">    <span class="keyword">const</span> rawBody = <span class="keyword">await</span> <span class="title function_">readRawBody</span>(event)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;query=&#x27;</span>, query)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;method2=&#x27;</span>, method2)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;header=&#x27;</span>, header)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;body=&#x27;</span>, body)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;rawBody=&#x27;</span>, rawBody)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">token</span>: <span class="string">&#x27;test token&#x27;</span>,</span><br><span class="line">            query,</span><br><span class="line">            method2,</span><br><span class="line">            header,</span><br><span class="line">            body,</span><br><span class="line">            rawBody</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>post 请求</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 终端输出</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;method1=&#x27;</span>, method1) <span class="comment">// POST</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;url=&#x27;</span>, url) <span class="comment">// /api/homeinfo</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;params=&#x27;</span>, params) <span class="comment">// &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取查询字符串</span></span><br><span class="line"><span class="keyword">const</span> query = <span class="title function_">getQuery</span>(event)</span><br><span class="line"><span class="keyword">const</span> method2 = <span class="title function_">getMethod</span>(event) <span class="comment">// 废弃</span></span><br><span class="line"><span class="keyword">const</span> header = <span class="title function_">getHeaders</span>(event)</span><br><span class="line"><span class="keyword">const</span> body = <span class="keyword">await</span> <span class="title function_">readBody</span>(event)</span><br><span class="line"><span class="keyword">const</span> rawBody = <span class="keyword">await</span> <span class="title function_">readRawBody</span>(event)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;query=&#x27;</span>, query) <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;method2=&#x27;</span>, method2) <span class="comment">// POST</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;header=&#x27;</span>, header) <span class="comment">// &#123; ... &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;body=&#x27;</span>, body) <span class="comment">// &#123; name: &#x27;zhangsan&#x27;, sex: &#x27;男&#x27;, age: 18 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;rawBody=&#x27;</span>, rawBody) <span class="comment">// &#123;&quot;name&quot;:&quot;zhangsan&quot;,&quot;sex&quot;:&quot;男&quot;,&quot;age&quot;:18&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/images/SSR/nuxt/nuxt%E5%88%9D%E4%BD%93%E9%AA%8C/serverAPI%E7%9A%84post%E6%96%B9%E6%B3%95.png"></p><p><strong>get请求</strong></p><h2 id="全局状态共享"><a href="#全局状态共享" class="headerlink" title="全局状态共享"></a>全局状态共享</h2><p>跨页面、跨组件全局状态共享可使用 useState（支持Server和Client ）。</p><ul><li><code>useState&lt;T&gt;(init?: () =&gt; T | Ref&lt;T&gt;): Ref&lt;T&gt;</code></li><li><code>useState&lt;T&gt;(key: string, init?: () =&gt; T | Ref&lt;T&gt;): Ref&lt;T&gt;</code></li><li>参数:<ul><li>init：为状态提供初始值的函数，该函数也支持返回一个Ref类型。</li><li>key: 唯一key，确保在跨请求获取该数据时，保证数据的唯一性。为空时会根据文件和行号自动生成唯一key。</li></ul></li><li>返回值：Ref 响应式对象。</li></ul><p>使用：</p><ol><li>在 composables 目录下编写，新建 composables&#x2F;states.ts。</li><li>在该文件中使用 useState 定义全局共享状态并导出。</li><li>在组件中导入 states.ts 导出的全局状态。</li></ol><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// composables/states.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useUserInfo = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">useState</span>(<span class="string">&#x27;userInfo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// pages/index.vue</span></span><br><span class="line"><span class="keyword">const</span> userInfo = <span class="title function_">useUserInfo</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userInfo.<span class="property">value</span>) <span class="comment">// &#123; name: &#x27;zhangsan&#x27;, age: 18 &#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>useState 只能在 setup 函数中 和 lifecycle 函数中使用。</li><li>useState 不支持 classes, functions or symbols类型，因为这些类型不支持序列化。</li></ul><h2 id="集成-Pinia"><a href="#集成-Pinia" class="headerlink" title="集成 Pinia"></a>集成 Pinia</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>安装依赖：<code>npm i pinia @pinia/nuxt</code></p><p>如有遇到 pinia 安装失败，可以添加 <code>--legacy-peer-deps</code> 告诉 NPM 忽略对等依赖并继续安装。</p><h3 id="配置-nuxt-config-ts"><a href="#配置-nuxt-config-ts" class="headerlink" title="配置 nuxt.config.ts"></a>配置 nuxt.config.ts</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">    <span class="attr">modules</span>: [ <span class="string">&#x27;@pinia/nuxt&#x27;</span> ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>在 store 目录中编写代码，如：store&#x2F;counter.ts</li><li>在该文件中使用功能 <code>defineStore</code> 函数来定义 store 对象。</li><li>在组件中使用定义好的 store 对象。</li></ol><p><strong>store&#x2F;counter.ts</strong></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">number</span> = <span class="title function_">ref</span>(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">doubleNumber</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="built_in">number</span>.<span class="property">value</span> *= <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="built_in">number</span>, doubleNumber</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>pages&#x2F;index.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;Page: index &#123;&#123; number &#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;button @click=&quot;counterStore.doubleNumber()&quot;&gt;double number&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; storeToRefs &#125; from &#x27;pinia&#x27;</span><br><span class="line">import &#123; useCounterStore &#125; from &#x27;~/store/counter&#x27;</span><br><span class="line"></span><br><span class="line">// 使用 pinia</span><br><span class="line">const counterStore = useCounterStore()</span><br><span class="line">const &#123; number &#125; = storeToRefs(counterStore)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="集成-ElementPlus"><a href="#集成-ElementPlus" class="headerlink" title="集成 ElementPlus"></a>集成 ElementPlus</h2><p><a href="https://nuxt.com/modules/element-plus">https://nuxt.com/modules/element-plus</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p> 命令：<code>npm i element-plus @element-plus/nuxt</code></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在 nuxt.config.ts  中配置 element-plus 模块</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">    <span class="attr">css</span>: [ <span class="string">&#x27;element-plus/dist/index.css&#x27;</span> ],</span><br><span class="line">    <span class="attr">modules</span>: [ <span class="string">&#x27;@element-plus/nuxt&#x27;</span> ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h3><p>新建 <code>plugins/element-plus.client.js</code> 文件</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> zhCn <span class="keyword">from</span> <span class="string">&#x27;element-plus/es/locale/lang/zh-cn&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtPlugin</span>(<span class="function"><span class="params">nuxtApp</span> =&gt;</span> &#123;</span><br><span class="line">    nuxtApp.<span class="property">vueApp</span>.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>, &#123;</span><br><span class="line">        <span class="attr">locale</span>: zhCn</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>修改 <code>nuxt.config.ts</code> 文件</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineNuxtConfig</span>(&#123;</span><br><span class="line">    <span class="attr">css</span>: [ <span class="string">&#x27;element-plus/dist/index.css&#x27;</span> ],</span><br><span class="line">    <span class="attr">plugins</span>: [ <span class="string">&#x27;@/plugins/element-plus.client.js&#x27;</span> ],</span><br><span class="line">    <span class="attr">modules</span>: [ <span class="string">&#x27;@element-plus/nuxt&#x27;</span> ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a&gt;基础概念&lt;/h2&gt;&lt;p&gt;SSR：Server side Render，服务器端渲染。&lt;/p&gt;
&lt;p&gt;SPA：Client side Render，客</summary>
      
    
    
    
    <category term="SSR" scheme="http://ran-up.github.io/categories/SSR/"/>
    
    
    <category term="nuxt" scheme="http://ran-up.github.io/tags/nuxt/"/>
    
  </entry>
  
  <entry>
    <title>前端面试全家桶</title>
    <link href="http://ran-up.github.io/2025/01/25/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%85%A8%E5%AE%B6%E6%A1%B6/"/>
    <id>http://ran-up.github.io/2025/01/25/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E5%85%A8%E5%AE%B6%E6%A1%B6/</id>
    <published>2025-01-25T15:25:28.000Z</published>
    <updated>2025-02-14T13:13:04.847Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML-面试题"><a href="#HTML-面试题" class="headerlink" title="HTML 面试题"></a>HTML 面试题</h2><h3 id="如何理解-HTML-语义化？"><a href="#如何理解-HTML-语义化？" class="headerlink" title="如何理解 HTML 语义化？"></a>如何理解 HTML 语义化？</h3><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">先解释，之后举例，然后说利弊。</div>        <div style="text-indent: 2rem">解释：使用正确的 HTML 标签来搭建结构，可以清晰明了的表示页面内容。</div>        <div style="text-indent: 2rem">比如：我们头部用 header 标签，导航用 nav 标签，独立的文章内容用 article 标签，页面底部。</div>        <div style="text-indent: 2rem">这样不但可以让我们更容易理解代码结构，增加代码可读性和可维护性。还可以提高搜索引擎的 SEO 效果，提高网站排名，增加网站访问。</div>    </div></details><h3 id="默认情况下，哪些-HTML-标签是块级元素？哪些是内联元素？"><a href="#默认情况下，哪些-HTML-标签是块级元素？哪些是内联元素？" class="headerlink" title="默认情况下，哪些 HTML 标签是块级元素？哪些是内联元素？"></a>默认情况下，哪些 HTML 标签是块级元素？哪些是内联元素？</h3><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">先解释，后举例。</div>        <div style="text-indent: 2rem">块级元素独占一行，可以设置宽高；内联元素不能独占一行，也不能设置宽高。还有一个内联块元素，也可以称作可替换元素，它具有内联元素不独占一行的特性，也有块级元素能设置宽高的特性。</div>        <div style="text-indent: 2rem">块级元素：<mark>div、h1-h6、ul、ol、li、dl、dd、dt、table、th、tr、td、p等</mark></div>        <div style="text-indent: 2rem">内联元素：<mark>a、span、strong、em、small、sub、sup、mark</mark></div>        <div style="text-indent: 2rem">内联块元素：<mark>img、select、button、input、video、audio、canvas等</mark></div>    </div></details><h3 id="什么叫可替换元素？"><a href="#什么叫可替换元素？" class="headerlink" title="什么叫可替换元素？"></a>什么叫可替换元素？</h3><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">先解释，后举例</div>        <div style="text-indent: 2rem">是因为这些元素展示的效果和内容不是 css 直接控制的，而是由元素的标签和属性，或外部资源来决定的。这类元素的内容可以被外部资源所替换，而无需改变元素的标签结构。 </div>        <div style="text-indent: 2rem">以 img 标签来说，它的内容是由 src 属性指定的图片资源来决定的，而不是通过 css 来控制。</div>    </div></details><h2 id="CSS-面试题"><a href="#CSS-面试题" class="headerlink" title="CSS 面试题"></a>CSS 面试题</h2><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><h4 id="盒模型的宽度如何计算？"><a href="#盒模型的宽度如何计算？" class="headerlink" title="盒模型的宽度如何计算？"></a>盒模型的宽度如何计算？</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">标准盒模型是 box-sizing: content-box，组成部分是：<mark>margin + border + padding + content</mark></div>        <div style="text-indent: 2rem">怪异盒模型是 box-sizing: border-box，组成部分是：<mark>margin + content（border + padding + content）</mark></div>    </div></details><h4 id="下面代码中的-div-的-offsetWith-有多大？"><a href="#下面代码中的-div-的-offsetWith-有多大？" class="headerlink" title="下面代码中的 div 的 offsetWith 有多大？"></a>下面代码中的 div 的 offsetWith 有多大？</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        padidng: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">offsetWidth：122px</div>        <div style="text-indent: 2rem">offsetWidth = （内容宽度 + 内边距 + 边框），无外边距</div>    </div></details><p><strong>如何让 offsetWidth 等于 100px？</strong></p><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">css 中加一句 <mark>box-sizing: border-box;</mark></div>    </div></details><h4 id="下面代码-AAA-和-BBB-之间的距离是多少？"><a href="#下面代码-AAA-和-BBB-之间的距离是多少？" class="headerlink" title="下面代码 AAA 和 BBB 之间的距离是多少？"></a>下面代码 AAA 和 BBB 之间的距离是多少？</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>BBB<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">15px</div>        <div style="text-indent: 2rem">需要注意的是：<mark>相邻元素的 margin-top 和 margin-bottom 会重叠；空白内容的 p 标签也会重叠</mark></div>    </div></details><h4 id="margin-纵向重叠的问题"><a href="#margin-纵向重叠的问题" class="headerlink" title="margin 纵向重叠的问题"></a>margin 纵向重叠的问题</h4><p>这个是父子外边距塌陷，可以开启 BFC，来解决塌陷问题。让其两个内容处于独立的层级中，互不影响。可以使用；</p><ul><li>overflow:hidden;</li><li>直接给父元素添加高度;</li><li>子元素添加 border；</li></ul><h4 id="margin-负值的问题"><a href="#margin-负值的问题" class="headerlink" title="margin 负值的问题"></a>margin 负值的问题</h4><h5 id="margin-的-left、top、right、bototm-为负值会如何？"><a href="#margin-的-left、top、right、bototm-为负值会如何？" class="headerlink" title="margin 的 left、top、right、bototm 为负值会如何？"></a>margin 的 left、top、right、bototm 为负值会如何？</h5><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">margin-top 为负值，元素向上移动。</div>        <div style="text-indent: 2rem">margin-left 为负值，元素向左移动。</div>        <div style="text-indent: 2rem">margin-right 为负值，右侧元素左移，自身不受影响。</div>        <div style="text-indent: 2rem">margin-bottom 为负值，下方元素上移，自身不受影响。</div>    </div></details><h4 id="BFC-理解和应用"><a href="#BFC-理解和应用" class="headerlink" title="BFC 理解和应用"></a>BFC 理解和应用</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">Block format context，块级格式化上下文，开启后，形成一块独立的渲染区域，与外界元素隔离开，内部元素的渲染不会影响到边界以外的元素。</div>        <div style="text-indent: 2rem">形成 BFC 的条件：            <ul>                <li>float 不是 none</li>                <li>position 是 absolute 或 fixed</li>                <li>overflow 不是 visible</li>                <li>display 是 flex、inline-block 等</li>            </ul>        </div>        <div style="text-indent: 2rem">BFC 的应用：            <ul>                <li>清除浮动</li>                <li>解决外边距合并</li>                <li>解决高度塌陷</li>                <li>双栏布局</li>            </ul>        </div>    </div></details><p>可以解决高度塌陷，外边距合并问题。</p><p>可以通过：</p><ul><li>overflow: hidden;</li><li>position 不为 relative;</li><li>display 为 flex、grid 等开启</li></ul><h3 id="float-布局"><a href="#float-布局" class="headerlink" title="float 布局"></a>float 布局</h3><h4 id="如何实现圣杯布局和双飞翼布局？"><a href="#如何实现圣杯布局和双飞翼布局？" class="headerlink" title="如何实现圣杯布局和双飞翼布局？"></a>如何实现圣杯布局和双飞翼布局？</h4><p>三栏布局，中间一栏先加载和渲染，随宽度自适应</p><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">技术总结：            <ul>                <li>使用 float 布局</li>                <li>两侧使用 margin 赋值，以便和中间内容横向重叠</li>                <li>防止中间内容被两侧覆盖，圣杯用 padidng 留白，双飞翼用 margin 留白</li>            </ul>        </div>    </div></details><h4 id="手写-clearfix"><a href="#手写-clearfix" class="headerlink" title="手写 clearfix"></a>手写 clearfix</h4><details>    <summary>点击查看答案</summary>    <pre>        .clearfix:after {            content: '';            display: table;            clear: both;        }        .clearfix: {            *zoom: 1; /* 兼容 IE 低版本 */        }      </pre></details><h3 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h3><h4 id="flex-实现一个三点的色子"><a href="#flex-实现一个三点的色子" class="headerlink" title="flex 实现一个三点的色子"></a>flex 实现一个三点的色子</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">            <pre>            </pre>        </div>    </div></details><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><h4 id="absolute-和-relative-分别依据什么定位？"><a href="#absolute-和-relative-分别依据什么定位？" class="headerlink" title="absolute 和 relative 分别依据什么定位？"></a>absolute 和 relative 分别依据什么定位？</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">absolute 根据离它最近一层的定位元素进行定位。定位元素包含：absolute、relative、fixed 或 找到 body。</div>        <div style="text-indent: 2rem">relative 根据自身进行定位。</div>    </div></details><h4 id="居中对齐有哪些实现方式？"><a href="#居中对齐有哪些实现方式？" class="headerlink" title="居中对齐有哪些实现方式？"></a>居中对齐有哪些实现方式？</h4><h4 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">inline 元素：text-align: center</div>        <div style="text-indent: 2rem">block 元素：margin: auto</div>        <div style="text-indent: 2rem">            absolute 元素：            <ul>                <li>left: 50% + margin-left 负值，需要知道子元素宽度</li>                <li>left: 50% + transformX(-50%)，不需要子元素宽度</li>            </ul>        </div>    </div></details><h4 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">inline 元素：line-height 的值等于 hegiht 值</div>        <div style="text-indent: 2rem">            absolute 元素：            <ul>                <li>top: 50% + margin-top 负值，需要知道子元素宽度</li>                <li>top: 50% + transformY(-50%)，不需要子元素宽度</li>                <li>top,left,bottom,right = 0 + margin: auto，不需要子元素宽度</li>            </ul>        </div>    </div></details><h3 id="图文样式"><a href="#图文样式" class="headerlink" title="图文样式"></a>图文样式</h3><h4 id="下面代码，line-height-如何继承？"><a href="#下面代码，line-height-如何继承？" class="headerlink" title="下面代码，line-height 如何继承？"></a>下面代码，line-height 如何继承？</h4><p>p 标签的行高是多少</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">200%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>AAA<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">40，body 的 font-size * line-height</div>        <div style="text-indent: 2rem">写具体数值，如 30px，则继承该值。</div>        <div style="text-indent: 2rem">写比例，如 2/15，则继承该比例，line-height 比例 * 子 font-size。</div>        <div style="text-indent: 2rem">写百分比，如 200%，则继承计算出来的值，font-size 父 * line-height 父比例</div>    </div></details><h3 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h3><h4 id="rem-是什么？"><a href="#rem-是什么？" class="headerlink" title="rem 是什么？"></a>rem 是什么？</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">rem 是相对长度单位，相对于根元素。</div>    </div></details><h4 id="rem-与-px、em-对比"><a href="#rem-与-px、em-对比" class="headerlink" title="rem 与 px、em 对比"></a>rem 与 px、em 对比</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">rem 是相对长度单位，相对于根元素，常用语响应式布局。</div>        <div style="text-indent: 2rem">px 是绝对长度单位。</div>        <div style="text-indent: 2rem">em 是相对长度单位，相当于父元素。</div>    </div></details><h4 id="网页视口尺寸有哪些？"><a href="#网页视口尺寸有哪些？" class="headerlink" title="网页视口尺寸有哪些？"></a>网页视口尺寸有哪些？</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">window.innerHeight // 网页视口高度，显示内容的哪个高度</div>        <div style="text-indent: 2rem">window.screen.height // 屏幕高度</div>        <div style="text-indent: 2rem">document.body.clientHeight // body 高度</div>    </div></details><h4 id="介绍一下-vw、vh"><a href="#介绍一下-vw、vh" class="headerlink" title="介绍一下 vw、vh"></a>介绍一下 vw、vh</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">vm 网页视口宽度的 1/100</div>        <div style="text-indent: 2rem">vh 网页视口高度的1/100</div>        <div style="text-indent: 2rem">vmax 取两者最大值；vmin 取两者最小值</div>    </div></details><h4 id="如何实现响应式？"><a href="#如何实现响应式？" class="headerlink" title="如何实现响应式？"></a>如何实现响应式？</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">可以使用 @media 来动态设置不同屏幕宽度下的根元素的 font-size，结合 rem。</div>    </div></details><h3 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h3><h4 id="动画-–-不是重点"><a href="#动画-–-不是重点" class="headerlink" title="动画 – 不是重点"></a>动画 – 不是重点</h4><h2 id="JS-面试题"><a href="#JS-面试题" class="headerlink" title="JS 面试题"></a>JS 面试题</h2><h3 id="值类型-与-引用类型"><a href="#值类型-与-引用类型" class="headerlink" title="值类型 与 引用类型"></a>值类型 与 引用类型</h3><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem"></div>    </div></details><h3 id="typeof-能判断哪些类型？"><a href="#typeof-能判断哪些类型？" class="headerlink" title="typeof 能判断哪些类型？"></a>typeof 能判断哪些类型？</h3><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">识别所有值类型、识别函数、判断是否为引用类型（不能细分）</div>    </div></details><h3 id="何时使用-x3D-x3D-x3D-何时使用-x3D-x3D-？"><a href="#何时使用-x3D-x3D-x3D-何时使用-x3D-x3D-？" class="headerlink" title="何时使用 &#x3D;&#x3D;&#x3D; 何时使用 &#x3D;&#x3D;？"></a>何时使用 &#x3D;&#x3D;&#x3D; 何时使用 &#x3D;&#x3D;？</h3><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">除了 == null 之外，其他的都用 === </div>        <div style="text-indent: 2rem">xxx == null 相当于 xxx === null || xxx === undefined</div>    </div></details><h3 id="值引用和引用类型的区别"><a href="#值引用和引用类型的区别" class="headerlink" title="值引用和引用类型的区别"></a>值引用和引用类型的区别</h3><h3 id="下面代码输出什么？"><a href="#下面代码输出什么？" class="headerlink" title="下面代码输出什么？"></a>下面代码输出什么？</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">x</span>: <span class="number">100</span>, <span class="attr">y</span>: <span class="number">200</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj2 = obj1</span><br><span class="line"><span class="keyword">let</span> x1 = obj1.<span class="property">x</span></span><br><span class="line">obj2.<span class="property">x</span> = <span class="number">101</span></span><br><span class="line">x1 = <span class="number">102</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1)</span><br></pre></td></tr></table></figure><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">101</div>    </div></details><h3 id="手写深拷贝"><a href="#手写深拷贝" class="headerlink" title="手写深拷贝"></a>手写深拷贝</h3><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><h4 id="原型关系"><a href="#原型关系" class="headerlink" title="原型关系"></a>原型关系</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">每个 class 都有显示原型 prototype</div>        <div style="text-indent: 2rem">每个实例都有隐式原型__proto__</div>        <div style="text-indent: 2rem">实例的__proto__指向对应 class 的 prototype</div>    </div></details><h4 id="基于原型的执行规则"><a href="#基于原型的执行规则" class="headerlink" title="基于原型的执行规则"></a>基于原型的执行规则</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">获取属性或执行方法时，先找自身的属性和方法，没有则自动通过__proto__查找</div>    </div></details><h4 id="如何准确判断一个变量是不是数组？"><a href="#如何准确判断一个变量是不是数组？" class="headerlink" title="如何准确判断一个变量是不是数组？"></a>如何准确判断一个变量是不是数组？</h4><h4 id="手写一个简单的-jQuery，考虑插件和扩展性"><a href="#手写一个简单的-jQuery，考虑插件和扩展性" class="headerlink" title="手写一个简单的 jQuery，考虑插件和扩展性"></a>手写一个简单的 jQuery，考虑插件和扩展性</h4><h4 id="class-的原型本质，怎么理解？"><a href="#class-的原型本质，怎么理解？" class="headerlink" title="class 的原型本质，怎么理解？"></a>class 的原型本质，怎么理解？</h4><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h4 id="作用域有哪些？"><a href="#作用域有哪些？" class="headerlink" title="作用域有哪些？"></a>作用域有哪些？</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">全局作用域、函数作用域、块级作用域</div>    </div></details><h4 id="this-的不同应用场景，如何取值？"><a href="#this-的不同应用场景，如何取值？" class="headerlink" title="this 的不同应用场景，如何取值？"></a>this 的不同应用场景，如何取值？</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">this 的取值是在函数执行时确定的，不是定义时确定的。</div>    </div></details><h4 id="手写-bind-函数"><a href="#手写-bind-函数" class="headerlink" title="手写 bind 函数"></a>手写 bind 函数</h4><h4 id="实际开发闭包的应用场景，举例说明"><a href="#实际开发闭包的应用场景，举例说明" class="headerlink" title="实际开发闭包的应用场景，举例说明"></a>实际开发闭包的应用场景，举例说明</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">隐藏数据</div>    </div></details><h4 id="点击时能否弹出对应序号？若不能，弹出的序号是什么？如何修改？"><a href="#点击时能否弹出对应序号？若不能，弹出的序号是什么？如何修改？" class="headerlink" title="点击时能否弹出对应序号？若不能，弹出的序号是什么？如何修改？"></a>点击时能否弹出对应序号？若不能，弹出的序号是什么？如何修改？</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i,a</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">a.<span class="property">innerHTML</span> = i +<span class="string">&#x27;&lt;br&gt;&#x27;</span></span><br><span class="line">a.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">e.<span class="title function_">preventDefault</span>()</span><br><span class="line"><span class="title function_">alert</span>(i)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">10</div>        <div style="text-indent: 2rem">在for 循环中定义i，不在外部，这样每次循环都会创建一个块作用域。</div>    </div></details><h4 id="下面两道代码输出什么？"><a href="#下面两道代码输出什么？" class="headerlink" title="下面两道代码输出什么？"></a>下面两道代码输出什么？</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数最为返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">create</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">100</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fn = <span class="title function_">create</span>()</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">200</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">100</div>        <div style="text-indent: 2rem">闭包中所有的自由变量的查找，是在函数定义的地方向上层作用域查找，而不是在执行的地方。</div>    </div></details><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数作为参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">fn</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">200</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">100</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">print</span>(fn)</span><br></pre></td></tr></table></figure><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">100</div>        <div style="text-indent: 2rem">闭包中所有的自由变量的查找，是在函数定义的地方向上层作用域查找，而不是在执行的地方。</div>    </div></details><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><h4 id="同步和异步的区别是什么？"><a href="#同步和异步的区别是什么？" class="headerlink" title="同步和异步的区别是什么？"></a>同步和异步的区别是什么？</h4><h4 id="手写用-Promise-加载一张图片"><a href="#手写用-Promise-加载一张图片" class="headerlink" title="手写用 Promise 加载一张图片"></a>手写用 Promise 加载一张图片</h4><p>前端</p><h3 id="event-loop"><a href="#event-loop" class="headerlink" title="event loop"></a>event loop</h3><h4 id="请描述-event-loop（事件循环-x2F-事件轮询）的机制，可画图。"><a href="#请描述-event-loop（事件循环-x2F-事件轮询）的机制，可画图。" class="headerlink" title="请描述 event loop（事件循环&#x2F;事件轮询）的机制，可画图。"></a>请描述 event loop（事件循环&#x2F;事件轮询）的机制，可画图。</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">JS 是单线程，异步需要基于回调来实现。而 event loop 就是异步回调的实现原理。</div>        <div style="text-indent: 2rem">每次 Call Stack 清空（每次轮询结束），即同步任务执行完；都是 DOM 重新渲染的机会，DOM 结构如果有改变则重新渲染；然后再去触发下一次 Event Loop。</div>    </div>    <div style="text-indent: 2rem">event loop执行顺序：Call Stack 清空、执行当前的微任务、尝试 DOM 渲染、触发 Event Loop。</div></details><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><h4 id="promise-有哪三种状态？如何变化？"><a href="#promise-有哪三种状态？如何变化？" class="headerlink" title="promise 有哪三种状态？如何变化？"></a>promise 有哪三种状态？如何变化？</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">pending 进行中，fulfilled 已完成，rejected 已拒绝</div>        <div style="text-indent: 2rem">pending -> fulfilled 或 pending -> rejected，变化不可逆。</div>        <div style="text-indent: 2rem">then 正常返回 fulfilled，里面有报错返回 rejected。</div>        <div style="text-indent: 2rem">catch 正常返回 fulfiled，里面有报错则返回 rejected</div>    </div></details><h4 id="下面三道代码输出结果是什么？"><a href="#下面三道代码输出结果是什么？" class="headerlink" title="下面三道代码输出结果是什么？"></a>下面三道代码输出结果是什么？</h4><h5 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem"> 1、3</div>        <div style="text-indent: 2rem">then 中未报错，不运行后面的 catch，而运行后面的 then。</div>    </div></details><h5 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error2&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">1、2、3</div>        <div style="text-indent: 2rem">then 中是报错，运行第一个 catch，catch 中未报错，结果是 resolved，运行后面的 then。</div>    </div></details><h5 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error1&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">1、2</div>        <div style="text-indent: 2rem">then 中是报错，运行第一个 catch，catch 中未报错，而后面跟着的是 catch，不运行。</div>    </div></details><h4 id="手写-Promise"><a href="#手写-Promise" class="headerlink" title="手写 Promise"></a>手写 Promise</h4><h3 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h3><h4 id="async-x2F-await-是什么？"><a href="#async-x2F-await-是什么？" class="headerlink" title="async&#x2F;await 是什么？"></a>async&#x2F;await 是什么？</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">它们是一个语法糖，归根到底还是需要进行 event loop，只是写法是同步的。它们是消灭异步回调的终极武器。</div>        <div style="text-indent: 2rem">执行 async 函数，返回的是 Promise 对象。</div>        <div style="text-indent: 2rem">await 相当于 Promise 的 then。</div>        <div style="text-indent: 2rem">try...catch 可以捕获异常，代替了 Promise 的 catch。</div>        <div style="text-indent: 2rem">async/await 是微任务</div>        <div style="text-indent: 2rem">注意：await 处理成功的结果，try...catch 处理错误的结果。当 await 的结果为 rejected 时，后面代码就不会走了，需要 try...catch 捕获异常。</div>    </div></details><h4 id="下面三道代码输出什么？"><a href="#下面三道代码输出什么？" class="headerlink" title="下面三道代码输出什么？"></a>下面三道代码输出什么？</h4><h5 id="题目一-1"><a href="#题目一-1" class="headerlink" title="题目一"></a>题目一</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span> () &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">async2</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"><span class="title function_">async1</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure><details>    <summary>点击查看答案</summary>    <pre>        script start        async1 start        async2        script end        async1 end     </pre></details><h5 id="题目二-1"><a href="#题目二-1" class="headerlink" title="题目二"></a>题目二</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="title function_">fn</span>()</span><br><span class="line">    <span class="keyword">const</span> b = <span class="keyword">await</span> <span class="title function_">fn</span>()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">Promise 对象，值为100、100</div>    </div></details><h5 id="题目三-1"><a href="#题目三-1" class="headerlink" title="题目三"></a>题目三</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">    <span class="keyword">const</span> a = <span class="keyword">await</span> <span class="number">100</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>, a)</span><br><span class="line">    <span class="keyword">const</span> b = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">200</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b&#x27;</span>, b)</span><br><span class="line">    <span class="keyword">const</span> c = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">300</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;c&#x27;</span>, c)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><details>    <summary>点击查看答案</summary>    <div style="text-indent: 2rem">start、'a' 100、'b' 200</div>    <div style="text-indent: 2rem">c 时 reject 导致程序出现异常，程序中断，后面的代码不执行。</div></details><h3 id="宏任务-x2F-微任务"><a href="#宏任务-x2F-微任务" class="headerlink" title="宏任务&#x2F;微任务"></a>宏任务&#x2F;微任务</h3><h4 id="什么是宏任务和微任务，两者有什么区别？"><a href="#什么是宏任务和微任务，两者有什么区别？" class="headerlink" title="什么是宏任务和微任务，两者有什么区别？"></a>什么是宏任务和微任务，两者有什么区别？</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">宏任务在 DOM 渲染后触发，比如 setTimeout；微任务在 DOM 渲染前触发，比如 Promise。</div>        <div style="text-indent: 2rem">宏任务：setTimeout、setInterval、Ajax、DOM 事件</div>        <div style="text-indent: 2rem">微任务：Promise、async/await</div>    </div></details><h4 id="为什么微任务在宏任务之前执行？"><a href="#为什么微任务在宏任务之前执行？" class="headerlink" title="为什么微任务在宏任务之前执行？"></a>为什么微任务在宏任务之前执行？</h4><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">因为每次 Call Stack 清空（每次轮询结束），即同步任务执行完；都是 DOM 重新渲染的机会，DOM 结构如果有改变则重新渲染；然后再去触发下一次 Event Loop。</div>    </div>        <div style="text-indent: 2rem">而宏任务在 DOM 渲染后触发，比如 setTimeout；微任务在 DOM 渲染前触发，比如 Promise。</div>    </div></details><h4 id="promise-和-setTimeout-的顺序"><a href="#promise-和-setTimeout-的顺序" class="headerlink" title="promise 和 setTimeout 的顺序"></a>promise 和 setTimeout 的顺序</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">200</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">300</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">400</span>)</span><br></pre></td></tr></table></figure><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">100、400、300、200</div>    </div></details><h4 id="async、await、setTimeout的顺序"><a href="#async、await、setTimeout的顺序" class="headerlink" title="async、await、setTimeout的顺序"></a>async、await、setTimeout的顺序</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">async2</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">async1</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure><details>    <summary>点击查看答案</summary>    <pre>        script start        async1 start        async2        promise1        script end        async1 end        promise2        setTimeout     </pre></details><h2 id="DOM-面试题"><a href="#DOM-面试题" class="headerlink" title="DOM 面试题"></a>DOM 面试题</h2><h3 id="DOM-是哪种数据结构"><a href="#DOM-是哪种数据结构" class="headerlink" title="DOM 是哪种数据结构"></a>DOM 是哪种数据结构</h3><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">树（DOM 树）</div>    </div></details><h3 id="DOM-操作的常用-API"><a href="#DOM-操作的常用-API" class="headerlink" title="DOM  操作的常用 API"></a>DOM  操作的常用 API</h3><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">有 DOM 节点操作和结构操作，还有 attr 和 property 的操作。getElementById、getElementsByTagName、getElementsByClassName、querySelectorAll、querySelector、getAttribute、createElement、appendChild、removeChild</div>    </div></details><h3 id="attr-和-property-的区别"><a href="#attr-和-property-的区别" class="headerlink" title="attr 和 property 的区别"></a>attr 和 property 的区别</h3><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">property 修改对象属性，不会体现到 html 结构中；attribute 修改 html 属性，会改变html 结构。两者都有可能引起 DOM 重新渲染。</div>    </div></details><h3 id="一次性插入多次-DOM-节点如何考虑性能"><a href="#一次性插入多次-DOM-节点如何考虑性能" class="headerlink" title="一次性插入多次 DOM 节点如何考虑性能"></a>一次性插入多次 DOM 节点如何考虑性能</h3><details>    <summary>点击查看答案</summary>    <div>        <div style="text-indent: 2rem">先使用 document.createDocumentFrament() 创建一个文档片段，等都遍历插入到文档碎片中后，最后将文档碎片插入到 DOM 中。</div>    </div></details><h2 id="BOM-面试题"><a href="#BOM-面试题" class="headerlink" title="BOM 面试题"></a>BOM 面试题</h2><h3 id="如何识别浏览器的类型"><a href="#如何识别浏览器的类型" class="headerlink" title="如何识别浏览器的类型"></a>如何识别浏览器的类型</h3><h3 id="分析拆解-url-各个部分"><a href="#分析拆解-url-各个部分" class="headerlink" title="分析拆解 url 各个部分"></a>分析拆解 url 各个部分</h3><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="编写一个通用的事件监听函数"><a href="#编写一个通用的事件监听函数" class="headerlink" title="编写一个通用的事件监听函数"></a>编写一个通用的事件监听函数</h3><h3 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h3><p>代码简洁、减少浏览器内存占用，但不要滥用。</p><h3 id="描述事件冒泡的流程"><a href="#描述事件冒泡的流程" class="headerlink" title="描述事件冒泡的流程"></a>描述事件冒泡的流程</h3><h3 id="无限下拉的图片列表，如何监听每个图片的点击？"><a href="#无限下拉的图片列表，如何监听每个图片的点击？" class="headerlink" title="无限下拉的图片列表，如何监听每个图片的点击？"></a>无限下拉的图片列表，如何监听每个图片的点击？</h3><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h3 id="git-的常用命令"><a href="#git-的常用命令" class="headerlink" title="git 的常用命令"></a>git 的常用命令</h3><details>    <summary>点击查看答案</summary>    <pre>        git diff -- 查看修改了的文件信息        git diff 文件名 -- 查看某个文件的修改信息        git config -- 设置提交的信息        git config use.name xxx -- 设置提交的用户名        git config use.email xxx -- 设置提交的邮箱        git log -- 查看提交日志        git show + git log 查询出来日志索引 -- 查看提交详细内容        git checkout 文件名 -- 撤销该文件修改        git checkout . -- 撤销所有文件的修改        git checkout -b 分支名 -- 切换分支        git branch -- 查看分支        get fetch -- 拉取远程的所有分支    </pre></details><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h3 id="谈谈浏览器"><a href="#谈谈浏览器" class="headerlink" title="谈谈浏览器"></a>谈谈浏览器</h3><p>浏览器是多进程架构，采用多进程架构可以解决多个线程之间可能存在的恶意修改或获取非授权数据等复杂的安全问题。</p><h3 id="单进程浏览器"><a href="#单进程浏览器" class="headerlink" title="单进程浏览器"></a>单进程浏览器</h3><ol><li>不稳定。单进程中的插件、渲染线程崩溃会导致整个浏览器崩溃。</li><li>不流畅。脚本（死循环）或插件会使浏览器卡顿。</li><li>不安全。插件和脚本可以获取到操作系统的任何资源。</li></ol><h3 id="多进程浏览器"><a href="#多进程浏览器" class="headerlink" title="多进程浏览器"></a>多进程浏览器</h3><ol><li>解决不稳定。进程相互隔离，一个页面或插件崩溃时，影响仅仅当前插件或页面，不会影响到其他页面。</li><li>解决不流畅。脚本阻塞当前页面渲染进程，不会影响到其他页面。</li><li>解决不安全。采用多进程架构，使用沙箱。</li></ol><h3 id="沙箱（安全沙箱）"><a href="#沙箱（安全沙箱）" class="headerlink" title="沙箱（安全沙箱）"></a>沙箱（安全沙箱）</h3><p>将渲染进程和 OS 隔离开的这道墙就是安全沙箱。沙箱是利用操作系统的安全技术给进程上了一把锁。沙箱的程序是可以运行的，但在渲染进程执行过程中是无法访问或修改 OS 中的数据的；如果需要在渲染进程中访问系统资源，那么需要通过浏览器内核来实现，将访问结果通过 IPC 转发给渲染进程。</p><h3 id="IPC-是什么？"><a href="#IPC-是什么？" class="headerlink" title="IPC 是什么？"></a>IPC 是什么？</h3><h3 id="为什么单进程无法被沙箱保护？"><a href="#为什么单进程无法被沙箱保护？" class="headerlink" title="为什么单进程无法被沙箱保护？"></a>为什么单进程无法被沙箱保护？</h3><p>因为最小的保护单位是进程。但单进程浏览器需要频繁的访问或修改 OS 的数据，所以单进程浏览器是无法被安全沙箱保护的。</p><h3 id="浏览器的主要进程有哪些？"><a href="#浏览器的主要进程有哪些？" class="headerlink" title="浏览器的主要进程有哪些？"></a>浏览器的主要进程有哪些？</h3><p>浏览器是多进程，主要分为：</p><h2 id="知识深度"><a href="#知识深度" class="headerlink" title="知识深度"></a>知识深度</h2><p>知识深度 1-2 个就行了。深度、广度不能兼得！！！</p><h3 id="如何检测-JS-内存泄露？JS-内存泄露场景有哪些？（JS-垃圾回收是什么算法？）"><a href="#如何检测-JS-内存泄露？JS-内存泄露场景有哪些？（JS-垃圾回收是什么算法？）" class="headerlink" title="如何检测 JS 内存泄露？JS 内存泄露场景有哪些？（JS 垃圾回收是什么算法？）"></a>如何检测 JS 内存泄露？JS 内存泄露场景有哪些？（JS 垃圾回收是什么算法？）</h3><h4 id="什么是垃圾回收？"><a href="#什么是垃圾回收？" class="headerlink" title="什么是垃圾回收？"></a>什么是垃圾回收？</h4><p>正常情况下，一个函数执行完，里面的变量都会被 JS 垃圾回收。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="string">&#x27;aaa&#x27;</span> <span class="comment">// 执行完，a 销毁</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="number">100</span></span><br><span class="line">    &#125; <span class="comment">// 执行完，obj 销毁</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><p>但某些情况下，变量不能被回收，因为可能被再次使用。比如变量在函数中挂载到了 window 上或闭包。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">obj</span> = obj <span class="comment">// 全局变量，obj 销毁不了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">genDataFns</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = &#123;&#125; <span class="comment">// 闭包，data 销毁不了</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params">key</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> data[key]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">key, val</span>) &#123;</span><br><span class="line">            data[key] = val</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; get, set &#125; = <span class="title function_">genDataFns</span>()</span><br></pre></td></tr></table></figure><p>变量销毁不了，<strong>不一定</strong>是内存泄露。</p><h3 id="Vue-每个生命周期都做了什么？"><a href="#Vue-每个生命周期都做了什么？" class="headerlink" title="Vue 每个生命周期都做了什么？"></a>Vue 每个生命周期都做了什么？</h3><h3 id="Vue2-Vue3-React-三者的-diff-算法有何区别？"><a href="#Vue2-Vue3-React-三者的-diff-算法有何区别？" class="headerlink" title="Vue2 Vue3 React 三者的 diff 算法有何区别？"></a>Vue2 Vue3 React 三者的 diff 算法有何区别？</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTML-面试题&quot;&gt;&lt;a href=&quot;#HTML-面试题&quot; class=&quot;headerlink&quot; title=&quot;HTML 面试题&quot;&gt;&lt;/a&gt;HTML 面试题&lt;/h2&gt;&lt;h3 id=&quot;如何理解-HTML-语义化？&quot;&gt;&lt;a href=&quot;#如何理解-HTML-语义化？&quot;</summary>
      
    
    
    
    <category term="前端面试集锦" scheme="http://ran-up.github.io/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
    
    <category term="面试题" scheme="http://ran-up.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>typescript知识</title>
    <link href="http://ran-up.github.io/2025/01/20/TypeScript/typescript%E7%9F%A5%E8%AF%86/"/>
    <id>http://ran-up.github.io/2025/01/20/TypeScript/typescript%E7%9F%A5%E8%AF%86/</id>
    <published>2025-01-20T11:01:22.000Z</published>
    <updated>2025-01-17T13:01:15.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么使用-ts"><a href="#为什么使用-ts" class="headerlink" title="为什么使用 ts"></a>为什么使用 ts</h2><ul><li>提供类型检查，减少错误</li><li>更友好的代码提示</li><li>增强代码可读性和可维护性</li><li>更好的代码重构</li><li>更好的代码组织和管理</li><li>JS 的超集，扩展新功能</li></ul><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><p>.ts 文件并不被浏览器所识别，运行不了。</p><p>所以需要转换为 .js 文件才能被浏览器所识别并运行。</p><p>我们可以安装 typescript，使用它提供的 tsc 来编译 .ts 文件。</p><p>安装：<code>npm i -g typescript</code></p><p>转换：<code>tsc xx.ts</code></p><p>不过，重新修改文件后需要重新运行转换命令。</p><p>如果想修改后自动进行装换，那么需要使用下面的命令。</p><p>自动监听的转换命令：<code>tsc xx.ts -w</code></p><h2 id="ts-文件设置全局或局部环境"><a href="#ts-文件设置全局或局部环境" class="headerlink" title=".ts 文件设置全局或局部环境"></a>.ts 文件设置全局或局部环境</h2><p>.ts 文件默认是全局环境的。也就是说，我们现在有两个文件，一个 a.ts，一个 b.ts。</p><p>a.ts 中定义了一个变量 a，<code>let a = 1</code>，在 b.ts 中输出变量 a，<code>console.log(a)</code>。</p><p>上面的代码不是不有警告的，b.ts 能够知道全局环境中有定义的 a 变量。</p><p>这样就不好了，我们希望 b.ts 只知道自己定义的 a 变量，而不应该知道全局环境中定义的 a 变量。</p><p><strong>解决办法：</strong>只要文件使用模块化操作，那么该文件就会变为局部环境。</p><p><strong>方法：</strong>在每个文件末尾添加 <code>export &#123;&#125;</code>，这样 a.ts、b.ts 就变成了一个个独立的模块，b.ts 就只能使用自己定义的 a 变量了。</p><h2 id="生成-tsconfig-json-文件"><a href="#生成-tsconfig-json-文件" class="headerlink" title="生成 tsconfig.json 文件"></a>生成 tsconfig.json 文件</h2><p>命令：<code>tsc --init</code></p><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><p>多个类型，只有符合其中的一个条件即可。</p><p>类型之间进行或操作。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">string</span> | <span class="built_in">number</span> = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A = &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="keyword">type</span> B = &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person1</span>: A | B = &#123; <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h2><p>多个类型，必须符合所有条件。</p><p>类型之间进行与操作。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A = &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="keyword">type</span> B = &#123; <span class="attr">age</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person1</span>: A &amp; B = &#123; <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="never"><a href="#never" class="headerlink" title="never"></a>never</h2><p>表示永远不会出现的值的类型。</p><p>很少用，一般是程序自动推断出来的。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">string</span> &amp; <span class="built_in">number</span> = <span class="number">1</span> <span class="comment">// 不能将类型“1”分配给类型“never”。</span></span><br></pre></td></tr></table></figure><p>也可以手动定义。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">n: <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span></span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (n) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="attr">default</span>: <span class="comment">// 这里是永远无法走到的</span></span><br><span class="line">            <span class="keyword">let</span> <span class="attr">m</span>: <span class="built_in">never</span> = n</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="any"><a href="#any" class="headerlink" title="any"></a>any</h2><p>表示任意类型，任何类型都可以赋值给 any 类型。</p><p>any 使用时，TS 不进行检测。</p><h2 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h2><p>表示 any 类型对应的安全类型。</p><p>unknow 使用时，TS 会进行检测。</p><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><p>当 TS 推断出来的类型并不满足我们的使用需要时，可以使用类型断言来手动指定一个类型。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">unknown</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">(a <span class="keyword">as</span> []).<span class="title function_">map</span>(<span class="function">() =&gt;</span> &#123; &#125;)</span><br></pre></td></tr></table></figure><h2 id="非空断言"><a href="#非空断言" class="headerlink" title="非空断言"></a>非空断言</h2><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>定义方法：</p><ul><li>类型[]</li><li>Array&lt;类型&gt; – 泛型的写法</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: <span class="built_in">string</span>[] = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr3</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr4</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr5</span>: (<span class="built_in">string</span> | <span class="built_in">number</span>)[] = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h2 id="元祖"><a href="#元祖" class="headerlink" title="元祖"></a>元祖</h2><p>表示一个已知元素数量和类型的数组，各元素的类型不必相同。</p><p>注意定义的元素类型和元素的数量和它的类型必须一致。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;1&#x27;</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="定义对象、可选属性、索引签名"><a href="#定义对象、可选属性、索引签名" class="headerlink" title="定义对象、可选属性、索引签名"></a>定义对象、可选属性、索引签名</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    sex?: <span class="built_in">string</span> <span class="comment">// 可选属性</span></span><br><span class="line">    [<span class="attr">index</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> <span class="comment">// 可以是任意属性，索引签名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;New York&#x27;</span> <span class="comment">// 可以是任意属性，这里就是多的，符合索引签名的定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，代码的提示只会提示定义的属性，不会提示索引签名的属性。</p><p>如上面会提示的属性有 name、age、address。</p><h2 id="空数组、空对象"><a href="#空数组、空对象" class="headerlink" title="空数组、空对象"></a>空数组、空对象</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [] <span class="comment">// 空数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ObjType</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125; <span class="keyword">as</span> <span class="title class_">ObjType</span> <span class="comment">// 空对象</span></span><br></pre></td></tr></table></figure><h2 id="定义函数、void类型"><a href="#定义函数、void类型" class="headerlink" title="定义函数、void类型"></a>定义函数、void类型</h2><p>函数的实参个数和形参个数必须一致。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo1</span> (<span class="attr">a</span>: <span class="built_in">string</span>, b?:<span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo1</span>(<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo2 = (<span class="attr">a</span>: <span class="built_in">string</span>, b?: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo2</span>(<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">foo3</span>: <span class="function">(<span class="params">a: <span class="built_in">string</span>, b?: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo3</span>(<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FooType</span> = <span class="function">(<span class="params">a: <span class="built_in">string</span>, b?: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">foo4</span>: <span class="title class_">FooType</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo4</span>(<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>void 类型是函数没有返回值的类型。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 void 可以不写return</span></span><br><span class="line"><span class="comment">// 也可以写 return，但后面不跟内容，或者跟 undefined</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo1</span> () &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo2</span> (): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo3</span> (): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果返回的是 undefined 需要手动指定返回类型为 undefined。</p><h2 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h2><p>现在需要实现一个函数，它接受一个、两个、四个参数，不能只传三个参数，因为第三个、第四个参数是搭配一起的。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数重载</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">n1: <span class="built_in">string</span></span>): <span class="built_in">any</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">n1: <span class="built_in">string</span>, n2: <span class="built_in">number</span></span>): <span class="built_in">any</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">n1: <span class="built_in">string</span>, n2: <span class="built_in">number</span>, n3: <span class="built_in">string</span> ,n4: <span class="built_in">string</span></span>): <span class="built_in">any</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">n1: <span class="built_in">string</span>, n2?: <span class="built_in">number</span>, n3?: <span class="built_in">string</span>, n4?: <span class="built_in">string</span></span>): <span class="built_in">any</span>&#123;&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// foo(&#x27;1&#x27;, 2, &#x27;3&#x27;) // Error</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="可调用注解"><a href="#可调用注解" class="headerlink" title="可调用注解"></a>可调用注解</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Foo</span> = &#123;</span><br><span class="line">    (<span class="attr">n1</span>: <span class="built_in">string</span>): <span class="built_in">any</span></span><br><span class="line">    (<span class="attr">n1</span>: <span class="built_in">string</span>, <span class="attr">n2</span>: <span class="built_in">number</span>): <span class="built_in">any</span></span><br><span class="line">    (<span class="attr">n1</span>: <span class="built_in">string</span>, <span class="attr">n2</span>: <span class="built_in">number</span>, <span class="attr">n3</span>: <span class="built_in">string</span>, <span class="attr">n4</span>: <span class="built_in">string</span>): <span class="built_in">any</span></span><br><span class="line">    username?: <span class="built_in">string</span> <span class="comment">// 添加属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">n1: <span class="built_in">string</span>, n2?: <span class="built_in">number</span>, n3?: <span class="built_in">string</span>, n4?: <span class="built_in">string</span></span>): <span class="built_in">any</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fn</span>: <span class="title class_">Foo</span> = foo</span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// fn(&#x27;1&#x27;, 2, &#x27;3&#x27;) // Error</span></span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">fn.<span class="property">username</span> = <span class="string">&#x27;haha&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn.<span class="property">username</span>) <span class="comment">// &#x27;haha&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>可以通过枚举的属性名获取枚举的值，也可以通过枚举的值获取枚举的属性名。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">UserType</span> &#123;</span><br><span class="line">    <span class="variable constant_">SUPER_ADMIN</span>,</span><br><span class="line">    <span class="variable constant_">ADMIN</span>,</span><br><span class="line">    <span class="variable constant_">USER</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">SUPER_ADMIN</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">ADMIN</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">USER</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>[<span class="number">0</span>]) <span class="comment">// SUPER_ADMIN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>[<span class="number">1</span>]) <span class="comment">// ADMIN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>[<span class="number">2</span>]) <span class="comment">// USER</span></span><br></pre></td></tr></table></figure><p>可以手动定义枚举的值。后面的枚举值会自动递增。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">UserType</span> &#123;</span><br><span class="line">    <span class="variable constant_">SUPER_ADMIN</span>,</span><br><span class="line">    <span class="variable constant_">ADMIN</span> = <span class="number">3</span>,</span><br><span class="line">    <span class="variable constant_">USER</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">SUPER_ADMIN</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">ADMIN</span>) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">USER</span>) <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>[<span class="number">0</span>]) <span class="comment">// SUPER_ADMIN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>[<span class="number">3</span>]) <span class="comment">// ADMIN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>[<span class="number">4</span>]) <span class="comment">// USER</span></span><br></pre></td></tr></table></figure><p>也可以定义为字符串，但定义为字符串后，所有的枚举值都必须手动赋值。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">UserType</span> &#123;</span><br><span class="line">    <span class="variable constant_">SUPER_ADMIN</span> = <span class="string">&#x27;super_admin&#x27;</span>,</span><br><span class="line">    <span class="variable constant_">ADMIN</span> = <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="variable constant_">USER</span> = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">SUPER_ADMIN</span>) <span class="comment">// super_admin</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">ADMIN</span>) <span class="comment">// admin</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">USER</span>) <span class="comment">// user</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">UserType</span> &#123;</span><br><span class="line">    <span class="variable constant_">SUPER_ADMIN</span> = <span class="string">&#x27;super_admin&#x27;</span>,</span><br><span class="line">    <span class="variable constant_">ADMIN</span> = <span class="number">2</span>,</span><br><span class="line">    <span class="variable constant_">USER</span> = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">SUPER_ADMIN</span>) <span class="comment">// super_admin</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">ADMIN</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">USER</span>) <span class="comment">// user</span></span><br></pre></td></tr></table></figure><h2 id="const-枚举"><a href="#const-枚举" class="headerlink" title="const 枚举"></a>const 枚举</h2><p>未使用 const 定义的枚举，编译结果对比</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.ts 文件</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">UserType</span> &#123;</span><br><span class="line">    <span class="variable constant_">SUPER_ADMIN</span> = <span class="string">&#x27;super_admin&#x27;</span>,</span><br><span class="line">    <span class="variable constant_">ADMIN</span> = <span class="number">2</span>,</span><br><span class="line">    <span class="variable constant_">USER</span> = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">SUPER_ADMIN</span>) <span class="comment">// super_admin</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">ADMIN</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">USER</span>) <span class="comment">// user</span></span><br></pre></td></tr></table></figure><p>编译结果</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.ts 文件编译后的.js 文件代码</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">UserType</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">UserType</span>) &#123;</span><br><span class="line">    <span class="title class_">UserType</span>[<span class="string">&quot;SUPER_ADMIN&quot;</span>] = <span class="string">&quot;super_admin&quot;</span>;</span><br><span class="line">    <span class="title class_">UserType</span>[<span class="title class_">UserType</span>[<span class="string">&quot;ADMIN&quot;</span>] = <span class="number">2</span>] = <span class="string">&quot;ADMIN&quot;</span>;</span><br><span class="line">    <span class="title class_">UserType</span>[<span class="string">&quot;USER&quot;</span>] = <span class="string">&quot;user&quot;</span>;</span><br><span class="line">&#125;)(<span class="title class_">UserType</span> || (<span class="title class_">UserType</span> = &#123;&#125;));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">SUPER_ADMIN</span>); <span class="comment">// super_admin</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">ADMIN</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">USER</span>); <span class="comment">// user</span></span><br></pre></td></tr></table></figure><p>使用 const 定义的枚举，会在编译时被移除，不会生成对应的代码。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .ts 文件</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">UserType</span> &#123;</span><br><span class="line">    <span class="variable constant_">SUPER_ADMIN</span> = <span class="string">&#x27;super_admin&#x27;</span>,</span><br><span class="line">    <span class="variable constant_">ADMIN</span> = <span class="number">2</span>,</span><br><span class="line">    <span class="variable constant_">USER</span> = <span class="string">&#x27;user&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">SUPER_ADMIN</span>) <span class="comment">// super_admin</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">ADMIN</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">UserType</span>.<span class="property">USER</span>) <span class="comment">// user</span></span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .ts 文件编译后的 .js 文件代码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;super_admin&quot;</span> <span class="comment">/* UserType.SUPER_ADMIN */</span>); <span class="comment">// super_admin</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span> <span class="comment">/* UserType.ADMIN */</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;user&quot;</span> <span class="comment">/* UserType.USER */</span>); <span class="comment">// user</span></span><br></pre></td></tr></table></figure><h2 id="接口-与-类型别名-的区别"><a href="#接口-与-类型别名-的区别" class="headerlink" title="接口 与 类型别名 的区别"></a>接口 与 类型别名 的区别</h2><p>接口是一系列抽象方法的声明，是一些方法特征的集合。</p><p>简单来说，接口的作用就是为这些类型命名和为我们的代码或第三方代码定义契约。</p><p>区别：</p><ul><li>接口主要用于对象类型，类型别名均可以。</li><li>相同接口定义可以进行合并，类型别名不行。</li><li>接口支持继承，类型别名不行。</li><li>类型别名支持映射类型，接口不支持。</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口主要用于对象类型，类型别名均可以</span></span><br><span class="line"><span class="keyword">type</span> A = <span class="built_in">string</span></span><br><span class="line"><span class="keyword">type</span> B = <span class="built_in">number</span>[]</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> C &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相同接口定义可以进行合并，类型别名不行。</span></span><br><span class="line"><span class="keyword">interface</span> D &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> D &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="built_in">string</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">e</span>: D = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="string">&#x27;b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口支持继承，类型别名不行。</span></span><br><span class="line"><span class="keyword">interface</span> F <span class="keyword">extends</span> D &#123;</span><br><span class="line">    <span class="attr">c</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h2><p>可以把字面量作为具体的类型使用，需要注意的是，该类型的取值就必须是该字面量的值。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Type</span> = <span class="string">&#x27;admin&#x27;</span> | <span class="string">&#x27;test&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">userType</span>: <span class="title class_">Type</span> = <span class="string">&#x27;admin&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="keyof-关键字"><a href="#keyof-关键字" class="headerlink" title="keyof 关键字"></a>keyof 关键字</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IObj</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// keyof 可以获取对象的所有属性名的联合类型，即 &#x27;name&#x27; | &#x27;age&#x27;</span></span><br><span class="line"><span class="comment">// keyof IObj 就是 &#x27;name&#x27; | &#x27;age&#x27;，只能选择这两个值</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: keyof <span class="title class_">IObj</span> = <span class="string">&#x27;age&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// typeof obj 就是 &#123;name: string, age: number&#125;</span></span><br><span class="line"><span class="comment">// keyof typeof obj 就是 &#x27;name&#x27; | &#x27;age&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">user2</span>: keyof <span class="keyword">typeof</span> obj = <span class="string">&#x27;age&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h2><p>类型保护允许我们使用更小范围下的对象类型。</p><ul><li>typeof</li><li>instanceof</li><li>in</li><li>字面量类型</li></ul><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// typeof</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">n: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> n === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="property">length</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// instanceof</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">userName</span> &#123;</span><br><span class="line">    name!: <span class="built_in">string</span> <span class="comment">// 非空断言</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">userAge</span> &#123;</span><br><span class="line">    age!: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">n: userName | userAge</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n <span class="keyword">instanceof</span> userName) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="property">name</span>)</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params">n: &#123;name: <span class="built_in">string</span>&#125; | &#123;age: <span class="built_in">number</span>&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> n) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字面量类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params">n: <span class="string">&#x27;a&#x27;</span> | <span class="number">123</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="property">length</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义类型保护"><a href="#自定义类型保护" class="headerlink" title="自定义类型保护"></a>自定义类型保护</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// is 是类型谓语</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isStr</span>(<span class="params">n: <span class="built_in">any</span></span>): n is <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> n === <span class="string">&#x27;string&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">n: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isStr</span>(n)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="property">length</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>指在定义函数、接口或类时，未指定参数类型，在运行时才确定。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类型别名</span></span><br><span class="line"><span class="keyword">type</span> A&lt;T&gt; = T</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: A&lt;<span class="built_in">string</span>&gt; = <span class="string">&#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: A&lt;<span class="built_in">number</span>&gt; = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">interface</span> IA&lt;T&gt; &#123;</span><br><span class="line">    (<span class="attr">n</span>: T): T</span><br><span class="line">    name?: T</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">c</span>: <span class="variable constant_">IA</span>&lt;<span class="built_in">string</span>&gt; = (<span class="attr">n</span>: <span class="built_in">string</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123; <span class="keyword">return</span> n&#125;</span><br><span class="line">c.<span class="property">name</span> = <span class="string">&#x27;string&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="keyword">function</span> fn&lt;T&gt; (<span class="attr">n</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AClass</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="attr">name</span>: T</span><br><span class="line">    <span class="title function_">constructor</span> (<span class="attr">name</span>: T) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">    getName (): T &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">    setName (<span class="attr">n</span>: T): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = n </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">AClass</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="title function_">getName</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d.<span class="title function_">setName</span>(<span class="string">&#x27;haha&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AClass</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="attr">name</span>: T</span><br><span class="line">    <span class="title function_">constructor</span> (<span class="attr">name</span>: T) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="title class_">AClass</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;123&#x27;</span>) <span class="comment">// 任何类型</span></span><br><span class="line"><span class="keyword">const</span> e = <span class="keyword">new</span> <span class="title class_">AClass</span>&lt;<span class="built_in">number</span>&gt;(<span class="number">123</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BClass</span> <span class="keyword">extends</span> <span class="title class_ inherited__">AClass</span>&lt;<span class="built_in">string</span>&gt; &#123; &#125; <span class="comment">// Bclass 只能是 string 类型</span></span><br><span class="line"><span class="keyword">const</span> f = <span class="keyword">new</span> <span class="title class_">BClass</span>(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = <span class="built_in">string</span></span><br><span class="line"><span class="keyword">function</span> fn1&lt;T <span class="keyword">extends</span> B&gt; (<span class="attr">n</span>: T): T &#123; <span class="comment">// 只能为 string 类型</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>(<span class="string">&#x27;string&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="类型兼容性"><a href="#类型兼容性" class="headerlink" title="类型兼容性"></a>类型兼容性</h2><p>类型兼容性用于确定一个类型是否能赋值给其他类型。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基础类型的兼容性</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">string</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="built_in">string</span> | <span class="built_in">number</span> = <span class="number">123</span></span><br><span class="line"><span class="comment">// a = b // error</span></span><br><span class="line">b = a <span class="comment">// ok</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象类型的兼容性</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">b</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: A = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: B = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="string">&#x27;1&#x27;</span> &#125;</span><br><span class="line">c = d <span class="comment">// ok</span></span><br><span class="line"><span class="comment">// d = c // error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数类型的兼容性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">&#123; a: <span class="built_in">number</span> &#125;</span>) &#123;&#125;</span><br><span class="line"><span class="title function_">fn</span>(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;)</span><br><span class="line"><span class="comment">// fn(&#123; a: 1, b: 2 &#125;) // error</span></span><br><span class="line"><span class="keyword">const</span> value = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="title function_">fn</span>(value) <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><p>对于基础类型来说，少的可以赋值给多的。<br>对于对象类型来说，多的可以赋值给少的。<br>对于函数类型来说，实参多的可以赋值给形参少的。</p><h2 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h2><p>只能通过 类型别名 来定义映射类型。不能使用 接口 来定义映射类型。</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> B = &#123;</span><br><span class="line">    [p <span class="keyword">in</span> keyof A]: A[p]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: B = &#123; <span class="attr">username</span>: <span class="string">&#x27;ss&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;</span><br></pre></td></tr></table></figure><p><code>keyof A</code> 是获取类型 A 的所有属性名的联合类型，即 <code>&#39;username&#39; | &#39;age&#39;</code>。<br><code>p in keyof A</code> 是遍历类型 A 的所有属性名，即 <code>&#39;username&#39; | &#39;age&#39;</code>。<br><code>A[p]</code> 是获取 当前遍历属性 p 在 类型 A 中的类型，即 <code>string | number</code>。</p><h2 id="内置工具类型"><a href="#内置工具类型" class="headerlink" title="内置工具类型"></a>内置工具类型</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> A = &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    gender?: <span class="built_in">string</span>,</span><br><span class="line">    <span class="keyword">readonly</span> address?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> a = <span class="title class_">Readonly</span>&lt;A&gt; <span class="comment">// 全部变为只读属性</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">type a = &#123;</span></span><br><span class="line"><span class="comment">    readonly username: string;</span></span><br><span class="line"><span class="comment">    readonly age: number;</span></span><br><span class="line"><span class="comment">    readonly gender?: string;</span></span><br><span class="line"><span class="comment">    readonly address?: string;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> b = <span class="title class_">Partial</span>&lt;A&gt; <span class="comment">// 全部变为可选属性</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">type b = &#123;</span></span><br><span class="line"><span class="comment">    username?: string;</span></span><br><span class="line"><span class="comment">    age?: number;</span></span><br><span class="line"><span class="comment">    gender?: string;</span></span><br><span class="line"><span class="comment">    readonly address?: string;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> c = <span class="title class_">Pick</span>&lt;A, <span class="string">&#x27;username&#x27;</span> | <span class="string">&#x27;age&#x27;</span>&gt; <span class="comment">// 挑选属性</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">type c = &#123;</span></span><br><span class="line"><span class="comment">    username: string;</span></span><br><span class="line"><span class="comment">    age: number;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> d = <span class="title class_">Record</span>&lt;<span class="string">&#x27;age&#x27;</span>, <span class="built_in">string</span>&gt; <span class="comment">// 把所有属性变为指定类型</span></span><br><span class="line"><span class="comment">/* type d = &#123; age: string; &#125; */</span></span><br><span class="line"><span class="keyword">type</span> e = <span class="title class_">Record</span>&lt;keyof A, <span class="built_in">string</span>&gt;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">type e = &#123;</span></span><br><span class="line"><span class="comment">    username: string;</span></span><br><span class="line"><span class="comment">    age: string;</span></span><br><span class="line"><span class="comment">    gender: string;</span></span><br><span class="line"><span class="comment">    address: string;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> f = <span class="title class_">Required</span>&lt;A&gt; <span class="comment">// 全部变为必选属性</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">type f = &#123;</span></span><br><span class="line"><span class="comment">    username: string;</span></span><br><span class="line"><span class="comment">    age: number;</span></span><br><span class="line"><span class="comment">    gender: string;</span></span><br><span class="line"><span class="comment">    readonly address: string;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> g = <span class="title class_">Exclude</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span>, <span class="built_in">boolean</span>&gt; <span class="comment">// 排除指定类型</span></span><br><span class="line"><span class="comment">/* type g = string | number; */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> h = <span class="title class_">Extract</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span>, <span class="built_in">boolean</span>&gt; <span class="comment">// 提取指定类型</span></span><br><span class="line"><span class="comment">/* type h = boolean; */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> i = <span class="title class_">Omit</span>&lt;A, <span class="string">&#x27;username&#x27;</span> | <span class="string">&#x27;age&#x27;</span>&gt; <span class="comment">// 剔除指定属性</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">type i = &#123;</span></span><br><span class="line"><span class="comment">    gender?: string;</span></span><br><span class="line"><span class="comment">    readonly address?: string;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> j = <span class="title class_">NonNullable</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | <span class="literal">undefined</span> | <span class="literal">null</span>&gt; <span class="comment">// 排除null和undefined</span></span><br><span class="line"><span class="comment">/* type j = string | number; */</span></span><br></pre></td></tr></table></figure><h2 id="infer-关键字"><a href="#infer-关键字" class="headerlink" title="infer 关键字"></a>infer 关键字</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> A&lt;T&gt; = T <span class="keyword">extends</span> <span class="title class_">Array</span>&lt;infer U&gt; ? U : T</span><br><span class="line"><span class="comment">// infer U 用来推断数组元素的类型</span></span><br><span class="line"><span class="comment">// 为什么加 infer，因为我们不知道数组的元素类型是什么，所以需要推断出来</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = A&lt;<span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt;&gt;</span><br><span class="line"><span class="keyword">type</span> C = A&lt;<span class="built_in">string</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="类如何使用类型"><a href="#类如何使用类型" class="headerlink" title="类如何使用类型"></a>类如何使用类型</h2><h3 id="类中定义类型"><a href="#类中定义类型" class="headerlink" title="类中定义类型"></a>类中定义类型</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    username!: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">string</span> = <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span> (<span class="attr">username</span>: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">username</span> = username</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">A</span>()</span><br><span class="line">a.<span class="property">username</span> = <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title function_">B</span>()</span><br><span class="line">b.<span class="property">username</span> = <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> <span class="title function_">C</span>(<span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c); <span class="comment">// A &#123; username: &#x27;zhangsan&#x27; &#125; B &#123; username: &#x27;zhangsan&#x27; &#125; C &#123; username: &#x27;zhangsan&#x27; &#125;</span></span><br><span class="line">c.<span class="property">username</span> = <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c); <span class="comment">// A &#123; username: &#x27;zhangsan&#x27; &#125; B &#123; username: &#x27;zhangsan&#x27; &#125; C &#123; username: &#x27;lisi&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="类使用接口"><a href="#类使用接口" class="headerlink" title="类使用接口"></a>类使用接口</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> IA &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">getUserInfo</span>(<span class="attr">age</span>: <span class="built_in">number</span>): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="variable constant_">IA</span> &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">string</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">    <span class="title function_">getUserInfo</span>(<span class="attr">age</span>: <span class="built_in">number</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.username&#125;</span>，今年<span class="subst">$&#123;age&#125;</span>岁了`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">A</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">getUserInfo</span>(<span class="number">18</span>))</span><br></pre></td></tr></table></figure><h3 id="类使用泛型"><a href="#类使用泛型" class="headerlink" title="类使用泛型"></a>类使用泛型</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="attr">username</span>: T</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">username: T</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">username</span> = username</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> A&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span>&lt;<span class="built_in">number</span>&gt;&#123; &#125;</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title function_">B</span>(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型接口</span></span><br><span class="line"><span class="keyword">interface</span> IA&lt;T&gt; &#123;</span><br><span class="line">    <span class="attr">username</span>: T</span><br><span class="line">    <span class="title function_">getUserInfo</span>(<span class="attr">age</span>: <span class="built_in">number</span>): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">implements</span> <span class="variable constant_">IA</span>&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="built_in">string</span> = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">    <span class="title function_">getUserInfo</span>(<span class="attr">age</span>: <span class="built_in">number</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`我叫<span class="subst">$&#123;<span class="variable language_">this</span>.username&#125;</span>，今年<span class="subst">$&#123;age&#125;</span>岁了`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">A</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">getUserInfo</span>(<span class="number">18</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么使用-ts&quot;&gt;&lt;a href=&quot;#为什么使用-ts&quot; class=&quot;headerlink&quot; title=&quot;为什么使用 ts&quot;&gt;&lt;/a&gt;为什么使用 ts&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;提供类型检查，减少错误&lt;/li&gt;
&lt;li&gt;更友好的代码提示&lt;/li&gt;
&lt;li&gt;增</summary>
      
    
    
    
    <category term="typescript" scheme="http://ran-up.github.io/categories/typescript/"/>
    
    
    <category term="typescript" scheme="http://ran-up.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>手工搭建简易SSR</title>
    <link href="http://ran-up.github.io/2025/01/18/SSR/nuxt/%E6%89%8B%E5%B7%A5%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93SSR/"/>
    <id>http://ran-up.github.io/2025/01/18/SSR/nuxt/%E6%89%8B%E5%B7%A5%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93SSR/</id>
    <published>2025-01-17T16:47:44.000Z</published>
    <updated>2025-02-11T14:56:14.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近开始学习 nuxt，先自己搭建一个简易的 SRR，来体验体验，并了解它的运行原理。</p><h2 id="搭建-服务端"><a href="#搭建-服务端" class="headerlink" title="搭建 服务端"></a>搭建 服务端</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>初始化项目：<code>npm init -y</code></p><p>安装依赖：</p><ul><li><p><code>npm i vue express</code></p></li><li><p><code>npm i -D nodemon vue-loader babel-loader @babel/preset-env webpack webpack-cli webpack-merge webpack-node-externals</code></p></li><li><p>vue: 前端框架</p></li><li><p>express：服务器</p></li><li><p>nodemon: 监听文件变化，自动重启服务器</p></li><li><p>vue-loader: 加载 .vue 文件</p></li><li><p>babel-loader: 加载 ES6 语法</p></li><li><p>@babel&#x2F;preset-env: 转换 ES6 语法</p></li><li><p>webpack: 打包工具</p></li><li><p>webpack-cli: 命令行工具</p></li><li><p>webpack-merge: 合并配置文件</p></li><li><p>webpack-node-externals: 排除 node 模块</p></li></ul><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul><li>config<ul><li>server.config.js</li></ul></li><li>node_modules</li><li>src<ul><li>demo<ul><li>index.html</li></ul></li><li>server<ul><li>index.js</li></ul></li><li>App.vue</li><li>app.js</li></ul></li><li>package-lock.json</li><li>package.json</li></ul><h3 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h3><h4 id="App-vue"><a href="#App-vue" class="headerlink" title="App.vue"></a>App.vue</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #eee&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addHandler&quot;</span>&gt;</span>点击增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">100</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">addHandler</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h4><p>返回函数的原因是避免<strong>跨请求状态污染</strong>。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSSRApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回函数，避免跨请求状态污染</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">createApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="title function_">createSSRApp</span>(<span class="title class_">App</span>)</span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="src-x2F-demo-x2F-index-html"><a href="#src-x2F-demo-x2F-index-html" class="headerlink" title="src&#x2F;demo&#x2F;index.html"></a>src&#x2F;demo&#x2F;index.html</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>custon-ssr<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>手动搭建ssr<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="src-x2F-server-x2F-index-js"><a href="#src-x2F-server-x2F-index-js" class="headerlink" title="src&#x2F;server&#x2F;index.js"></a>src&#x2F;server&#x2F;index.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">// 下面的文件导出方式是 ES6 的 export default 语法，所以这里需要用 import 语句导入</span></span><br><span class="line"><span class="comment">// 将 vue 实例转化为 html 字符串</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderToString &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/server-renderer&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createApp <span class="keyword">from</span> <span class="string">&#x27;../app.js&#x27;</span></span><br><span class="line"></span><br><span class="line">server.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="title function_">createApp</span>()</span><br><span class="line">    <span class="comment">// renderToString 是一个异步方法，返回一个 Promise 对象</span></span><br><span class="line">    <span class="keyword">const</span> appStringHtml = <span class="keyword">await</span> <span class="title function_">renderToString</span>(app) <span class="comment">// 生成字符串形式的 HTML</span></span><br><span class="line">    <span class="comment">// html 代码是 src/demo/inde.html 的内容</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">        &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;title&gt;custon-ssr&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;手动搭建ssr&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;div id=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="string">                <span class="subst">$&#123;appStringHtml&#125;</span></span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running on http://localhost:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="config-x2F-server-config-js"><a href="#config-x2F-server-config-js" class="headerlink" title="config&#x2F;server.config.js"></a>config&#x2F;server.config.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> nodeExternals = <span class="built_in">require</span>(<span class="string">&#x27;webpack-node-externals&#x27;</span>) <span class="comment">// 忽略node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/server/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;server_bundle.js&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../build/server&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/i</span>,</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.vue$/i</span>,</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>] <span class="comment">// import引入文件的时候不用加后缀</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>()], <span class="comment">// vue-loader插件</span></span><br><span class="line">    <span class="attr">externals</span>: [<span class="title function_">nodeExternals</span>()], <span class="comment">// 忽略node_modules</span></span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;node&#x27;</span>, <span class="comment">// 服务端渲染</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>entry 字段讲解</strong></p><ul><li>config 目录和 src 目录是同级的，为什么 entry 是 .&#x2F; 而不是 ..&#x2F;？</li><li>因为 webpack 的 entry 是相对于配置文件的 webpack.config.js</li><li>webpack 配置文件中的 entry 字段是相对于项目根目录的路径，而不是相对于配置文件本身</li><li>因此，无论配置文件在哪个目录下，entry 都应该是相对于项目根目录的路径。</li><li>所以这里的 .&#x2F;src&#x2F;client&#x2F;index.js 是相对于项目根目录的路径。</li></ul><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>package.json 的 script 添加下面字段。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;script&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build:server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --config ./config/server.config.js --watch&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon ./build/server/server_bundle.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h4><p>命令：</p><ul><li>打包服务端：npm run build:server</li><li>运行：npm run start</li></ul><p>ctrl + 鼠标左键单击 终端输出的 http:localhost:3000 可在浏览器中看到静态效果，不过点击按钮是无反应的。下面我们接着写客户端配置。</p><h2 id="搭建-客户端"><a href="#搭建-客户端" class="headerlink" title="搭建 客户端"></a>搭建 客户端</h2><h3 id="新增目录结构"><a href="#新增目录结构" class="headerlink" title="新增目录结构"></a>新增目录结构</h3><ul><li>config<ul><li>client.config.js</li></ul></li><li>src<ul><li>client<ul><li>index.js</li></ul></li></ul></li></ul><h3 id="编写代码-1"><a href="#编写代码-1" class="headerlink" title="编写代码"></a>编写代码</h3><h4 id="src-x2F-client-x2F-index-js"><a href="#src-x2F-client-x2F-index-js" class="headerlink" title="src&#x2F;client&#x2F;index.js"></a>src&#x2F;client&#x2F;index.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;../App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="config-x2F-client-config-js"><a href="#config-x2F-client-config-js" class="headerlink" title="config&#x2F;client.config.js"></a>config&#x2F;client.config.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/client/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;client_bundle.js&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../build/client&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/i</span>,</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.vue$/i</span>,</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>()],</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;web&#x27;</span>,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进行-Hydration-水合"><a href="#进行-Hydration-水合" class="headerlink" title="进行 Hydration 水合"></a>进行 Hydration 水合</h4><p>服务器端渲染页面 + 客户端激活页面，是页面有交互效果（这个过程称为：Hydration 水合）</p><p>Hydration 的具体步骤如下：</p><ol><li>开发一个 App 应用，比如 App.vue。</li><li>将 App.vue 打包为一个客户端的 client_bundle.js 文件。用来激活应用，使页面有交互效果。</li><li>将 App.vue 打包为一个服务器端的 server_bundle.js 文件。用来在服务器端动态生成页面的 HTML。</li><li>server_bundle.js 渲染的页面 + client_bundle.js 文件进行 Hydration。</li></ol><p><code>src/server/index.js</code> 添加下面代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">server.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;build&#x27;</span>)) <span class="comment">// 静态资源目录</span></span><br><span class="line"><span class="comment">// express.static() 是一个 Express 内置的中间件函数，用于提供静态资源</span></span><br><span class="line"><span class="comment">// build 目录下的文件会被映射到根路径下。</span></span><br><span class="line"><span class="comment">// 例如 build/client/client_bundle.js 可以通过 http://localhost:3000//client/client_bundle.js 访问</span></span><br><span class="line"><span class="comment">// server.use(express.static()) 使用中间件函数</span></span><br><span class="line"></span><br><span class="line">server.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">        &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;title&gt;custon-ssr&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;手动搭建ssr&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;div id=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="string">                <span class="subst">$&#123;appStringHtml&#125;</span></span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;script src=&quot;/client/client_bundle.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="package-json-1"><a href="#package-json-1" class="headerlink" title="package.json"></a>package.json</h4><p>package.json 的 script 添加下面字段。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;script&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build:client&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --config ./config/client.config.js --watch&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="查看结果-1"><a href="#查看结果-1" class="headerlink" title="查看结果"></a>查看结果</h4><p>命令：</p><ul><li>打包客户端：npm run build:client</li><li>打包服务端：npm run build:server</li><li>运行：npm run start</li></ul><p>ctrl + 鼠标左键单击 终端输出的 http:localhost:3000 可在浏览器中看到效果，此时点击按钮是有反应的。</p><h4 id="去除控制台警告"><a href="#去除控制台警告" class="headerlink" title="去除控制台警告"></a>去除控制台警告</h4><p>控制台报警告：</p><p><code>index.js:6 Feature flags __VUE_OPTIONS_API__, __VUE_PROD_DEVTOOLS__, __VUE_PROD_HYDRATION_MISMATCH_DETAILS__ are not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle. For more details, see https://link.vuejs.org/feature-flags.</code></p><p>去除警告，<code>config/client.config.js</code> 添加下面代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">DefinePlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>(),</span><br><span class="line">        <span class="comment">// 定义环境变量，关闭 vue 的调试提示</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">            <span class="attr">__VUE_OPTIONS_API__</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">__VUE_PROD_DEVTOOLS__</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">__VUE_PROD_HYDRATION_MISMATCH_DETAILS__</span>: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="提取重复配置代码"><a href="#提取重复配置代码" class="headerlink" title="提取重复配置代码"></a>提取重复配置代码</h2><p>现在的 config&#x2F;server.config.js 和 config&#x2F;client.js 有很多的重复代码，我们可以将其重复代码剔除为一个单独的文件，再在两个文件中引入。</p><h3 id="base-config-js"><a href="#base-config-js" class="headerlink" title="base.config.js"></a>base.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/i</span>,</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">options</span>: &#123;</span><br><span class="line">                    <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.vue$/i</span>,</span><br><span class="line">                <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>()],</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="server-config-js"><a href="#server-config-js" class="headerlink" title="server.config.js"></a>server.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> nodeExternals = <span class="built_in">require</span>(<span class="string">&#x27;webpack-node-externals&#x27;</span>) <span class="comment">// 忽略node_modules</span></span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./base.config&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(baseConfig, &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/server/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;server_bundle.js&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../build/server&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">externals</span>: [<span class="title function_">nodeExternals</span>()], <span class="comment">// 忽略node_modules</span></span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;node&#x27;</span> <span class="comment">// 服务端渲染</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="client-config-js"><a href="#client-config-js" class="headerlink" title="client.config.js"></a>client.config.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">DefinePlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">&#x27;./base.config&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; merge &#125; = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(baseConfig, &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/client/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;client_bundle.js&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../build/client&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="comment">// 定义环境变量，关闭 vue 的调试提示</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">            <span class="attr">__VUE_OPTIONS_API__</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">__VUE_PROD_DEVTOOLS__</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">__VUE_PROD_HYDRATION_MISMATCH_DETAILS__</span>: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;web&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="搭配-vue-router"><a href="#搭配-vue-router" class="headerlink" title="搭配 vue-router"></a>搭配 vue-router</h2><p>安装：<code>npm i vue-router</code></p><p><strong>注意：</strong>为了避免跨请求状态污染，我们需要在每一个请求中都创建一个全新的 Router，也就是生成函数。</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>src<ul><li>pages<ul><li>home.html</li><li>about.html</li></ul></li><li>router<ul><li>index.js</li></ul></li></ul></li></ul><h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><h4 id="src-x2F-pages-x2F-home-vue"><a href="#src-x2F-pages-x2F-home-vue" class="headerlink" title="src&#x2F;pages&#x2F;home.vue"></a>src&#x2F;pages&#x2F;home.vue</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是 Home 页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #eee&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addHandler&quot;</span>&gt;</span>点击增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">100</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">addHandler</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="src-x2F-pages-x2F-about-vue"><a href="#src-x2F-pages-x2F-about-vue" class="headerlink" title="src&#x2F;pages&#x2F;about.vue"></a>src&#x2F;pages&#x2F;about.vue</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是 About 页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #eee&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addHandler&quot;</span>&gt;</span>点击增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">addHandler</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="src-x2F-App-vue"><a href="#src-x2F-App-vue" class="headerlink" title="src&#x2F;App.vue"></a>src&#x2F;App.vue</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #eee&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addHandler&quot;</span>&gt;</span>点击增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">100</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">addHandler</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="src-x2F-router-x2F-index-js"><a href="#src-x2F-router-x2F-index-js" class="headerlink" title="src&#x2F;router&#x2F;index.js"></a>src&#x2F;router&#x2F;index.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../pages/home.vue&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;../pages/about.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">history</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">        routes,</span><br><span class="line">        history</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="src-x2F-server-x2F-index-js-1"><a href="#src-x2F-server-x2F-index-js-1" class="headerlink" title="src&#x2F;server&#x2F;index.js"></a>src&#x2F;server&#x2F;index.js</h4><p><strong>注意：</strong>这里的 <code>get(&#39;/&#39;)</code> 变为了 <code>get(&#39;/*&#39;)</code>，因为在地址栏中 about 页面也需要通过这里访问。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">// 下面的文件导出方式是 ES6 的 export default 语法，所以这里需要用 import 语句导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderToString &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/server-renderer&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createApp <span class="keyword">from</span> <span class="string">&#x27;../app.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createRouter <span class="keyword">from</span> <span class="string">&#x27;../router/index.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createMemoryHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line">server.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;build&#x27;</span>))</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">get</span>(<span class="string">&#x27;/*&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="title function_">createApp</span>()</span><br><span class="line">    <span class="keyword">const</span> router = <span class="title function_">createRouter</span>(<span class="title function_">createMemoryHistory</span>())</span><br><span class="line">    app.<span class="title function_">use</span>(router)</span><br><span class="line">    <span class="comment">// 有页面则跳转该页面，无页面就跳转首页</span></span><br><span class="line">    <span class="comment">// router.push() 是异步操作</span></span><br><span class="line">    <span class="keyword">await</span> router.<span class="title function_">push</span>(req.<span class="property">url</span> || <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// 用于等待所有异步导航钩子和异步组件加载完成。</span></span><br><span class="line">    <span class="comment">// 在服务器端渲染时非常重要，因为需要确保所有异步操作完成后再进行渲染。</span></span><br><span class="line">    <span class="comment">// 在客户端 和服务端我们都需要 等待路由器 先解析 异步路由组件</span></span><br><span class="line">    <span class="comment">// router.isReady() 是一个异步操作</span></span><br><span class="line">    <span class="keyword">await</span> router.<span class="title function_">isReady</span>()</span><br><span class="line">    <span class="comment">// renderToString 是一个异步方法，返回一个 Promise 对象</span></span><br><span class="line">    <span class="keyword">const</span> appStringHtml = <span class="keyword">await</span> <span class="title function_">renderToString</span>(app) <span class="comment">// 生成字符串形式的 HTML</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">        &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;title&gt;custon-ssr&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;手动搭建ssr&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;div id=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="string">                <span class="subst">$&#123;appStringHtml&#125;</span></span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;script src=&quot;/client/client_bundle.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running on http://localhost:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="src-x2F-client-x2F-index-js-1"><a href="#src-x2F-client-x2F-index-js-1" class="headerlink" title="src&#x2F;client&#x2F;index.js"></a>src&#x2F;client&#x2F;index.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;../App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createRouter <span class="keyword">from</span> <span class="string">&#x27;../router/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(<span class="title function_">createWebHistory</span>())</span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="查看结果-2"><a href="#查看结果-2" class="headerlink" title="查看结果"></a>查看结果</h4><p>命令：</p><ul><li>打包客户端：npm run build:client</li><li>打包服务端：npm run build:server</li><li>运行：npm run start</li></ul><p>ctrl + 鼠标左键单击 终端输出的 http:localhost:3000 可在浏览器中看到效果。</p><h2 id="搭配-pinia"><a href="#搭配-pinia" class="headerlink" title="搭配 pinia"></a>搭配 pinia</h2><p>安装：<code>npm i pinia</code></p><h3 id="目录-1"><a href="#目录-1" class="headerlink" title="目录"></a>目录</h3><ul><li>src<ul><li>store<ul><li>index.js</li></ul></li></ul></li></ul><h3 id="代码编写-1"><a href="#代码编写-1" class="headerlink" title="代码编写"></a>代码编写</h3><h4 id="src-x2F-store-x2F-index-js"><a href="#src-x2F-store-x2F-index-js" class="headerlink" title="src&#x2F;store&#x2F;index.js"></a>src&#x2F;store&#x2F;index.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">state</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">50</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">addHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="title function_">countDouble</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">count</span> * <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="src-x2F-pages-x2F-home-vue-1"><a href="#src-x2F-pages-x2F-home-vue-1" class="headerlink" title="src&#x2F;pages&#x2F;home.vue"></a>src&#x2F;pages&#x2F;home.vue</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是 Home 页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #eee&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addHandler&quot;</span>&gt;</span>点击增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// import &#123; ref &#125; from &#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useCountStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../store&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// const count = ref(100)</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> countStore = <span class="title function_">useCountStore</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123; count &#125; = <span class="title function_">storeToRefs</span>(countStore)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">addHandler</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="src-x2F-pages-x2F-about-vue-1"><a href="#src-x2F-pages-x2F-about-vue-1" class="headerlink" title="src&#x2F;pages&#x2F;about.vue"></a>src&#x2F;pages&#x2F;about.vue</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是 About 页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #eee&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addHandler&quot;</span>&gt;</span>点击增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// import &#123; ref &#125; from &#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useCountStore &#125; <span class="keyword">from</span> <span class="string">&#x27;../store&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// const count = ref(1000)</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> countStore = <span class="title function_">useCountStore</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123; count &#125; = <span class="title function_">storeToRefs</span>(countStore)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">addHandler</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="src-x2F-server-x2F-index-js-2"><a href="#src-x2F-server-x2F-index-js-2" class="headerlink" title="src&#x2F;server&#x2F;index.js"></a>src&#x2F;server&#x2F;index.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> server = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">// 下面的文件导出方式是 ES6 的 export default 语法，所以这里需要用 import 语句导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderToString &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/server-renderer&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createApp <span class="keyword">from</span> <span class="string">&#x27;../app.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createRouter <span class="keyword">from</span> <span class="string">&#x27;../router/index.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createMemoryHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line">server.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;build&#x27;</span>))</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">get</span>(<span class="string">&#x27;/*&#x27;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="title function_">createApp</span>()</span><br><span class="line">    <span class="keyword">const</span> router = <span class="title function_">createRouter</span>(<span class="title function_">createMemoryHistory</span>())</span><br><span class="line">    app.<span class="title function_">use</span>(router).<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br><span class="line">    <span class="comment">// 有页面则跳转该页面，无页面就跳转首页</span></span><br><span class="line">    <span class="comment">// router.push() 是异步操作</span></span><br><span class="line">    <span class="keyword">await</span> router.<span class="title function_">push</span>(req.<span class="property">url</span> || <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="comment">// 用于等待所有异步导航钩子和异步组件加载完成。</span></span><br><span class="line">    <span class="comment">// 在服务器端渲染时非常重要，因为需要确保所有异步操作完成后再进行渲染。</span></span><br><span class="line">    <span class="comment">// 在客户端 和服务端我们都需要 等待路由器 先解析 异步路由组件</span></span><br><span class="line">    <span class="comment">// router.isReady() 是一个异步操作</span></span><br><span class="line">    <span class="keyword">await</span> router.<span class="title function_">isReady</span>()</span><br><span class="line">    <span class="comment">// renderToString 是一个异步方法，返回一个 Promise 对象</span></span><br><span class="line">    <span class="keyword">const</span> appStringHtml = <span class="keyword">await</span> <span class="title function_">renderToString</span>(app) <span class="comment">// 生成字符串形式的 HTML</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">        &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;</span></span><br><span class="line"><span class="string">            &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;title&gt;custon-ssr&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;</span></span><br><span class="line"><span class="string">            &lt;h1&gt;手动搭建ssr&lt;/h1&gt;</span></span><br><span class="line"><span class="string">            &lt;div id=&quot;app&quot;&gt;</span></span><br><span class="line"><span class="string">                <span class="subst">$&#123;appStringHtml&#125;</span></span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;script src=&quot;/client/client_bundle.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">        &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Server is running on http://localhost:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="src-x2F-client-x2F-index-js-2"><a href="#src-x2F-client-x2F-index-js-2" class="headerlink" title="src&#x2F;client&#x2F;index.js"></a>src&#x2F;client&#x2F;index.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;../App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> createRouter <span class="keyword">from</span> <span class="string">&#x27;../router/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(<span class="title function_">createWebHistory</span>())</span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">use</span>(<span class="title function_">createPinia</span>()).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="查看结果-3"><a href="#查看结果-3" class="headerlink" title="查看结果"></a>查看结果</h4><p>命令：</p><ul><li>打包客户端：npm run build:client</li><li>打包服务端：npm run build:server</li><li>运行：npm run start</li></ul><p>ctrl + 鼠标左键单击 终端输出的 http:localhost:3000 可在浏览器中看到效果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;最近开始学习 nuxt，先自己搭建一个简易的 SRR，来体验体验，并了解它的运行原理。&lt;/p&gt;
&lt;h2 id=&quot;搭建-服务端&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="SSR" scheme="http://ran-up.github.io/categories/SSR/"/>
    
    
    <category term="nuxt" scheme="http://ran-up.github.io/tags/nuxt/"/>
    
  </entry>
  
  <entry>
    <title>异步题</title>
    <link href="http://ran-up.github.io/2025/01/17/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/%E5%BC%82%E6%AD%A5%E9%A2%98/"/>
    <id>http://ran-up.github.io/2025/01/17/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/%E5%BC%82%E6%AD%A5%E9%A2%98/</id>
    <published>2025-01-17T14:37:18.000Z</published>
    <updated>2025-01-23T14:38:42.228Z</updated>
    
    <content type="html"><![CDATA[<h2 id="看下面的代码，执行后依次输出什么"><a href="#看下面的代码，执行后依次输出什么" class="headerlink" title="看下面的代码，执行后依次输出什么"></a>看下面的代码，执行后依次输出什么</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">async2</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">async1</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure><details>    <summary>点击查看答案</summary>    <div>        <pre>            script start            async1 start            async2            promise1            script end            async1 end            promise2            setTimeout        </pre>        <div>            <h5>代码执行步骤：</h5>            <pre>            1.同步代码优先执行：                console.log('script start')：直接输出 script start。                调用 async1()，进入 async1 函数：                    console.log('async1 start')：输出 async1 start。                    遇到 await async2()，暂停 async1 的执行，先执行 async2。                进入 async2 函数：                    console.log('async2')：输出 async2。                    async2 执行完毕，返回一个 Promise，await 会让出控制权，将 async1 的剩余部分放入微任务队列。                继续执行同步代码：                    new Promise 的构造函数是同步的，所以 console.log('promise1')：输出 promise1。                    resolve() 将 Promise 的状态改为 fulfilled，将其 then 回调放入微任务队列。                console.log('script end')：输出 script end。            2.微任务队列执行：                微任务队列中有两个任务：                    async1 中 await 之后的代码：console.log('async1 end')。                    Promise 的 then 回调：console.log('promise2')。                按照微任务的先进先出原则：                    先执行 console.log('async1 end')：输出 async1 end。                    再执行 console.log('promise2')：输出 promise2。            3.宏任务队列执行：                宏任务队列中有一个任务：                    setTimeout 的回调：console.log('setTimeout')。                执行 console.log('setTimeout')：输出 setTimeout。            </pre>        </div>    </div></details>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;看下面的代码，执行后依次输出什么&quot;&gt;&lt;a href=&quot;#看下面的代码，执行后依次输出什么&quot; class=&quot;headerlink&quot; title=&quot;看下面的代码，执行后依次输出什么&quot;&gt;&lt;/a&gt;看下面的代码，执行后依次输出什么&lt;/h2&gt;&lt;figure class=&quot;hi</summary>
      
    
    
    
    <category term="前端面试集锦" scheme="http://ran-up.github.io/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
    
    <category term="面试题" scheme="http://ran-up.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>http状态码</title>
    <link href="http://ran-up.github.io/2025/01/16/%E7%BD%91%E7%BB%9C/http%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>http://ran-up.github.io/2025/01/16/%E7%BD%91%E7%BB%9C/http%E7%8A%B6%E6%80%81%E7%A0%81/</id>
    <published>2025-01-16T09:33:18.000Z</published>
    <updated>2025-01-16T09:50:13.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="返回-400"><a href="#返回-400" class="headerlink" title="返回 400"></a>返回 400</h2><ul><li>语法错误：如缺少必要参数、格式不正确等。</li><li>未授权：API 需要认证信息，请求未提供有效凭证。</li><li>资源不存在：客户端请求的资源在服务器上不存在。</li><li>请求过大：客户端发送的请求体太大。</li><li>请求超时：客户端的请求在服务器处理时超时。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;返回-400&quot;&gt;&lt;a href=&quot;#返回-400&quot; class=&quot;headerlink&quot; title=&quot;返回 400&quot;&gt;&lt;/a&gt;返回 400&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;语法错误：如缺少必要参数、格式不正确等。&lt;/li&gt;
&lt;li&gt;未授权：API 需要认证信息，请求未</summary>
      
    
    
    
    <category term="网络" scheme="http://ran-up.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络" scheme="http://ran-up.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>webpack 学习</title>
    <link href="http://ran-up.github.io/2025/01/15/webpack/webpack%E5%AD%A6%E4%B9%A0/"/>
    <id>http://ran-up.github.io/2025/01/15/webpack/webpack%E5%AD%A6%E4%B9%A0/</id>
    <published>2025-01-15T03:41:10.000Z</published>
    <updated>2025-01-23T14:37:21.619Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>新建 webpack-test 文件夹<ul><li>目录<ul><li>src<ul><li>hello.js<ul><li><code>export const hello= &#39;hello&#39;</code></li></ul></li><li>main.js<ul><li><code>import &#123; hello &#125; from &#39;./hello.js&#39;  console.log(hello + &#39; world&#39;)</code></li></ul></li></ul></li><li>webpack.config.js</li><li>package.json</li></ul></li></ul></li></ul><h2 id="打包-js-文件"><a href="#打包-js-文件" class="headerlink" title="打包 js 文件"></a>打包 js 文件</h2><ul><li><p>安装 webpack、webpack-cli</p><ul><li><p><code>npm i -D webpack webpack-cli</code></p></li><li><p>在 webpack.config.js 中输入下面代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: &#123; <span class="comment">// 入口文件</span></span><br><span class="line">        <span class="attr">main</span>: <span class="string">&#x27;./src/main.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123; <span class="comment">// 出口文件</span></span><br><span class="line">        <span class="attr">path</span>: __dirname + <span class="string">&#x27;/dist&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在 package.json 文件中编写命令行执行代码</p><ul><li><code>&quot;scripts&quot;: &#123; &quot;build&quot;: &quot;webpack&quot; &#125;</code></li></ul></li><li><p>终端输入：<code>npm run build</code></p></li><li><p>生成 dist 文件夹，里面有一个 main.js 文件，这个文件就是打包的 js 文件</p><ul><li>新建 index.html，导入打包的js文件：<code>&lt;script src=&#39;./main.js&#39;&gt;&lt;/script&gt;</code></li></ul></li></ul><h2 id="entry-字段讲解"><a href="#entry-字段讲解" class="headerlink" title="entry 字段讲解"></a>entry 字段讲解</h2><p>现在的目录是这样的：</p><ul><li>config<ul><li>client.config.js</li></ul></li><li>src<ul><li>client<ul><li>index.js</li></ul></li></ul></li><li>package-lock.json</li><li>package.json</li></ul><p>现在我需要在 client.config.js 中配置打包信息，其中遇到一个 entry 路径问题。</p><p>我写的是 <code>../src/client/index.js</code>，报路径错误。</p><p>后面改为 <code>./src/client/index.js</code> 就可以了。</p><p>查找了原因：</p><ul><li>config 目录和 src 目录是同级的，为什么 entry 是 .&#x2F; 而不是 ..&#x2F;？</li><li>因为 webpack 的 entry 是相对于配置文件的 webpack.config.js</li><li>webpack 配置文件中的 entry 字段是相对于项目根目录的路径，而不是相对于配置文件本身</li><li>因此，无论配置文件在哪个目录下，entry 都应该是相对于项目根目录的路径。</li><li>所以这里的 .&#x2F;src&#x2F;client&#x2F;index.js 是相对于项目根目录的路径。</li></ul><h2 id="html-文件自动引入打包文件"><a href="#html-文件自动引入打包文件" class="headerlink" title="html 文件自动引入打包文件"></a>html 文件自动引入打包文件</h2><ul><li><p>安装插件：<code>npm i -D html-webpack-plugin</code>，这个插件会自动生成 HTML 文件，并将打包后的 JavaScript 和 CSS 文件自动插入到 HTML 中。</p></li><li><p>新建 public 文件夹 和 index.html 文件，作为插件的模板 html 文件</p></li><li><p>修改 webpack.config.js 代码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>) <span class="comment">// 自动生成 HTML 文件的插件</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: &#123; <span class="comment">// 入口文件</span></span><br><span class="line">        <span class="attr">main</span>: <span class="string">&#x27;./src/main.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123; <span class="comment">// 出口文件</span></span><br><span class="line">        <span class="attr">path</span>: __dirname + <span class="string">&#x27;/dist&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span> <span class="comment">// 作为生成 HTML 文件的模板文件</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改 src&#x2F;main.js 文件内容：<code>import &#123; hello &#125; from &#39;./hello.js&#39; console.log(hello + &#39; world!!!&#39;)</code></p></li><li><p>终端输入：<code>npm run build</code></p></li><li><p>可以看到在 dist 文件夹中会自动生成 index.html</p></li></ul><h2 id="index-html-使用模板插件提供的-title"><a href="#index-html-使用模板插件提供的-title" class="headerlink" title="index.html 使用模板插件提供的 title"></a>index.html 使用模板插件提供的 title</h2><ul><li><p>可以在 HtmlWebpackPlugin 中定义 title 信息</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>) <span class="comment">// 自动生成 HTML 文件的插件</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: &#123; <span class="comment">// 入口文件</span></span><br><span class="line">        <span class="attr">main</span>: <span class="string">&#x27;./src/main.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123; <span class="comment">// 出口文件</span></span><br><span class="line">        <span class="attr">path</span>: __dirname + <span class="string">&#x27;/dist&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span>, <span class="comment">// 作为生成 HTML 文件的模板文件</span></span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;webpack-test&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改 public&#x2F;index.html 的 title 标签内容：<code>&lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</code></p></li><li><p>终端输入：<code>npm run build</code></p></li><li><p>可以在浏览器中看到标签页的 title 信息已经生效了，显示的：“webpack-test”</p></li></ul><h2 id="清除-dist-目录中的旧文件"><a href="#清除-dist-目录中的旧文件" class="headerlink" title="清除 dist 目录中的旧文件"></a>清除 dist 目录中的旧文件</h2><ul><li><p>安装插件：<code>npm i -D clean-webpack-plugin</code>，此插件在每次打包前清除输出目录中的旧文件。避免打包后的旧文件残留在输出目录中，导致构建过程中的文件混乱或冗余。保持输出目录的整洁。</p></li><li><p>修改 dist 文件夹中的 index.html 文件名为 index111.html</p></li><li><p>修改 webpack.config.js</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>) <span class="comment">// 自动生成 HTML 文件的插件</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>) <span class="comment">// 打包前清除输出目录中的旧文件</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: &#123; <span class="comment">// 入口文件</span></span><br><span class="line">        <span class="attr">main</span>: <span class="string">&#x27;./src/main.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123; <span class="comment">// 出口文件</span></span><br><span class="line">        <span class="attr">path</span>: __dirname + <span class="string">&#x27;/dist&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span> <span class="comment">// 作为生成 HTML 文件的模板文件</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>终端输入：<code>npm run build</code></p></li><li><p>可以看到 dist 文件夹中的 index111.html 被删除，从新出现 index.html 文件。</p></li></ul><h2 id="配置-webpack-的-web-服务环境"><a href="#配置-webpack-的-web-服务环境" class="headerlink" title="配置 webpack 的 web 服务环境"></a>配置 webpack 的 web 服务环境</h2><ul><li>此时的 webpack 是没有 web 服务环境的，可以使用 <code>webpack-dev-server</code> 模块来启动 web 服务</li><li>安装：<code>npm i -D webpack-dev-server</code></li><li>修改 package.json 中的 script 脚本，添加 <code>&quot;serve&quot;: &quot;webpack-dev-server&quot;</code></li><li>终端输入：<code>npm run serve</code>，就可以启动一个运行在 80 端口的服务了</li><li>此时的项目具有热更新，修改代码后不需要重新在终端进行启动</li></ul><h2 id="配置-sourcemap"><a href="#配置-sourcemap" class="headerlink" title="配置 sourcemap"></a>配置 sourcemap</h2><ul><li>sourcemap 启动映射文件，可以通过浏览器查找原始的文件，这样对调试是非常有帮助的。</li><li>比如我们现在在 main.js 中输入一个错误代码，<code>console.log(a)</code>，a 是不存在的，肯定会报错。</li><li><img src="/images/webpack/webpack学习/sourcemap配置1.png"/></li><li>上面可以看到报错信息指向的是打包后的文件，对于我们调试来说很麻烦。</li><li>可以使用 sourcemap 来映射文件，帮助我们更好的找到错误的位置。</li><li>在 webpack.config.js 文件中添加如下代码：<code>devtool: &#39;inline-source-map&#39;</code></li><li>修改了 webpack.config.js 文件后记得重新启动项目：<code>npm run serve</code></li><li><img src="/images/webpack/webpack学习/sourcemap配置2.png"/></li></ul><h2 id="css-模块化"><a href="#css-模块化" class="headerlink" title="css 模块化"></a>css 模块化</h2><ul><li>安装 <code>css-loader</code> 和 <code>style-loader</code> 来支持 css 模块化</li><li>命令：<code>npm i -D css-loader style-loader</code></li><li>在 webpack.config.js 中添加下面代码<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>] <span class="comment">// 从右至左依次执行</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>终端输入：<code>npm run serve</code></li><li>去控制台查看 Elements 选项能够发现 body 类上加入了 <code>* &#123; margin: 0; padding: 0; &#125;</code> 代码。</li></ul><h2 id="图片模块化"><a href="#图片模块化" class="headerlink" title="图片模块化"></a>图片模块化</h2><ul><li>如果想让 webpack 支持图片模块化也需要相应的 loader，不过最新版本的 webpack 已经内置了对图片的处理。</li><li>只需要配置好信息即可实现对图片的模块化处理。</li><li>修改 webpack.config.js 代码<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(png|gif|jpg|jpeg)/i</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;asset/resource&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>public&#x2F;index.html 添加 img：<code>&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;</code></li><li>main.js 添加：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> img <span class="keyword">from</span> <span class="string">&#x27;./assets/01.png&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> imgDom = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">imgDom.<span class="property">src</span> = img</span><br></pre></td></tr></table></figure></li><li>终端输入：<code>npm run serve</code></li></ul><h2 id="处理单文件-vue-文件"><a href="#处理单文件-vue-文件" class="headerlink" title="处理单文件 .vue 文件"></a>处理单文件 .vue 文件</h2><ul><li>安装：<code>npm i -D vue vue-template-complier vue-loader</code><ul><li>vue – 让 vue 功能生效</li><li>vue-template-complier – 支持单文件组件</li><li>vue-loader – 把单文件组件进行转换</li></ul></li><li>webpack.config.js 文件添加下面代码<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;vue-loader&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">      <span class="attr">rules</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="attr">test</span>: <span class="regexp">/\.vue$/i</span>,</span><br><span class="line">              <span class="attr">loader</span>: <span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>新建 src&#x2F;App.vue 文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;greet&quot; @click=&quot;clickHandler&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                msg: &#x27;Hello World&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            clickHandler() &#123;</span><br><span class="line">                alert(&#x27;Hi Vue&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .greet &#123;</span><br><span class="line">        background-color: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li>src&#x2F;main.js 文件新增下面代码<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li>pulic&#x2F;index.html 新增下面代码：<code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code></li><li>终端输入：<code>npm run serve</code>，可以看到页面显示 “hello word”，并且背景为天蓝色。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;新建 webpack-test 文件夹&lt;ul&gt;
&lt;li&gt;目录&lt;ul&gt;
&lt;li&gt;src&lt;ul&gt;
&lt;li&gt;hello.js&lt;ul&gt;
</summary>
      
    
    
    
    <category term="webpack" scheme="http://ran-up.github.io/categories/webpack/"/>
    
    
    <category term="webpack" scheme="http://ran-up.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>ElemetPlus报使用被废弃语法</title>
    <link href="http://ran-up.github.io/2025/01/03/Vue/ElemetPlus%E6%8A%A5%E4%BD%BF%E7%94%A8%E8%A2%AB%E5%BA%9F%E5%BC%83%E8%AF%AD%E6%B3%95/"/>
    <id>http://ran-up.github.io/2025/01/03/Vue/ElemetPlus%E6%8A%A5%E4%BD%BF%E7%94%A8%E8%A2%AB%E5%BA%9F%E5%BC%83%E8%AF%AD%E6%B3%95/</id>
    <published>2025-01-03T03:58:45.000Z</published>
    <updated>2025-01-03T04:12:40.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>今天做项目，遇到个很奇葩的问题： [ElPagination] 你使用了一些已被废弃的用法，请参考 el-pagination 的官方文档</p><img src="/images/Vue/ElemetPlus报使用被废弃语法/bug.png"/><p>之后对照文档，将一个一个属性改为固定数字后发现了问题。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>改到 <code>total</code> 属性是发现报错消失，恢复到使用动态参数时报错恢复，此时发现了问题出处。</p><p>猜测是 <code>total</code> 最初没有获取到的原因导致。</p><p>因为我使用了 TypeScript</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">:total=<span class="string">&quot;hospital_work_data?.total&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hospital_work_data = ref&lt;<span class="title class_">HospitalWork</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p>当请求到接口数据后 <code>hospital_work_data</code> 才会有内容，导致页面渲染后没有第一时间获取到内容导致。</p><p>确定了问题就好解决了。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>我给 <code>total</code> 添加了一个默认值：<code>:total=&quot;hospital_work_data?.total || 6&quot;</code></p><p>最终问题解决。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;今天做项目，遇到个很奇葩的问题： [ElPagination] 你使用了一些已被废弃的用法，请参考 el-pagination 的官方文档&lt;</summary>
      
    
    
    
    <category term="vue" scheme="http://ran-up.github.io/categories/vue/"/>
    
    
    <category term="ElementPlus" scheme="http://ran-up.github.io/tags/ElementPlus/"/>
    
  </entry>
  
  <entry>
    <title>router 中使用 pinia 的仓库，仓库属性不更新 bug</title>
    <link href="http://ran-up.github.io/2024/12/31/Vue/router%E4%B8%AD%E4%BD%BF%E7%94%A8pinia%E7%9A%84%E4%BB%93%E5%BA%93/"/>
    <id>http://ran-up.github.io/2024/12/31/Vue/router%E4%B8%AD%E4%BD%BF%E7%94%A8pinia%E7%9A%84%E4%BB%93%E5%BA%93/</id>
    <published>2024-12-31T14:43:21.000Z</published>
    <updated>2024-12-31T15:07:04.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>今天做项目在 router 中使用 pinia 的仓库时遇到了一些问题，记录一下。</p><p>我的操作是，在 router 中的前置路由守卫中使用 pinia 的用户信息仓库，修改其中的属性。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>操作页面后，页面不更新，仓库中的属性不更新。</p><p>我最初想法是在前置路由守卫之外获取 pinia 仓库实例。之后再路由守卫中修改其中的属性。触发页面内容的改变。</p><p>但这先出现了报错：<code>&quot;getActivePinia()&quot; was called but there was no active Pinia. Are you trying to use a store before calling &quot;app.use(pinia)&quot;?</code></p><p>然后我在获取 pinia 仓库实例时传入了 <code>createPinia()</code> 函数：<code>const userStore = useUserStore(createPinia())</code></p><p>这样就可以获取到 pinia 仓库实例了，并解决了报错。</p><p><strong>注意：</strong>在 main.ts 中需要保证 pinia 的加载在 路由 的加载之前。<code>app.use(createPinia()).use(router)</code></p><p>然后出现了现在的错误，仓库的内容不会更新。</p><p>最终发现的是在前置路由守卫之外定义的内容，不是响应式的，获取不到最新的内容。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>前置路由守卫之外定义的内容，不是响应式的，获取不到最新的内容。</p><p>需要在路由守卫中定义，当每次路由跳转时会获取到最新的内容。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>在前置路由守卫中使用 <code>useStore()</code> 函数获取 pinia 仓库实例：<code>const userStore = useUserStore()</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;今天做项目在 router 中使用 pinia 的仓库时遇到了一些问题，记录一下。&lt;/p&gt;
&lt;p&gt;我的操作是，在 router 中的前置路由</summary>
      
    
    
    
    <category term="vue" scheme="http://ran-up.github.io/categories/vue/"/>
    
    
    <category term="vue3" scheme="http://ran-up.github.io/tags/vue3/"/>
    
  </entry>
  
  <entry>
    <title>牛客前端js笔试题</title>
    <link href="http://ran-up.github.io/2024/12/28/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/%E7%89%9B%E5%AE%A2%E5%89%8D%E7%AB%AFjs%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    <id>http://ran-up.github.io/2024/12/28/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/%E7%89%9B%E5%AE%A2%E5%89%8D%E7%AB%AFjs%E7%AC%94%E8%AF%95%E9%A2%98/</id>
    <published>2024-12-27T17:38:35.766Z</published>
    <updated>2024-12-27T17:38:35.766Z</updated>
    
    <content type="html"><![CDATA[<p>一些面试笔试题</p><h2 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h2><h3 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h3><h4 id="js概念与类型检测"><a href="#js概念与类型检测" class="headerlink" title="js概念与类型检测"></a>js概念与类型检测</h4><p>以下不属于 typeof 运算符返回值的是？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="string">&quot;string&quot;</span></span><br><span class="line">B. <span class="string">&quot;function&quot;</span></span><br><span class="line">C. <span class="string">&quot;object&quot;</span></span><br><span class="line">D. <span class="string">&quot;null&quot;</span></span><br></pre></td></tr></table></figure><details>    <div>        <!-- <summary>答案</summary> -->        <p>D</p>    </div></details><br/><p>执行以下代码，错误的输出结果是</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. 输入：<span class="keyword">typeof</span> &#123;<span class="string">&quot;x&quot;</span>:<span class="number">1</span>&#125; 输出：<span class="string">&#x27;object&#x27;</span></span><br><span class="line">B. 输入：<span class="keyword">typeof</span> <span class="number">1</span> 输出：<span class="string">&#x27;number&#x27;</span> </span><br><span class="line">C. 输入：<span class="keyword">typeof</span> [&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;] 输出：<span class="string">&#x27;array&#x27;</span> </span><br><span class="line">D. 输入：<span class="keyword">typeof</span> <span class="title class_">NaN</span> 输出：<span class="string">&#x27;number&#x27;</span></span><br></pre></td></tr></table></figure><details>    <div>        <p>C</p>        <p>应该输出：'object'</p>    </div></details><br/><p>可以用 typeof 来判断的基本类型有</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="literal">undefined</span></span><br><span class="line">B. <span class="literal">null</span></span><br><span class="line">C. array</span><br><span class="line">D. object</span><br></pre></td></tr></table></figure><details>    <div>    <p>A</p>        <p>typeof 可以检测 `number、string、boolean、undefined、function、object。`</p>        <p>null、array 使用 typeof 检测出来都是：'object'</p>        <p>object 是引用类型</p>    </div></details><br/><p>以下不属于JavaScript基本数据类型的是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="title class_">Boolean</span></span><br><span class="line">B. <span class="literal">undefined</span></span><br><span class="line">C. <span class="title class_">Symbol</span></span><br><span class="line">D. <span class="title class_">Array</span></span><br></pre></td></tr></table></figure><details>    <div>    <p>D</p>    </div></details><br/><p>以下关于JavaScript中数据类型的说法错误的是</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. 数据类型分为基本数据类型和引用数据类型</span><br><span class="line">B. <span class="title class_">JavaScript</span>一共有<span class="number">8</span>种数据类型</span><br><span class="line">C. <span class="title class_">Object</span>是引用数据类型，且只存储于堆(heap)中</span><br><span class="line">D. <span class="title class_">BigInt</span>是可以表示任意精度整数的基本数据类型，存储于栈(stack)中</span><br></pre></td></tr></table></figure><details>    <div>    <p>C</p>    </div></details><br/><h4 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h4><p>请选择结果为ture的表达式？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="literal">null</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span></span><br><span class="line">B. <span class="literal">null</span> === <span class="literal">undefined</span></span><br><span class="line">C. <span class="literal">null</span> == <span class="literal">undefined</span></span><br><span class="line">D. <span class="title class_">NaN</span> == <span class="title class_">NaN</span></span><br></pre></td></tr></table></figure><details>    <div>    <p>C</p>    <p>NaN 不与任何值相等，包括它本身</p>    </div></details><br/><p>下列代码结果为 true 的是？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;a&#x27;</span>) === <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">B. <span class="title class_">Symbol</span>(<span class="string">&#x27;a&#x27;</span>) === <span class="title class_">Symbol</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">C. <span class="title class_">NaN</span> === <span class="title class_">NaN</span></span><br><span class="line">D. &#123;&#125; === &#123;&#125;</span><br></pre></td></tr></table></figure><details>    <div>    <p>A</p>    <p>Symbol.for(key) 会在 symbol 注册表中找相应的 key，找到就返回，未找到就创建。</p>    <p>Symbol 为独一无二的值，不相等</p>    <p>NaN 不与任何值相等，包括它本身</p>    <p>{} 为引用类型，是两个独立的对象，存储的地址不同</p>    </div></details><br/><p>根据如下变量，下列表达式中返回值为true的是</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = [];</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="literal">true</span>;</span><br><span class="line">A. (a || b) === <span class="literal">true</span></span><br><span class="line">B. (b &amp;&amp; c) === <span class="literal">true</span></span><br><span class="line">C. (c &amp;&amp; d) === <span class="literal">true</span></span><br><span class="line">D. (d || a) === <span class="literal">true</span></span><br></pre></td></tr></table></figure><details>    <div>    <p>D</p>    <p>|| 或运算，第一个为 true 就返回第一个的值，为 false 就返回第二个的值</p>    <p>&& 与运算，第一个为 true 就返回第二个值，为 false 就返回第一个的值</p>    <p>a || b --> 1、b && c --> ''、c && d --> ''、d || a --> true</p>    </div></details><br/><p>1&#x3D;&#x3D;true的返回值是true，这句话是否正确？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. T</span><br><span class="line">B. F</span><br></pre></td></tr></table></figure><details>    <div>    <p>A</p>    </div></details><br/><p>下面代码输出为true的是?</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="variable language_">console</span>.<span class="title function_">log</span>([] === []);</span><br><span class="line">B. <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> == <span class="number">0</span>);</span><br><span class="line">C. <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> == <span class="literal">false</span>);</span><br><span class="line">D. <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> == <span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure><details>    <div>    <p>D</p>    </div></details><br/><p>浏览器环境下，以下打印结果为true的是</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;12&quot;</span> === <span class="number">12</span>)</span><br><span class="line">B. <span class="variable language_">console</span>.<span class="property">log</span> (<span class="title class_">NaN</span> === <span class="title class_">NaN</span>)</span><br><span class="line">C. <span class="variable language_">console</span>.<span class="property">log</span> (<span class="title function_">typeof</span>(<span class="literal">null</span>) === <span class="title function_">typeof</span>(<span class="variable language_">window</span>))</span><br><span class="line">D. <span class="variable language_">console</span>.<span class="property">log</span> ([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] === [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><details>    <div>    <p>C</p>    <p>C选项都返回为 object</p>    </div></details><br/><p>以下表达式，正确的是</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="title class_">Number</span>(<span class="string">&#x27;a&#x27;</span>) == <span class="title class_">Number</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">B. -<span class="number">1</span> == <span class="literal">true</span></span><br><span class="line">C. <span class="number">3</span> + <span class="string">&#x27;2&#x27;</span> === <span class="number">5</span></span><br><span class="line">D. ![] == <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><details>    <div>    <p>D</p>    </div></details><br/><h4 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h4><p>如何把 7.25 四舍五入为最接近的整数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">7.25</span>)</span><br><span class="line">B. <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">7.25</span>)</span><br><span class="line">C. <span class="title function_">round</span>(<span class="number">7.25</span>)</span><br><span class="line">D. <span class="title class_">Math</span>.<span class="title function_">rnd</span>(<span class="number">7.25</span>)</span><br></pre></td></tr></table></figure><details>    <div>    <p>A</p>    </div></details><br/> <p>下面哪个选项可以产生 0&lt;&#x3D;num&lt;&#x3D;10 的随机整数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">6</span>)</span><br><span class="line">B. <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">10</span>)</span><br><span class="line">C. <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">11</span>)</span><br><span class="line">D. <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">10</span>)</span><br></pre></td></tr></table></figure><details>    <div>    <p>C</p>    <p><strong>注意：</strong>D永远取不到0，但能取到10</p>    </div></details><br/> <p>以下( )表达式产生一个0~7之间(含0,7)的随机整数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">6</span>)</span><br><span class="line">B. <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">7</span>)</span><br><span class="line">C. <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">8</span>)</span><br></pre></td></tr></table></figure><details>    <div>    <p>C</p>    </div></details><br/> <h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>split() 方法用于把一个字符串分割成字符串数组。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. T</span><br><span class="line">B. F</span><br></pre></td></tr></table></figure><details>    <div>    <p>A</p>    </div></details><br/>  <p>String对象的哪个方法可以寻找子字符串并返回该子字符串位置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="title function_">match</span>()</span><br><span class="line">B. <span class="title function_">indexOf</span>()</span><br><span class="line">C. <span class="title function_">search</span>()</span><br><span class="line">D. <span class="title function_">concat</span>()</span><br></pre></td></tr></table></figure><details>    <div>    <p>BC</p>    </div></details><br/>   <h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p>下面哪一个是JSON数据？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. ｛<span class="attr">name</span>:<span class="string">&quot;xiaoming&quot;</span>,age,<span class="string">&quot;student&quot;</span>｝</span><br><span class="line">B. ｛<span class="string">&quot;name&quot;</span>:<span class="string">&quot;xiaoming&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;student&quot;</span>｝</span><br><span class="line">C. ｛<span class="string">&quot;xiaoming&quot;</span>,<span class="string">&quot;student&quot;</span>｝</span><br><span class="line">D. [<span class="string">&quot;xiaoming&quot;</span>,<span class="string">&quot;student&quot;</span>]</span><br></pre></td></tr></table></figure><details>    <div>    <p>B</p>    </div></details><br/> <p>下面分别使用 JSON.stringify 方法，返回值 res 分别是</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> res = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(fn)</span><br><span class="line"><span class="keyword">const</span> num = <span class="number">123</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(num)</span><br><span class="line"><span class="keyword">const</span> res = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title class_">NaN</span>)</span><br><span class="line"><span class="keyword">const</span> b = <span class="literal">true</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(b)</span><br><span class="line">  </span><br><span class="line">A. <span class="string">&#x27;function&#x27;</span>、<span class="string">&#x27;123&#x27;</span>、<span class="string">&#x27;NaN&#x27;</span>、<span class="string">&#x27;true&#x27;</span></span><br><span class="line">B. <span class="literal">undefined</span>、<span class="string">&#x27;123&#x27;</span>、<span class="literal">undefined</span>、<span class="string">&#x27;true&#x27;</span></span><br><span class="line">C. <span class="literal">undefined</span>、<span class="string">&#x27;123&#x27;</span>、<span class="string">&#x27;null&#x27;</span>、<span class="string">&#x27;true&#x27;</span></span><br><span class="line">D. <span class="literal">undefined</span>、<span class="string">&#x27;123&#x27;</span>、<span class="string">&#x27;null&#x27;</span>、<span class="literal">undefined</span></span><br></pre></td></tr></table></figure><details>    <div>    <p>C</p>    </div></details><br/> <h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>js数组中不会改变原有数组的方法是()</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. push</span><br><span class="line">B. concat</span><br><span class="line">C. sort</span><br><span class="line">D. shift</span><br></pre></td></tr></table></figure><details>    <div>    <p>B</p>    </div></details><br/>  <p>下列哪种数组的方法不会修改数组本身</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. slice</span><br><span class="line">B. splice</span><br><span class="line">C. sort</span><br><span class="line">D. unshift</span><br></pre></td></tr></table></figure><details>    <div>    <p>A</p>    </div></details><br/>  <p>JavaScript中需要往数组末尾处添加一个元素，应该使用以下哪个方法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. push</span><br><span class="line">B. pop</span><br><span class="line">C. shift</span><br><span class="line">D. unshift</span><br></pre></td></tr></table></figure><details>    <div>    <p>A</p>    </div></details><br/>  <p>以下js操作Array的方法中不能添加元素的是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. push</span><br><span class="line">B. pop</span><br><span class="line">C. unshift</span><br><span class="line">D. splice</span><br></pre></td></tr></table></figure><details>    <div>    <p>B</p>    </div></details><br/> <p>数组以下哪个方法会影响原数组？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. concat</span><br><span class="line">B. splice</span><br><span class="line">C. slice</span><br><span class="line">D. join</span><br></pre></td></tr></table></figure><details>    <div>    <p>B</p>    </div></details><br/> <p>JavaScript中，下列哪一个Array的方法的返回值类型和其他不同</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. concat</span><br><span class="line">B. shift</span><br><span class="line">C. filter</span><br><span class="line">D. map</span><br></pre></td></tr></table></figure><details>    <div>    <p>B</p>    </div></details><br/> <p>如下的 Array.prototype 上的方法中，那个方法不会改变原有的数组？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. push</span><br><span class="line">B. slice</span><br><span class="line">C. splice</span><br><span class="line">D. sort</span><br></pre></td></tr></table></figure><details>    <div>    <p>B</p>    </div></details><br/> <p>对于一个数字组成的数组 nums，现在需要执行在不改动 nums 的基础上去重操作，返回一个新的无重复元素的数组，以下几段代码能完成这一操作的是()</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (1)</span></span><br><span class="line"><span class="keyword">const</span> newNums = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(nums))</span><br><span class="line">  </span><br><span class="line"><span class="comment">// (2)</span></span><br><span class="line"><span class="keyword">const</span> newNums = nums.<span class="title function_">filter</span>(<span class="function">(<span class="params">n, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> nums.<span class="title function_">indexOf</span>(n) === i</span><br><span class="line">&#125;)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// (3)</span></span><br><span class="line"><span class="keyword">const</span> newNums = nums.<span class="title function_">forEach</span>(<span class="function">(<span class="params">n, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> nums.<span class="title function_">indexOf</span>(n) === i</span><br><span class="line">&#125;)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// (4)</span></span><br><span class="line"><span class="keyword">const</span> newNums = nums.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, n, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [].<span class="title function_">concat</span>(acc, nums.<span class="title function_">indexOf</span>(n) === i ? n : [])</span><br><span class="line">&#125;)</span><br><span class="line">  </span><br><span class="line">A. (<span class="number">1</span>)、(<span class="number">2</span>)、(<span class="number">3</span>)、(<span class="number">4</span>)</span><br><span class="line">B. (<span class="number">1</span>)、(<span class="number">3</span>)、(<span class="number">4</span>)</span><br><span class="line">C. (<span class="number">1</span>)、(<span class="number">2</span>)、(<span class="number">4</span>)</span><br><span class="line">D. (<span class="number">1</span>)、(<span class="number">4</span>)</span><br><span class="line">  </span><br></pre></td></tr></table></figure><details>    <div>    <p>C</p>    </div></details><br/> <h4 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h4><p>正则表达式 ^d+[^d]+ 能匹配下列哪个字符串？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="number">123</span></span><br><span class="line">B. 123a</span><br><span class="line">C. d123</span><br><span class="line">D. 123def</span><br></pre></td></tr></table></figure><details>    <div>    <p>C</p>    </div></details><br/> <p>下面哪个不是RegExp对象的方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. test</span><br><span class="line">B. match</span><br><span class="line">C. exec</span><br><span class="line">D. compile</span><br></pre></td></tr></table></figure><details>    <div>    <p>D</p>    </div></details><br/> <p>以下哪项可以去除变量str中的所有空格</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. str.<span class="title function_">replace</span>(<span class="string">`/\s*/g,&quot;&quot;`</span>)</span><br><span class="line">B. str.<span class="title function_">replace</span>(<span class="string">`/^\s|\s$/g,&quot;&quot;`</span>)</span><br><span class="line">C. str.<span class="title function_">replace</span>(<span class="string">`/^\s*/, &quot;&quot;`</span>)</span><br><span class="line">D. str.<span class="title function_">replace</span>(<span class="string">`/(\s*$)/g, &quot;&quot;`</span>)</span><br></pre></td></tr></table></figure><details>    <div>    <p>A</p>    </div></details><br/> <h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>下列函数哪个不是JavaScript的全局函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="built_in">encodeURI</span></span><br><span class="line">B. <span class="built_in">parseFloat</span></span><br><span class="line">C. round</span><br><span class="line">D. <span class="built_in">eval</span></span><br></pre></td></tr></table></figure><details>    <div>    <p>C</p>    </div></details><br/> <p>编写高性能JavaScript，以下描述错误的是</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. 遵循严格模式：<span class="string">&quot;use strict&quot;</span></span><br><span class="line">B. 将js脚本放在页面顶部，加快渲染页面</span><br><span class="line">C. 将js脚本成组打包，减少请求，尽量减少使用闭包</span><br><span class="line">D. 使用非阻塞方式下载js脚本，最小化重绘(repaint)和回流(reflow)</span><br></pre></td></tr></table></figure><details>    <div>    <p>B</p>    </div></details><br/> <p>有关JavaScript中系统方法的描述，错误的是？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="built_in">parseFloat</span>方法：该方法将一个字符串转换成对应的小数</span><br><span class="line">B. <span class="built_in">isNaN</span>方法：该方法用于检测参数是否为数值型，如果是，返回<span class="literal">true</span>，否则，返回<span class="literal">false</span>。</span><br><span class="line">C. <span class="built_in">escape</span>方法： 该方法返回对一个字符串编码后的结果字符串</span><br><span class="line">D. <span class="built_in">eval</span>方法：该方法将某个参数字符串作为一个<span class="title class_">JavaScript</span>执行题</span><br></pre></td></tr></table></figure><details>    <div>    <p>B</p>    </div></details><br/> <p>下面列出的浏览器，无webkit内核的是()</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. chrome</span><br><span class="line">B. <span class="title class_">Safari</span></span><br><span class="line">C. 搜狗浏览器</span><br><span class="line">D. <span class="title class_">Firefox</span></span><br></pre></td></tr></table></figure><details>    <div>    <p>D</p>    </div></details><br/> <p>下列代码哪个能够实现获取形式为 2017-08-01 形式的日期( )？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A</span></span><br><span class="line"><span class="keyword">var</span> formatDate=<span class="title function_">getDate</span>()</span><br><span class="line"><span class="comment">// B</span></span><br><span class="line"><span class="keyword">var</span> formatDate = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="keyword">var</span> formatDate = <span class="keyword">function</span> (<span class="params">date</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">    <span class="keyword">var</span> m = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> d = date.<span class="title function_">getDate</span>();</span><br><span class="line">    <span class="keyword">return</span> y + <span class="string">&#x27;-&#x27;</span> + m + <span class="string">&#x27;-&#x27;</span> + d;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// D</span></span><br><span class="line"><span class="keyword">var</span> formatDate = <span class="keyword">function</span> (<span class="params">date</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = date.<span class="title function_">getFullYear</span>();</span><br><span class="line">    <span class="keyword">var</span> m = date.<span class="title function_">getMonth</span>() + <span class="number">1</span>;</span><br><span class="line">    m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span><br><span class="line">    <span class="keyword">var</span> d = date.<span class="title function_">getDate</span>();</span><br><span class="line">    d = d &lt; <span class="number">10</span> ? (<span class="string">&#x27;0&#x27;</span> + d) : d;</span><br><span class="line">    <span class="keyword">return</span> y + <span class="string">&#x27;-&#x27;</span> + m + <span class="string">&#x27;-&#x27;</span> + d;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><details>    <div>    <p>D</p>    </div></details><br/> <p>下面哪一项不能最小化重绘(repaint)和回流(reflow)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. 需要对元素进行复杂的操作时，可以先隐藏(<span class="attr">display</span>:<span class="string">&quot;none&quot;</span>)，操作完成后再显示</span><br><span class="line">B. 需要创建多个<span class="variable constant_">DOM</span>节点时，使用<span class="title class_">DocumentFragment</span>创建完后一次性的加入<span class="variable language_">document</span></span><br><span class="line">C. 尽量避免用table布局(table元素一旦触发回流就会导致table里所有的其它元素回流)</span><br><span class="line">D. 尽量不要使用 css 属性简写，如：用border-width, border-style, border-color代order</span><br></pre></td></tr></table></figure><details>    <div>    <p>D</p>    </div></details><br/> <h3 id="JS深入"><a href="#JS深入" class="headerlink" title="JS深入"></a>JS深入</h3><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p>下列哪种方法不能改变this指向()</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="built_in">eval</span></span><br><span class="line">B. apply</span><br><span class="line">C. bind</span><br><span class="line">D. call</span><br></pre></td></tr></table></figure><details>    <div>    <p>A</p>    </div></details><br/> <p>在JavaScript中下面选项关于this描述正确的是</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. 在使用<span class="keyword">new</span>实例化对象时, <span class="variable language_">this</span>指向这个实例对象</span><br><span class="line">B. 将对象的方法赋值给变量A。执行<span class="title function_">A</span>()时 该方法中的<span class="variable language_">this</span>指向这个对象。 </span><br><span class="line">C. 在函数定义时,<span class="variable language_">this</span>指向全局变量</span><br><span class="line">D. 在浏览器下的全局范围内，<span class="variable language_">this</span>指向全局对象</span><br></pre></td></tr></table></figure><details>    <div>    <p>A</p>    </div></details><br/> <p>下面有关JavaScript中call和apply方法的描述，错误的是？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. call与apply都属于 <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span> 的一个方法，所以每个<span class="keyword">function</span>实例都有call、apply属性</span><br><span class="line">B. 两者传递的参数不同，call函数第一个参数都是要传入给当前对象的对象，apply不是</span><br><span class="line">C. apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入</span><br><span class="line">D. call传入的则是直接的参数列表。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。</span><br></pre></td></tr></table></figure><details>    <div>    <p>B</p>    </div></details><br/> <h4 id="作用域-闭包"><a href="#作用域-闭包" class="headerlink" title="作用域(闭包)"></a>作用域(闭包)</h4><p>内存泄漏是 javascript 代码中必须尽量避免的，以下几段代码可能会引起内存泄漏的有()</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (1)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    name = <span class="string">&#x27;javascript&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getName</span>()</span><br><span class="line">  </span><br><span class="line"><span class="comment">// (2)</span></span><br><span class="line"><span class="keyword">const</span> elements = &#123;</span><br><span class="line">    <span class="attr">button</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(elements.<span class="property">button</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">removeButton</span>()</span><br><span class="line">  </span><br><span class="line"><span class="comment">// (3)</span></span><br><span class="line"><span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#node&#x27;</span>) </span><br><span class="line">    <span class="keyword">if</span>(node) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">  </span><br><span class="line">A. (<span class="number">1</span>)、(<span class="number">2</span>)、(<span class="number">3</span>)</span><br><span class="line">B. (<span class="number">2</span>)、(<span class="number">3</span>)</span><br><span class="line">C. (<span class="number">1</span>)、(<span class="number">3</span>)</span><br><span class="line">D. (<span class="number">1</span>)、(<span class="number">2</span>)</span><br><span class="line">  </span><br></pre></td></tr></table></figure><details>    <div>    <p>D</p>    <p>(2) 是如果一直不点击就会形成：没有被清理的DOM元素引用</p>    </div></details><br/> <p>那个操作不会造成内存泄露</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. 没有清理的<span class="variable constant_">DOM</span>元素引用</span><br><span class="line">B. 被遗忘的定时器</span><br><span class="line">C. 事件侦听没有移除</span><br><span class="line">D. 局部变量不用时，没有设为<span class="literal">null</span></span><br></pre></td></tr></table></figure><details>    <div>    <p>D</p>    </div></details><br/> <p>下列关于闭包理解错误的是</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. 增加一定的内存消耗</span><br><span class="line">B. 使用不当可能会导致内存泄漏</span><br><span class="line">C. 可以使用闭包模拟私有方法</span><br><span class="line">D. 闭包会改动对象的原型链</span><br></pre></td></tr></table></figure><details>    <div>    <p>D</p>    </div></details><br/> <h4 id="原型与继承"><a href="#原型与继承" class="headerlink" title="原型与继承"></a>原型与继承</h4><p>JavaScript实现继承的方式，不正确的是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. 原型链继承</span><br><span class="line">B. 构造函数继承</span><br><span class="line">C. 组合继承</span><br><span class="line">D. 关联继承</span><br></pre></td></tr></table></figure><details>    <div>    <p>D</p>    <ul>        <h4>继承方式</h4>        <li>原型链继承</li>        <li>构造函数继承</li>        <li>组合继承</li>        <li>寄生式继承</li>        <li>寄生式组合继承</li>    </ul>    </div></details><br/> <p>所有对象都有原型</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. T</span><br><span class="line">B. F</span><br></pre></td></tr></table></figure><details>    <div>    <p>B</p>    <p>null 没有</p>    </div></details><br/> <p>以下关于原型链的描述正确的是:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. 通过原型链继承的属性和对象自己定义的属性等效</span><br><span class="line">B. 通过原型链可以模拟对象的私有属性</span><br><span class="line">C. 在对象上访问不存在的属性时,会依次遍历整条原型链</span><br><span class="line">D. 所有 <span class="title class_">JavaScript</span> 中的对象都是位于原型链顶端的 <span class="string">`Object`</span> 的实例</span><br></pre></td></tr></table></figure><details>    <div>    <p>C</p>    </div></details><br/> <h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><p>以下不属于前端数据存储方式的是？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. jsonp</span><br><span class="line">B. cookie</span><br><span class="line">C. <span class="variable language_">localStorage</span></span><br><span class="line">D. sessionStorage</span><br></pre></td></tr></table></figure><details>    <div>    <p>A</p>    </div></details><br/> <h3 id="DOM题"><a href="#DOM题" class="headerlink" title="DOM题"></a>DOM题</h3><h4 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h4><p>将A元素拖拽并放置到B元素中，B元素需要做哪项操作()？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. event.<span class="title function_">preventDefault</span>()</span><br><span class="line">B. event.<span class="title function_">prevent</span>()</span><br><span class="line">C. event.<span class="title function_">drag</span>()</span><br><span class="line">D. event.<span class="title function_">drop</span>()</span><br></pre></td></tr></table></figure><details>    <div>    <p>A</p>    </div></details><br/> <p>以下不支持冒泡的鼠标事件为(      )？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. mouseover</span><br><span class="line">B. click</span><br><span class="line">C. mouseleave</span><br><span class="line">D. mousemove</span><br></pre></td></tr></table></figure><details>    <div>    <p>C</p>    <p>mouseenter、mouseleave都不支持事件冒泡</p>    </div></details><br/> <p>在javascript中，用于阻止默认事件的默认操作的方法是</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="title function_">stopDeafault</span>()</span><br><span class="line">B. <span class="title function_">stopPropagation</span>()</span><br><span class="line">C. <span class="title function_">preventDefault</span>()</span><br><span class="line">D. <span class="title function_">preventDefaultEven</span>()</span><br></pre></td></tr></table></figure><details>    <div>    <p>C</p>    </div></details><br/> <p>事件传播的三个阶段是什么</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">目标 -&gt; 捕获 -&gt; 冒泡</span><br><span class="line">冒泡 -&gt; 目标 -&gt; 捕获</span><br><span class="line">目标 -&gt; 冒泡 -&gt; 捕获</span><br><span class="line">捕获 -&gt; 目标 -&gt; 冒泡</span><br></pre></td></tr></table></figure><details>    <div>    <p>D</p>    </div></details><br/> <p>下面有关 javascript 常见事件的触发情况，描述错误的是？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. onchange：用户改变域的内容</span><br><span class="line">B. onkeypress：某个键盘的键被按下或按住</span><br><span class="line">C. onmousedown：某个鼠标按键被按下</span><br><span class="line">D. onblur：元素获得焦点</span><br></pre></td></tr></table></figure><details>    <div>    <p>D</p>    </div></details><br/> <h4 id="DOM遍历"><a href="#DOM遍历" class="headerlink" title="DOM遍历"></a>DOM遍历</h4><p>下列哪项不属于DOM查找节点的属性()？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. parentObj.<span class="property">firstChild</span></span><br><span class="line">B. parentObj.<span class="property">children</span></span><br><span class="line">C. neborNode.<span class="property">previousSibling</span></span><br><span class="line">D. neborNode.<span class="property">siblings</span></span><br></pre></td></tr></table></figure><details>    <div>    <p>D</p>    </div></details><br/> <p>DOM中，给父节点添加子节点的正确方法为()？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="title function_">appendChild</span>(parentNode,newNode);</span><br><span class="line">B. <span class="title function_">append</span>(parentNode,newNode);</span><br><span class="line">C. parentNode.<span class="title function_">append</span>(newNode);</span><br><span class="line">D. parentNode.<span class="title function_">appendChild</span>(newNode);</span><br></pre></td></tr></table></figure><details>    <div>    <p>D</p>    </div></details><br/> <p>JavaScript中document.getElementById()返回值的类型为？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="title class_">Array</span></span><br><span class="line">B. <span class="title class_">Object</span></span><br><span class="line">C. <span class="title class_">String</span></span><br><span class="line">D. <span class="title class_">Function</span></span><br></pre></td></tr></table></figure><details>    <div>    <p>B</p>    <p>getElementById --> 返回 Function</p>    <p>getElementById() --> 返回 Object</p>    </div></details><br/> <h4 id="其他-2"><a href="#其他-2" class="headerlink" title="其他"></a>其他</h4><p>DOM元素的以下属性改变会导致重排(reflows)的是</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">outline</span><br><span class="line">visiblity</span><br><span class="line">font-size</span><br><span class="line">background-color</span><br></pre></td></tr></table></figure><details>    <div>    <p>C</p>    </div></details><br/> <h3 id="BOM题"><a href="#BOM题" class="headerlink" title="BOM题"></a>BOM题</h3><p>setInterval(updateClock,60)的含义是(      )？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. 每隔<span class="number">60</span>秒调用一次<span class="title function_">updateClock</span>()</span><br><span class="line">B. 每隔<span class="number">60</span>毫秒调用一次<span class="title function_">updateClock</span>()</span><br><span class="line">C. 每隔<span class="number">60</span>分钟调用一次<span class="title function_">updateClock</span>()</span><br><span class="line">D. 每分钟调用<span class="number">60</span>次<span class="title function_">updateClock</span>()</span><br></pre></td></tr></table></figure><details>    <div>    <p>B</p>    </div></details><br/> <p>使用方法(  )可以获取到地理位置所在的经纬度？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="title class_">Geolocation</span>.<span class="title function_">watchPosition</span>()</span><br><span class="line">B. <span class="title class_">Geolocation</span>.<span class="title function_">getCurrentPosition</span>()</span><br><span class="line">C. <span class="title class_">Geolocation</span>.<span class="title function_">getPosition</span>()</span><br><span class="line">D. <span class="title class_">Geolocation</span>.<span class="title class_">Position</span>()</span><br></pre></td></tr></table></figure><details>    <div>    <p>B</p>    </div></details><br/> <p>setInterval(“alert(‘welcome’);”,1000);这段代码的意思是</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. 等待<span class="number">1000</span>秒后，再弹出一个对话框</span><br><span class="line">B. 等待<span class="number">1</span>秒钟后弹出一个对话框</span><br><span class="line">C. 每隔一秒钟弹出一个对话框</span><br><span class="line">D. 语句报错,语法有问题</span><br></pre></td></tr></table></figure><details>    <div>    <p>C</p>    </div></details><br/> <h3 id="ES6题"><a href="#ES6题" class="headerlink" title="ES6题"></a>ES6题</h3><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>下列对js箭头函数描述错误的是()</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. 箭头函数没有原型属性</span><br><span class="line">B. 箭头函数不绑定<span class="variable language_">this</span>，会捕获其所在的上下文的<span class="variable language_">this</span>值，作为自己的<span class="variable language_">this</span>值</span><br><span class="line">C. 箭头函数可以作为构造函数，使用<span class="keyword">new</span></span><br><span class="line">D. 箭头函数不绑定<span class="variable language_">arguments</span>，取而代之用rest参数解决</span><br></pre></td></tr></table></figure><details>    <div>    <p>C</p>    </div></details><br/> <p>关于箭头函数下列说法错误的一项是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. 函数体内<span class="variable language_">this</span>的指向是定义时所在的对象，而不是使用时所在的对象</span><br><span class="line">B. 箭头函数内不能使用<span class="variable language_">arguments</span>对象</span><br><span class="line">C. 箭头函数不能使用<span class="keyword">yield</span>命令</span><br><span class="line">D. 可以使用<span class="keyword">new</span>创建一个箭头函数的实例</span><br></pre></td></tr></table></figure><details>    <div>    <p>D</p>    </div></details><br/> <h4 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h4><p>关于将 Promise.all 和 Promise.race 传入空数组的两段代码的输出结果说法正确的是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;all&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;race&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">A. all 和 race 都会被输出</span><br><span class="line">B. all 和 race 都不会被输出</span><br><span class="line">C. all 会被输出，而 race 不会被输出</span><br><span class="line">D. all 不会被输出，race 会被输出</span><br></pre></td></tr></table></figure><details>    <div>    <p>C</p>    <p>all 如果传入的迭代是空的，则返回一个已完成（already resolved）状态的 Promise。</p>   <p>race 如果传的迭代是空的，则返回的 promise 将永远等待。</p>    </div></details><br/> <p>以下方案中，不是用于解决回调陷阱的的是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="title class_">Promise</span></span><br><span class="line">B. <span class="title class_">Generator</span></span><br><span class="line">C. <span class="keyword">async</span></span><br><span class="line">D. <span class="title class_">Proxy</span></span><br></pre></td></tr></table></figure><details>    <div>    <p>D</p>    </div></details><br/> <p>在 ECMAScript6 中，不属于promise的状态是:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="title class_">Pending</span></span><br><span class="line">B. <span class="title class_">Pause</span></span><br><span class="line">C. <span class="title class_">Fulfilled</span></span><br><span class="line">D. <span class="title class_">Rejected</span></span><br></pre></td></tr></table></figure><details>    <div>    <p>B</p>    </div></details><br/> <h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><p>关于ES6解构表达式,描述正确的是()</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d, e] = <span class="string">&quot;hello&quot;</span>; </span><br><span class="line">  </span><br><span class="line">A. e = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">B. 其它都为<span class="literal">undefined</span></span><br><span class="line">C. 当中 a = <span class="string">&quot;h&quot;</span>, b = <span class="string">&quot;e&quot;</span>;</span><br><span class="line">D. 语法报错</span><br><span class="line">  </span><br></pre></td></tr></table></figure><details>    <div>    <p>C</p>    </div></details><br/> <h2 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a>多选题</h2><h3 id="JS基础-1"><a href="#JS基础-1" class="headerlink" title="JS基础"></a>JS基础</h3><p>下面哪些数组方法会改变原数组</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. push </span><br><span class="line">B. concat </span><br><span class="line">C. splice </span><br><span class="line">D. map</span><br></pre></td></tr></table></figure><details>    <div>    <p>AC</p>    </div></details><br/> <p>下面可以声明数字的js代码是</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="keyword">const</span> a = <span class="number">0xa1</span></span><br><span class="line">B. <span class="keyword">const</span> a = <span class="number">076</span></span><br><span class="line">C. <span class="keyword">const</span> a = 0b21</span><br><span class="line">D. <span class="keyword">const</span> a = <span class="number">7e2</span></span><br></pre></td></tr></table></figure><details>    <div>    <p>ABD</p>    </div></details><br/> <p>以下属于操作符 typeof 的返回值的是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>) <span class="keyword">function</span></span><br><span class="line">(<span class="params"><span class="number">2</span></span>) object</span><br><span class="line">(<span class="number">3</span>) <span class="literal">null</span></span><br><span class="line">(<span class="number">4</span>) array</span><br><span class="line">(<span class="number">5</span>) <span class="title class_">NaN</span></span><br><span class="line">(<span class="number">6</span>) bigint</span><br><span class="line">(<span class="number">7</span>) regexp</span><br><span class="line">(<span class="number">8</span>) <span class="literal">undefined</span></span><br><span class="line">A. (<span class="number">1</span>)、(<span class="number">2</span>)、(<span class="number">3</span>)、(<span class="number">4</span>)、(<span class="number">5</span>)、(<span class="number">6</span>)、(<span class="number">7</span>)、(<span class="number">8</span>)</span><br><span class="line">B. (<span class="number">1</span>)、(<span class="number">2</span>)、(<span class="number">3</span>)、(<span class="number">8</span>)</span><br><span class="line">C. (<span class="number">1</span>)、(<span class="number">2</span>)、(<span class="number">8</span>)</span><br><span class="line">D. (<span class="number">1</span>)、(<span class="number">2</span>)、(<span class="number">6</span>)、(<span class="number">8</span>)</span><br></pre></td></tr></table></figure><details>    <div>    <p>D</p>    </div></details><br/> <p>以下()结果等于字符串string</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="keyword">typeof</span> <span class="string">&#x27;string&#x27;</span></span><br><span class="line">B. <span class="title class_">String</span>(<span class="string">&#x27;string&#x27;</span>).<span class="title function_">toString</span>()</span><br><span class="line">C. <span class="string">&#x27;string&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">sort</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">D. (<span class="keyword">function</span>(<span class="params">string</span>)&#123;<span class="keyword">return</span> string&#125;)(<span class="string">&#x27;string&#x27;</span>)</span><br><span class="line">E. <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;string&quot;:&quot;string&quot;&#125;&#x27;</span>).<span class="property">string</span></span><br></pre></td></tr></table></figure><details>    <div>    <p>ABDE</p>    </div></details><br/> <p>下面的等式成立的是?</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="built_in">parseInt</span>(<span class="number">46.8</span>) == <span class="built_in">parseFloat</span>(<span class="number">46.8</span>)</span><br><span class="line">B. <span class="title class_">NaN</span> !== <span class="title class_">NaN</span></span><br><span class="line">C. <span class="built_in">isNaN</span>(<span class="string">&#x27;abc&#x27;</span>) == <span class="title class_">NaN</span></span><br><span class="line">D. <span class="keyword">typeof</span> <span class="title class_">NaN</span> === <span class="string">&#x27;number&#x27;</span></span><br></pre></td></tr></table></figure><details>    <div>    <p>BD</p>    </div></details><br/> <p>以下哪些选项可以将集合A转化为数组？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="title class_">Array</span>.<span class="title function_">from</span>(A)</span><br><span class="line">B. [].<span class="property">slice</span>.<span class="title function_">apply</span>(A)</span><br><span class="line">C. [...A]</span><br><span class="line">D. [].<span class="property">map</span>.<span class="title function_">call</span>(A, <span class="function"><span class="params">o</span> =&gt;</span> o)</span><br></pre></td></tr></table></figure><details>    <div>    <p>ABCD</p>    </div></details><br/> <p>下列结果返回 true 的是</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="literal">null</span> == <span class="literal">undefined</span></span><br><span class="line">B. <span class="literal">null</span> === <span class="literal">undefined</span></span><br><span class="line">C. <span class="literal">null</span> === <span class="literal">null</span></span><br><span class="line">D. <span class="title class_">NaN</span> == <span class="literal">null</span></span><br><span class="line">E. <span class="title class_">NaN</span> === <span class="title class_">NaN</span></span><br><span class="line">F. <span class="title class_">Infinity</span> + <span class="number">1</span> !== <span class="title class_">Infinity</span></span><br></pre></td></tr></table></figure><details>    <div>    <p>AC</p>    </div></details><br/> <h3 id="JS深入-1"><a href="#JS深入-1" class="headerlink" title="JS深入"></a>JS深入</h3><p>关于以下代码，说法正确的有哪些？ </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. 每一个原型都有一个constructor属性指向关联的构造函数。</span><br><span class="line">B. 每一个对象都有一个prototype属性。</span><br><span class="line">C. <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person) === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">D. person.<span class="property">constructor</span> === <span class="title class_">Person</span></span><br></pre></td></tr></table></figure><details>    <div>    <p>ACD</p>    </div></details><br/> <p>下列在 JS 时间循环机制中属于微任务(microTask)的是？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. process.<span class="property">nextTick</span></span><br><span class="line">B. promise</span><br><span class="line">C. <span class="built_in">setTimeout</span></span><br><span class="line">D. <span class="built_in">setInterval</span></span><br></pre></td></tr></table></figure><details>    <div>    <p>AB</p>    </div></details><br/> <h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><p>以下关于let和const的说法中正确的是:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="keyword">let</span>声明的变量值和类型都可以改变</span><br><span class="line">B. <span class="keyword">const</span>声明的常量不可以改变</span><br><span class="line">C. 两者都不存在变量提升，同时存在暂时性死区，只能在声明的位置后面使用</span><br><span class="line">D. <span class="keyword">const</span>可以先声明再初始化，可以后赋值</span><br></pre></td></tr></table></figure><details>    <div>    <p>ABC</p>    </div></details><br/> <p>下面关于Promise说法正确的是(注意“返回结果”的意思包含成功或者失败)</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="title class_">Promise</span>.<span class="property">all</span>在所有给定的promise都fulfilled后才返回结果</span><br><span class="line">B. <span class="title class_">Promise</span>.<span class="property">race</span>在给定的promise中，某个fulfilled后才返回结果</span><br><span class="line">C. promise.<span class="property">then</span>的回调函数中，可以返回一个新的promise</span><br><span class="line">D. 对于一个向后台获取数据已经产生结果的<span class="attr">promise</span>:p1，再次调用p1.<span class="property">then</span>，不会去重新发起请求获取数据</span><br></pre></td></tr></table></figure><details>    <div>    <p>CD</p>    <p>Promise.all 中的promise全部fulfilled则成功，则返回的value为一个数组；若有一个rejected则失败，整体抛出的异常为第一个失败的promise抛出的异常。</p>    <p>Promise.race 中的promise只要有一个且是第一个成功或失败则整体的结果就是这个promise的结果</p>    </div></details><br/> <h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>下列关于使用 JS 修改元素样式的代码，正确的有哪些？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.[<span class="string">&#x27;background-color&#x27;</span>] = <span class="string">&#x27;#fff&#x27;</span></span><br><span class="line">B. <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;background-color&#x27;</span>, <span class="string">&#x27;#fff&#x27;</span>)</span><br><span class="line">C. <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span> = <span class="string">&#x27;background-color: #fff&#x27;</span></span><br><span class="line">D. <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">&#x27;14px&#x27;</span></span><br></pre></td></tr></table></figure><details>    <div>    <p>BCD</p>    <p>`style.setProperty(propertyName, value, priority);`为一个声明了 CSS 样式的对象设置一个新的值</p>    </div></details><br/> <p>下列方法可用于阻止事件冒泡的有</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A. event.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">B. event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">C. event.<span class="title function_">preventDefault</span>();</span><br><span class="line">D. <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><details>    <div>    <p>ABD</p>    </div></details><br/> <h2 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h2><h3 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h3><p>1.在JavaScript中，有<code>var arr = []; typeof arr</code>的结果为?</p><details>    <div>        <p>'object'</p>    </div></details><br/> <p>2.以下使用 typeof 操作符的代码的输出结果为</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="keyword">typeof</span> x</span><br><span class="line"><span class="keyword">var</span> res = <span class="keyword">typeof</span> <span class="keyword">typeof</span> x;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x, res)</span><br></pre></td></tr></table></figure><details>    <div>        <p>'undefined'、'string</p>    </div></details><br/> <p>3.<code>[typeof null, null instanceof Object]</code>的结果是什么?</p><details>    <div>        <p>'object'、false</p>    </div></details><br/> <p>4.<code>typeof typeof 0</code></p><details>    <div>        <p>'string'</p>    </div></details><br/> <p>5.JavaScript的typeof运算符的可能结果为array？解释为什么</p><details>    <div>        <p>不可能，因为 typeof 只能检测基本数据类型，array 是引用数据类型。</p>    </div></details><br/> <p>6.下面代码的输出结果是多少？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> arr, <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arr));</span><br></pre></td></tr></table></figure><details>    <div>        <p>'object'、'[object Array]'</p>    </div></details><br/> <p>7.下面的结果是？</p><p><code>console.log(Object.prototype.toString.call(undefined))</code></p><details>    <div>        <p>'[object Undefined]'</p>    </div></details><br/> <h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>1.表达式 <code>&quot;2&quot;+3+4</code> 的值为？</p><details>    <div>        <p>'234'</p>    </div></details><br/> <p>2.<code>console.log(&#39;5&#39; + 3, 5 + &#39;3&#39;)</code></p><details>    <div>        <p>'53'、'53'</p>    </div></details><br/> <p>3.<code>var a = parseInt(&quot;111办公室&quot;);alert(a);</code></p><details>    <div>        <p>111</p>    </div></details><br/> <p>4.<code>[&quot;0x1&quot;, &quot;0x2&quot;, &quot;0x3&quot;].map(parseInt)</code> 的结果</p><details>    <div>        <p>1、NaN、0</p>    </div></details><br/> <p>5.在js中执行 <code>1+&#39;1&#39;</code>的结果是？</p><details>    <div>        <p>11</p>    </div></details><br/> <p>6.在js中执行 <code>parseInt(&#39;77&#39;,40)</code>的结果是?</p><details>    <div>        <p>NaN</p>        <p>parseInt() 的第二位参数是2-36之间</p>    </div></details><br/> <h3 id="逻辑判断-1"><a href="#逻辑判断-1" class="headerlink" title="逻辑判断"></a>逻辑判断</h3><p>1.请给出 <code>[5&lt;6&lt;3,3&lt;2&lt;4]</code> 代码的运行结果</p><details>    <div>        <p>[true, true]</p>        <ul>            <li>我觉得这就是比较大小，从左到右依次执行。</li>            <li>首先比较5<6<3中的5<6，因为5确实比6小返回true，然后true又与3比较，true转化为数字为1,1<3返回true</li>            <li>数组第二项同理</li>        </ul>    </div></details><br/> <p>2.<code>(2&lt;3) || (3&lt;2)</code> 表达式将返回值为</p><details>    <div>        <p>true</p>        <p>先把2<3的结果算出来，为true，又是或运算，则直接返回</p>    </div></details><p>3.<code>console.log(true || false &amp;&amp; false, true &amp;&amp; false || true)</code>的输出结果是？</p><details>    <div>        <p>true,true</p>        <p>与运算的优先级高于或运算</p>    </div></details><h3 id="其他-3"><a href="#其他-3" class="headerlink" title="其他"></a>其他</h3><p>1.<code>1+ - + + + - + 1</code> 的结果是?</p><details>    <div>        <p>2</p>        <p>1 + - + + + - + 1 可以看作 1 + (- + + + - +)1，只需要判断括号内的符号即可，两个负号，最终为正。</p>    </div></details><p>2.<code>[ &#39;a&#39;, ,&#39;b&#39;, ,].length</code> 的结果是</p><details>    <div>        <p>4</p>    </div></details><h2 id="程序题"><a href="#程序题" class="headerlink" title="程序题"></a>程序题</h2><h3 id="JS基础-2"><a href="#JS基础-2" class="headerlink" title="JS基础"></a>JS基础</h3><p>下面两个程序的输出结果分别是？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// case 1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showCase</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span>(value) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Case A&#x27;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Case B&#x27;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">undefined</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Case undefined&#x27;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Case default&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showCase</span>(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;A&#x27;</span>));</span><br><span class="line">  </span><br><span class="line"><span class="comment">// case 2</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showCase</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span>(value) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Case A&#x27;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Case B&#x27;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">undefined</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Case undefined&#x27;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Case default&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">showCase</span>(<span class="title class_">String</span>(<span class="string">&#x27;A&#x27;</span>));</span><br></pre></td></tr></table></figure><details>    <div>        <p>case1: 'Case default'</p>        <p>case2: 'Case A'</p>        <ul>            <li>case1 中是构造函数创建对象，其中的'A'作为参数传入新创建的对象。</li>            <li>case2 中是将'A'转化为字符串类型。</li>        </ul>    </div></details><p>p标签的的内容会显示什么？</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> x = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> y = <span class="string">&quot;10&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = <span class="title class_">Boolean</span>(x == y);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><details>    <div>        <p>true</p>    </div></details><p>document.write的结果会是什么？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">funcA</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">funcB</span>(<span class="params">y</span>)&#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">write</span>( ++x + y + (temp--));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">funcB</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">funcA</span>(<span class="number">6</span>)</span><br></pre></td></tr></table></figure><details>    <div>        <p>16</p>    </div></details><p>alert的结果会是多少</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> varArr = <span class="keyword">function</span>(<span class="params">i,j,str</span>) &#123;  </span><br><span class="line">    <span class="keyword">return</span> j == <span class="number">0</span> ? str : <span class="title function_">varArr</span>(i,--j,(str+= <span class="string">&quot; &quot;</span> + i[j]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;peach&#x27;</span>,<span class="string">&#x27;lime&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="title function_">varArr</span>(arr,arr.<span class="property">length</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="title function_">alert</span>(str);</span><br></pre></td></tr></table></figure><details>    <div>        <p>" lime peach orange apple"</p>    </div></details><p>下面程序的输出结果是多少？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greetingMaker</span>(<span class="params">greeting</span>) &#123; </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addName</span>(<span class="params">name</span>) &#123;    </span><br><span class="line">        greeting  = greeting.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> greeting + <span class="string">&quot; &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> addName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> daytimeGreeting = <span class="title function_">greetingMaker</span>(<span class="string">&quot;Good Day to you&quot;</span>);</span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">daytimeGreeting</span>(name)); </span><br></pre></td></tr></table></figure><details>    <div>        <p>"you-to-Day-Good "，后面有个空格是因为加了个" "空格</p>        <p>这里的name就是window只带的那个，值为空，可以自己打印window对象看看</p>    </div></details><p>下面程序的输出结果是多少？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">GetNum</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">    <span class="keyword">var</span> regEx = <span class="regexp">/[^\d]/g</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">replace</span>(regEx, <span class="string">&#x27;&#x27;</span>); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;a1b2c3&quot;</span>;</span><br><span class="line">str = str.<span class="title class_">GetNum</span>();</span><br><span class="line"><span class="title function_">alert</span>(str);</span><br></pre></td></tr></table></figure><details>    <div>        <p>'123'</p>    </div></details><p>下面程序的输出结果是多少？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="string">&quot;2&quot;</span>);</span><br></pre></td></tr></table></figure><details>    <div>        <p>"12"</p>    </div></details><p>下面程序的输出结果是多少？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;我非常喜欢编程&quot;</span>;</span><br><span class="line">str.<span class="property">length</span> = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br></pre></td></tr></table></figure><details>    <div>        <p>"我非常喜欢编程"</p>        <p>我觉得是这种操作对字符串没用，但是对数组这样操作可以实现</p>    </div></details><p>下面程序的输出结果是多少？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number++);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++number);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number);</span><br></pre></td></tr></table></figure><details>    <div>        <p>0、2、2</p>    </div></details><p>下面程序的输出结果是多少？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">nums</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a is bigger&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b is bigger&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">nums</span>(<span class="number">4</span>, <span class="number">2</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">nums</span>(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><details>    <div>        <p>'a is bigger'、6</p>        <p>'b is bigger'、3</p>    </div></details><p>下面程序输出结果是多少？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">side</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">    arr[<span class="number">0</span>] = arr[<span class="number">2</span>]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func1</span>(<span class="params">a, b, c = <span class="number">3</span></span>) &#123;</span><br><span class="line">    c = <span class="number">10</span>; </span><br><span class="line">    <span class="title function_">side</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + c); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func2</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    c = <span class="number">10</span>;</span><br><span class="line">    <span class="title function_">side</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func1</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="title function_">func2</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><details>    <div>        <p>12、21</p>        <ul>            <li>通常情况下都是非严格模式，arguments数组中的元素会随着函数内的赋值而变化，然后也会改变abc的值。</li>            <li>而给函数形参赋了初始值之后，就会强制在函数内启用严格模式，所以arguments中的c就不随c的赋值而改变了。</li>            <li>综上：func1中，调用side会让a被赋值1，而func2中会赋值10.</li>        </ul>    </div></details><p>下面代码的输出结果是什么？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b === c);</span><br></pre></td></tr></table></figure><details>    <div>        <p>true、false、false</p>    </div></details><p>执行下列语句后，a.length的值为？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line">a.<span class="title function_">push</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">a.<span class="title function_">shift</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">a.<span class="title function_">concat</span>([<span class="number">5</span>, <span class="number">6</span>]);</span><br><span class="line">a.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><details>    <div>        <p>a.length的值为：2、1、1、1</p>        <ul>            <li>我觉得a.shift()传不传参数都会删除第一个元素</li>            <li>a.concat()不会修改原数组，长度还是1</li>            <li>a.splice()，删除了第一个元素，有添加了一个元素，长度还是1</li>        </ul>    </div></details><p>下面这几段代码分别输出结果是多少？为什么？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;, b = <span class="string">&#x27;123&#x27;</span>, c = <span class="number">123</span>;</span><br><span class="line">a[b] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">a[c] = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[b]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// example 2</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;, b = <span class="title class_">Symbol</span>(<span class="string">&#x27;123&#x27;</span>), c = <span class="title class_">Symbol</span>(<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line">a[b] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">a[c] = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[b]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// example 3</span></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;, b = &#123;<span class="attr">key</span>:<span class="string">&#x27;123&#x27;</span>&#125;, c = &#123;<span class="attr">key</span>:<span class="string">&#x27;456&#x27;</span>&#125;;</span><br><span class="line">a[b] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">a[c] = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[b]);</span><br></pre></td></tr></table></figure><details>    <div>        <p>'c'、'b'、'c'</p>    </div></details><p>下面每项的返回值是什么？为什么？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span></span><br><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">NaN</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Function</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Object</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;</span><br><span class="line"><span class="string">&#x27;a&#x27;</span> + <span class="number">1</span></span><br><span class="line"><span class="string">&#x27;a&#x27;</span> - <span class="number">1</span></span><br><span class="line"><span class="title class_">Function</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span></span><br><span class="line"><span class="title class_">Object</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span></span><br></pre></td></tr></table></figure><details>    <div>        <ul>            <li>true、false、'number'、'function'、'function'、'object'、'a1'、NaN、true、false</li>        </ul>    </div></details><p>下面程序的输出结果是多少？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    array.<span class="title function_">push</span>(<span class="function">() =&gt;</span> i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newArray = array.<span class="title function_">map</span>(<span class="function"><span class="params">el</span> =&gt;</span> <span class="title function_">el</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray)</span><br></pre></td></tr></table></figure><details>    <div>        <p>[3, 3, 3]</p>    </div></details><p>下面程序的输出结果是多少？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">m, n</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="keyword">function</span> (<span class="params">l</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> l &lt;= m ? l * <span class="title function_">b</span>(l + <span class="number">1</span>) : <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">b</span>(m - n + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">a</span>(<span class="number">4</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><details>    <div>        <p>12</p>        <ol>            <li>3<4--3*?</li>            <li>4=4--4*?</li>            <li>5>4--1</li>            <li>4*1=4</li>            <li>4*3=12</li>        </ol>    </div></details><p>下面程序的输出结果是多少？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span> == <span class="keyword">typeof</span> <span class="variable constant_">NULL</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125; == <span class="keyword">typeof</span> <span class="keyword">class</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><details>    <div>        <p>true、true</p>        <p>NULL 不是任何数据类型，所以是undefined</p>    </div></details><p>执行后a和b.age的值分别为</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">11</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x,y</span>) &#123;</span><br><span class="line">    --y.<span class="property">age</span>;</span><br><span class="line">    <span class="keyword">return</span> --x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(a,b)</span><br></pre></td></tr></table></figure><details>    <div>        <p>9</p>    </div></details><p>下面程序的执行结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> numberFactorial = (<span class="keyword">function</span> (<span class="params">number</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (number === <span class="number">0</span>)? <span class="number">1</span>: number* <span class="title function_">factorial</span>(number-<span class="number">1</span>)</span><br><span class="line">&#125;)(number)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numberFactorial)</span><br></pre></td></tr></table></figure><!-- <details>    <div>        <ul>            <li>4*?</li>            <li>3*?</li>            <li>2*?</li>            <li>1*?</li>            <li>1*1=2</li>            <li>2*2=4</li>            <li>3*4=12</li>            <li>4*12=48</li>        </ul>    </div></details> --><p>下面程序的输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addToList</span>(<span class="params">item, list</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> list.<span class="title function_">push</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">addToList</span>(<span class="string">&quot;nowcoder&quot;</span>, [<span class="string">&quot;hello&quot;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><details>    <div>        <p>2</p>        <p>push() 返回数组的新长度</p>    </div></details><p>下面程序的输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">first</span> = (<span class="params"></span>) =&gt; &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;first&#x27;</span>); <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">second</span> = (<span class="params"></span>) =&gt; &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;second&#x27;</span>); <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">first</span>() &amp;&amp; <span class="title function_">second</span>() );</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">first</span>()||  <span class="title function_">second</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="title function_">second</span>() || <span class="title function_">first</span>() );</span><br></pre></td></tr></table></figure><details>    <div>        <p>'first'、false</p>        <p>'second'、true</p>        <p>'first'、'second'、true</p>    </div></details><p>下面代码的输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="string">&#x27;12ab3cd&#x27;</span>, arr=s.<span class="title function_">split</span>(<span class="regexp">/\d/</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">3</span>],arr[<span class="number">4</span>])</span><br><span class="line">  </span><br></pre></td></tr></table></figure><details>    <div>        <p>'cd' undefined</p>    </div></details><p>下面程序的输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getAge</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getAge</span>(<span class="number">21</span>);</span><br><span class="line">  </span><br></pre></td></tr></table></figure><details>    <div>        <p>'object'</p>    </div></details><p>下面程序的输出结果是:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(arr.<span class="title function_">shift</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>],arr[<span class="number">2</span>])</span><br><span class="line">  </span><br></pre></td></tr></table></figure><details>    <div>        <p>3,1</p>    </div></details><h3 id="JS深入-2"><a href="#JS深入-2" class="headerlink" title="JS深入"></a>JS深入</h3><h4 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h4><p>题目解析：<a href="https://juejin.cn/post/7023944134561890318">this指向题目解析及扩展</a></p><p>下列程序的输出结果是多少？为什么？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">fun</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun = obj.<span class="property">fun</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( obj.<span class="title function_">fun</span>(), <span class="title function_">fun</span>() );</span><br></pre></td></tr></table></figure><details>    <div>        <p>3、1</p>        <p>this的指向是最后那个调用的时候才会确定，第一个是object调用的，第二个是window调用的</p>    </div></details><p>下列程序的输出结果是多少？你能理清楚test函数的this指向吗？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123; </span><br><span class="line">    a = <span class="number">0</span>; </span><br><span class="line">    <span class="title function_">alert</span>(a); </span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">a</span>); </span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="title function_">alert</span>(a); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">test</span>();</span><br></pre></td></tr></table></figure><details>    <div>        <p>0、undefined、0</p>        <p>我觉得这是自己调用自己，所以this指向的是test自身</p>    </div></details><p>下列程序的输出结果是多少？为什么？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fun.<span class="title function_">call</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;foo&#x27;</span>&#125;)</span><br><span class="line"><span class="keyword">var</span> t1 = f.<span class="title function_">call</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;bar&#x27;</span>&#125;)()()</span><br><span class="line"><span class="keyword">var</span> t2 = <span class="title function_">f</span>().<span class="title function_">call</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;baz&#x27;</span>&#125;)()</span><br><span class="line"><span class="keyword">var</span> t3 = <span class="title function_">f</span>()().<span class="title function_">call</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;qux&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><details>    <div>        <p>三个都是'foo'</p>        <ul>            <h5>箭头函数,无法改变this指向</h5>            <li>箭头函数的this指向,是父级的this指向</li>            <li>如果父级有this指向,则指向父级的this指向</li>            <li>如果父级没有this指向,指向的是window</li>        </ul>    </div></details><p>执行以下代码，输出结果分别是多少？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">foo</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// log1</span></span><br><span class="line">obj1.<span class="title function_">foo</span>()</span><br><span class="line"><span class="keyword">const</span> obj2 = obj1.<span class="property">foo</span></span><br><span class="line"><span class="comment">// log2</span></span><br><span class="line"><span class="title function_">obj2</span>()</span><br></pre></td></tr></table></figure><details>    <div>        <p>undefined、undefined</p>        <p>箭头函数的父级是obj1，obj1的this指向是window</p>    </div></details><p>下面程序的输出结果是什么？为什么？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Person</span> = (<span class="params">name=<span class="string">&quot;wang&quot;</span>,age=<span class="number">10</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> +<span class="string">&#x27; is &#x27;</span>+ <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&#x27;years old&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zhang&#x27;</span>,<span class="number">11</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><details>    <div>        <p>会报错，Uncaught TypeError: Person is not a constructor</p>        <p>因为箭头函数自身没有this，是父级身上的。而这里是构造函数，必须要自身上的this，所以不行。</p>    </div></details><p>如果是这样的呢？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = <span class="keyword">function</span>(<span class="params">name=<span class="string">&quot;wang&quot;</span>,age=<span class="number">10</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> +<span class="string">&#x27; is &#x27;</span>+ <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&#x27;years old&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;zhang&#x27;</span>,<span class="number">11</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><details>    <div>        <p>输出一个对象，Person {name: 'zhang', age: 11}</p>    </div></details><p>请表述以下代码的执行结果和原因</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">getAge</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getAge = person.<span class="property">getAge</span></span><br><span class="line"><span class="title function_">getAge</span>()  </span><br></pre></td></tr></table></figure><details>    <div>        <p>undefined</p>        <p>this的决定权在最后调用的那个身上</p>    </div></details><p>请按顺序写出打印结果，并说明原因。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;global&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;local&#x27;</span>,</span><br><span class="line">    <span class="attr">foo</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">    &#125;.<span class="title function_">bind</span>(<span class="variable language_">window</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> obj.<span class="title function_">foo</span>();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">name</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property">name</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> bar3 = bar2 = bar;</span><br><span class="line">bar2.<span class="property">name</span> = <span class="string">&#x27;foo2&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar3.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><details>    <div>        <p>'foo'、'foo2'、'global'</p>        <p>这里涉及了同步任务与异步任务执行顺序：同步任务执行优先于异步任务，定时器是异步任务，最后执行</p>    </div></details><p>下面程序的执行结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    <span class="attr">sayName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wfunc = obj.<span class="property">sayName</span>;</span><br><span class="line">obj.<span class="title function_">sayName</span>();</span><br><span class="line"><span class="title function_">wfunc</span>();</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;lisi&quot;</span>;</span><br><span class="line">obj.<span class="title function_">sayName</span>();</span><br><span class="line"><span class="title function_">wfunc</span>();</span><br></pre></td></tr></table></figure><details>    <div>        <p>"zhangsan"、undefined、"zhangsan"、"lisi"</p>    </div></details><p>下面程序的输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name=<span class="string">&#x27;test&#x27;</span> </span><br><span class="line"><span class="keyword">var</span> a = &#123;    </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;ass&#x27;</span>,    </span><br><span class="line">    <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;    </span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;   </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> b = a.<span class="property">getName</span>; </span><br><span class="line"><span class="title function_">b</span>();</span><br></pre></td></tr></table></figure><details>    <div>        <p>'test'</p>    </div></details><h4 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h4><p>下列程序的输出结果分别是多少？为什么？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promiseA = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">promiseA.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promiseB = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">promiseB.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br><span class="line">promiseB.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><details>    <div>        <p>'a'、undefined、'b'、'b'</p>        <p>第二个为undefined是因为第二个then输出的是一个变量，但头一个then中没有用resolve传输需要的变量，所以是undefined</p>    </div></details><p>下面程序的输出结果依次是多少？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> P = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">P.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><details>    <div>        <p>2、5、1、3、4</p>    </div></details><p>下面程序的输出结果是</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><details>    <div>        <p>2、3、5、4、1</p>    </div></details><p>下面程序的输出结果是？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><details>    <div>        <p>1、3、2</p>        <ul>            <li>在promise中没有resolve调用后续的then，所以4不会输出</li>            <li>且又进行了await等待，所以不会输出5</li>        </ul>    </div></details><p>下面程序的输出结果是:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;5&#x27;</span>)</span><br></pre></td></tr></table></figure><details>    <div>        <p>1、2、5、3、4</p>    </div></details><p>下面程序的输出结果是:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">&#125;,<span class="number">10</span>)</span><br><span class="line">p1.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><details>    <div>        <p>2、3、1</p>    </div></details><p>下面程序的输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><details>    <div>        <p>'promise1'、'promise2'、'setTimeout'</p>    </div></details><p>请表述以下代码的执行结果和原因</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> <span class="title function_">executor</span>(<span class="params">resolve</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">        i - <span class="number">9999</span> &amp;&amp; <span class="title function_">resolve</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><details>    <div>        <p>2、3、5、4、1</p>    </div></details><p>当点击class为inner的div块时，控制台依次输出结果是什么?</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在网页中有两个div块，html代码如下</span></span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应的js代码如下：</span></span><br><span class="line"><span class="keyword">var</span> outer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.outer&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> inner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.inner&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timeout&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    outer.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-random&#x27;</span>, <span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inner.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, onClick);</span><br><span class="line">outer.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, onClick);</span><br></pre></td></tr></table></figure><details>    <div>        <p>'click'、'promise'、'click'、'promise'、'timeout'、'timeout'</p>        <p>点击 inner，onClick 函数执行，打印 "click"。这是执行栈空了，而由于事件冒泡，事件触发线程会将向上派发事件的任务放入宏任务队列。等后面微任务执行完毕后调用宏任务时再依次执行。</p>    </div></details><p>下面程序的输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(</span><br><span class="line">   <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"> ).<span class="title function_">then</span>(</span><br><span class="line">   <span class="function">() =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;c&#x27;</span>).<span class="title function_">then</span>(</span><br><span class="line">     <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;d&#x27;</span>));</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">       <span class="keyword">return</span> data;</span><br><span class="line">     &#125;</span><br><span class="line">   )</span><br><span class="line"> ).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));</span><br></pre></td></tr></table></figure><details>    <div>        <p>'b'、'f'、'c'、'a'、'd'</p>    </div></details><p>下面程序的输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;one&#x27;</span>); </span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;two&#x27;</span>); &#125;, <span class="number">0</span>); </span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;three&#x27;</span>); &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;four&#x27;</span>);</span><br></pre></td></tr></table></figure><details>    <div>        <p>'one'、'four'、'three'、'two'</p>    </div></details><p>下面程序的执行结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;E&#x27;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;F&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;H&#x27;</span>)</span><br></pre></td></tr></table></figure><details>    <div>        <p>'D'、'E'、'F'、'H'、'G'、'C'</p>    </div></details><p>有一个输出函数定义如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">msg, time</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则下面三段代码输出的结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一段代码：</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">log</span>(i, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二段代码：</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ].<span class="title function_">forEach</span>(<span class="keyword">async</span> (i) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">log</span>(i, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三段代码：</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">of</span> [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">log</span>(i, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">A.三段代码结果相同，都是每隔一秒输出<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，耗时<span class="number">4</span>秒</span><br><span class="line">B.三段代码结果相同，都是一秒之后立即输出 <span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，耗时<span class="number">1</span>秒</span><br><span class="line">C.第一段代码：每隔一秒输出<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，耗时<span class="number">4</span>秒</span><br><span class="line">  第二段代码：一秒之后立即输出 <span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，耗时<span class="number">1</span>秒</span><br><span class="line">  第三段代码：每隔一秒输出<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，耗时<span class="number">4</span>秒</span><br><span class="line">D.第一段代码：每隔一秒输出<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，耗时<span class="number">4</span>秒</span><br><span class="line">  第二段代码：每隔一秒输出<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，耗时<span class="number">4</span>秒</span><br><span class="line">  第三段代码：一秒之后立即输出 <span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，耗时<span class="number">1</span>秒</span><br></pre></td></tr></table></figure><details>    <div>        <p>C</p>        <p>forEach意味着每次迭代都有一个单独的生成器函数，与其他生成器函数无关。因此它们将独立执行。</p>    </div></details><h4 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h4><p>传送门: <a href="https://juejin.cn/post/7025939091560611848">原型与原型链题目解析</a></p><p>下面程序的输出结果依次是？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fn1</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(name)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Fn1</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span>=<span class="string">&quot;jack&quot;</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Fn1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a:&#x27;</span>, a.<span class="property">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fn2</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Fn2</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span>=<span class="string">&quot;jack&quot;</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Fn2</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b:&#x27;</span>, b.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><details>    <div>        <p>'a:' "jack"、'b:' undefined</p>    </div></details><p>下面程序的输出结果是？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Foo</span> = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">increment</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        ++x;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Foo</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">a.<span class="title function_">increment</span>();</span><br><span class="line">a.<span class="title function_">increment</span>();</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">a.<span class="title function_">increment</span>();</span><br></pre></td></tr></table></figure><details>    <div>        <p>1、2、3</p>    </div></details><p>下面程序的输出结果是？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Jay&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="title class_">Person</span>(<span class="string">&#x27;Tom&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Michael&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br></pre></td></tr></table></figure><details>    <div>        <p>'Tom'、'Tom'、undefined、'Michael'、Person {name: 'Michael'}</p>        <ul>            <li>var a = Person('Tom')相当于是调用Person()函数，'Tom'为参数。</li>            <li>为undefined的原因是函数并没有return任何数据。</li>        </ul>    </div></details><p>请根据下面的示例描述原型链与继承的关系并解释原因：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">A</span>()</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title function_">B</span>()</span><br><span class="line">a.<span class="property">proto</span> ===</span><br><span class="line">b.<span class="property">proto</span> ===</span><br><span class="line">B.<span class="property">proto</span> ===</span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">proto</span> ===</span><br><span class="line">b.<span class="property">proto</span>.<span class="property">proto</span> ===</span><br></pre></td></tr></table></figure><details>    <div>        <ul>            <li>a.proto === A.prototype</li>            <li>b.proto === B.prototype</li>            <li>B.proto === A</li>            <li>B.prototype.proto === A.prototype</li>            <li>b.proto.proto === A.prototype</li>        </ul>    </div></details><p>请表述以下代码的执行结果和原因</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;           </span><br><span class="line">    getName = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>)); </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);               </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>; </span><br><span class="line">&#125;</span><br><span class="line">test.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>), <span class="number">0</span>); </span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);               </span><br><span class="line">&#125;;</span><br><span class="line">test.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;    </span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>); </span><br><span class="line">&#125;;       </span><br><span class="line"><span class="keyword">var</span> getName = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);             </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>); </span><br><span class="line">&#125;      </span><br><span class="line">      </span><br><span class="line">test.<span class="title function_">getName</span>(); </span><br><span class="line"><span class="title function_">getName</span>(); </span><br><span class="line"><span class="title function_">test</span>().<span class="title function_">getName</span>(); </span><br><span class="line"><span class="title function_">getName</span>();  </span><br><span class="line"><span class="keyword">new</span> test.<span class="title function_">getName</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">test</span>().<span class="title function_">getName</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> <span class="title function_">test</span>().<span class="title function_">getName</span>();</span><br></pre></td></tr></table></figure><details>    <div>        <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Foo</span>.<span class="title function_">getName</span>(); <span class="comment">//2</span></span><br><span class="line"><span class="title function_">getName</span>(); <span class="comment">//4</span></span><br><span class="line"><span class="title class_">Foo</span>().<span class="title function_">getName</span>(); <span class="comment">//1</span></span><br><span class="line"><span class="title function_">getName</span>(); <span class="comment">//1</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Foo</span>.<span class="title function_">getName</span>(); <span class="comment">//2</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Foo</span>().<span class="title function_">getName</span>(); <span class="comment">//3</span></span><br><span class="line"><span class="keyword">new</span> <span class="keyword">new</span> <span class="title class_">Foo</span>().<span class="title function_">getName</span>(); <span class="comment">//3</span></span><br><span class="line"><span class="comment">// https://juejin.cn/post/6844904033312833550</span></span><br></pre></td></tr></table></figure>    </div></details><p>请表述以下代码的执行结果和原因</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> A = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span> = tmp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span> = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="title class_">Object</span>.<span class="title function_">create</span>(tmp);</span><br><span class="line">b.<span class="property">constructor</span> = A. constructor;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a <span class="keyword">instanceof</span> A);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b <span class="keyword">instanceof</span> A);</span><br></pre></td></tr></table></figure><details>    <div>        <p>false、false</p>        <p>https://www.nowcoder.com/questionTerminal/9c058f1c6b634c2b9681472a2708621f</p>    </div></details><p>下面程序的执行结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">z</span> = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(obj.<span class="property">z</span>)</span><br><span class="line">obj.<span class="property">z</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(obj.<span class="property">z</span>);</span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">z</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">info</span>(obj.<span class="property">z</span>);</span><br></pre></td></tr></table></figure><details>    <div>        <p>3、10、3</p>    </div></details><p>下面程序的执行结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Book</span> = &#123;</span><br><span class="line">  <span class="attr">price</span>: <span class="number">32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> book = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Book</span>);</span><br><span class="line">book.<span class="property">type</span> = <span class="string">&#x27;Math&#x27;</span>;</span><br><span class="line"><span class="keyword">delete</span> book.<span class="property">price</span>;</span><br><span class="line"><span class="keyword">delete</span> book.<span class="property">type</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(book.<span class="property">price</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(book.<span class="property">type</span>);</span><br></pre></td></tr></table></figure><details>    <div>        <p>32、undefined</p>    </div></details><h4 id="作用域与预编译"><a href="#作用域与预编译" class="headerlink" title="作用域与预编译"></a>作用域与预编译</h4><p>下面的程序会报错吗？如果不会，输出结果分别是多少？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure><details>    <div>        <p>"Tom"、Uncaught ReferenceError: Cannot access 'age' before initialization</p>    </div></details><p>下面的程序i的打印结果分别是多少？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details>    <div>        <p>3 3 3、0 1 2</p>    </div></details><p>下面程序的输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&#x27;b&#x27;</span>;</span><br></pre></td></tr></table></figure><details>    <div>        <p>undefined、Uncaught ReferenceError: Cannot access 'b' before initialization</p>    </div></details><p>下面程序的输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> bar = <span class="string">&quot; World&quot;</span>;</span><br><span class="line">    <span class="title function_">alert</span>(foo + bar);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="title function_">alert</span>(foo + bar);</span><br></pre></td></tr></table></figure><details>    <div>        <p>"Hello World"、Uncaught ReferenceError: bar is not defined</p>    </div></details><p>下面程序的输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    a = <span class="number">5</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>)</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><details>    <div>        <p>undefined、10、20</p>    </div></details><p>下面代码的输出结果是:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">runFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">20</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inside&#x27;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">runFunction</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;outside&#x27;</span>, a)</span><br></pre></td></tr></table></figure><details>    <div>        <p>'inside' 20、'outside' 10</p>    </div></details><p>请描述打印结果并说明原因</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Jay&#x27;</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Wang&#x27;</span>,</span><br><span class="line">    <span class="attr">pro</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Michael&#x27;</span>,</span><br><span class="line">        <span class="attr">getName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">pro</span>.<span class="property">getName</span>)</span><br><span class="line"><span class="keyword">var</span> people = person.<span class="property">pro</span>.<span class="property">getName</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">people</span>())</span><br></pre></td></tr></table></figure><details>    <div>        <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二个，报错</span></span><br></pre></td></tr></table></figure>    </div></details><p>下面程序的结果是：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> elements = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;elements.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">    elements[i].<span class="property">onclick</span> =<span class="keyword">function</span>(<span class="params"> </span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(i); </span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><details>    <div>        <p>3</p>    </div></details><p>下面程序的输出结果是</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">compute</span>(<span class="number">10</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">var</span> compute = <span class="keyword">function</span>(<span class="params">A,B</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(A * B) ;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compute</span>(<span class="params">A,B</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(A + B);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compute</span>(<span class="params">A,B</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>((A + B)*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">compute</span>(<span class="number">2</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure><details>    <div>        <p>220、20</p>    </div></details><p>下面两个代码片段输出结果有什么区别？为什么？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 片段1</span></span><br><span class="line"><span class="title function_">check</span>(<span class="string">&#x27;first&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">check</span>(<span class="params">ars</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ars);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 片段2</span></span><br><span class="line"><span class="title function_">check</span>(<span class="string">&#x27;second&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> check= <span class="keyword">function</span>(<span class="params">ars</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ars);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details>    <div>        <p>'first'、Uncaught TypeError: check is not a function</p>        <p>第一个是匿名函数，第二个函数表达式。他们都会变量提升，函数表达式只提升了元素定义，未提升赋值，所以不能提前调用。</p>    </div></details><h3 id="ES6-1"><a href="#ES6-1" class="headerlink" title="ES6"></a>ES6</h3><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>下面代码的输出结果是？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> student = &#123;<span class="attr">name</span>: <span class="string">&#x27;ZhangSan&#x27;</span>&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(student, <span class="string">&#x27;age&#x27;</span>, &#123;<span class="attr">value</span>: <span class="number">22</span>&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(student))</span><br></pre></td></tr></table></figure><details>    <div>        <p>{name: 'ZhangSan', age: 22}、['name']</p>    </div></details><h4 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h4><p>下列程序的输出结果是多少？为什么？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">cb</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="title class_">Math</span>.<span class="title function_">ceil</span>(x); i &lt;= y; i++) &#123;</span><br><span class="line">        <span class="keyword">yield</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">cb</span>(<span class="number">6</span>, <span class="number">9</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure><details>    <div>        <p>6、7</p>    </div></details><h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><p>下面程序的输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> args);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">21</span>);</span><br></pre></td></tr></table></figure><details>    <div>        <p>objectt</p>    </div></details><h4 id="promise-1"><a href="#promise-1" class="headerlink" title="promise"></a>promise</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">0</span>).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> e).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e))</span><br></pre></td></tr></table></figure><details>    <div>        <p>无任何输出</p>        <p>错误处理是只执行最近的一个catch的。所以只有第一个catch被执行了。</p>    </div></details><h4 id="class"><a href="#class" class="headerlink" title="class"></a>class</h4><p>请写出下面ES6代码编译后所生成的ES5代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">     <span class="title function_">constructor</span> (name) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">     &#125;</span><br><span class="line">     greet () &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     greetDelay (time) &#123;</span><br><span class="line">          <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">          &#125;, time);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details>    <div>        <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">greet</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi, my name is <span class="subst">$&#123;<span class="variable language_">this</span>._name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">greetDelay</span> = <span class="keyword">function</span>(<span class="params">time</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi, my name is <span class="subst">$&#123;_this.name&#125;</span>`</span>);</span><br><span class="line">        &#125;, time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>    </div></details><h4 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h4><p>下面程序的输出结果是多少？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getPersonInfo</span> (one, two, three) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(one)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(two)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(three)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="string">&#x27;Lydia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">21</span></span><br><span class="line">getPersonInfo <span class="string">`<span class="subst">$&#123;person&#125;</span> is <span class="subst">$&#123;age&#125;</span> years old`</span></span><br></pre></td></tr></table></figure><details>    <div>        <p>['',' is ',' years old']、'Lydia'、21</p>        <p>相当于getPersonInfo(['',' is ',' years old'],'Lydia',21)</p>    </div></details><h4 id="module"><a href="#module" class="headerlink" title="module"></a>module</h4><p>请写出index里面的输出结果</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; <span class="string">&quot;Hello world&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&quot;nowcoder&quot;</span></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> data <span class="keyword">from</span> <span class="string">&quot;./module&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br></pre></td></tr></table></figure><details>    <div>        <p>我不确定哈。{default: ‘hello world’, name: ‘nowcoder’}</p>    </div></details><p>有a.js和b.js两个文件，请写出b文件中代码的输出</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = &#123;&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;    </span><br><span class="line">    a = <span class="number">2</span>    </span><br><span class="line">    b.<span class="property">b</span> = <span class="number">2</span></span><br><span class="line">&#125;, <span class="number">100</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; a, b &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">a</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">b</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">a</span>)    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">b</span>)</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br></pre></td></tr></table></figure><details>    <div>        <p>1、{}、2、{b:2}</p>    </div></details><h3 id="其他-4"><a href="#其他-4" class="headerlink" title="其他"></a>其他</h3><p>输出结果是：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"> value </span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>( value );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"> value </span>) &#123;</span><br><span class="line">        <span class="title function_">fn1</span>(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> callbacks = $.<span class="title class_">Callbacks</span>();</span><br><span class="line">    callbacks.<span class="title function_">add</span>( fn1 ); </span><br><span class="line">    callbacks.<span class="title function_">fire</span>( <span class="string">&quot;B&quot;</span> );</span><br><span class="line">    callbacks.<span class="title function_">add</span>( fn2 ); </span><br><span class="line">    callbacks.<span class="title function_">fire</span>( <span class="string">&quot;C&quot;</span> );</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><details>    <div>        <p>"B"、"C"、"A"</p>    </div></details><p>实现在p元素后添加“Hello World!”，则横线处应使用的方法为(      )？</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.6.1/jquery.js&quot;</span>&gt;</span><span class="language-javascript">&lt;/、script&gt;</span></span><br><span class="line"><span class="language-javascript">        <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-javascript">            $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-javascript">                $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-javascript">                    $(<span class="string">&quot;&lt;b&gt;Hello World!&lt;/b&gt;&quot;</span>).<span class="title function_">______</span>(<span class="string">&quot;p&quot;</span>);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-javascript">                &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-javascript">            &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-javascript">        &lt;/&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">    &lt;/head&gt;</span></span><br><span class="line"><span class="language-javascript">    <span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is another paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-javascript">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>在每个p元素的结尾添加内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="language-xml"><span class="language-javascript">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span></span></span></span><br><span class="line"><span class="language-javascript">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><details>    <div>        <p>appendTo()</p>    </div></details><p>输出结果是：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">    content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> $ = <span class="variable language_">document</span>.<span class="property">querySelector</span>.<span class="title function_">bind</span>(<span class="variable language_">document</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> box1 = $(<span class="string">&#x27;#box1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> box2 = $(<span class="string">&#x27;#box2&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">box1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;box1 true&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">box1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;box1 false&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">box2.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;box2 true&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">box2.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;box2 false&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><details>    <div>        <ul>            <li>'box1 true'、'box2 true'、'box2 false'、'box1 false'</li>            <li>addEventListener的第三个参数true和false分别代表时间发生在“捕获阶段”和“冒泡阶段”</li>            <li>先由**外到内捕获**，触发所有true的事件响应，再由**内到外冒泡**，触发所有false的事件响应。</li>        </ul>    </div></details><p>请选择下面代码输出1的次数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;  </span><br><span class="line"><span class="attr">el</span>: <span class="string">&#x27;#example&#x27;</span>,  </span><br><span class="line"><span class="attr">data</span>: &#123;    </span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello&#x27;</span>  </span><br><span class="line">&#125;,  </span><br><span class="line"><span class="attr">computed</span>: &#123;    </span><br><span class="line">    <span class="attr">test</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;      </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)      </span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span> </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;,  </span><br><span class="line"><span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>)&#123;    </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;World&#x27;</span>    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;        </span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">test</span>)    </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><details>    <div>        <p>1次</p>        <ul>            <li>vue的computed具有缓存功能。</li>            <li>所以message只更新了一次，所以test只触发一次，执行一次console.log(1)。</li>        </ul>    </div></details><p>打印出所有数字的组合</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// 打印出所有数字的组合：1,2,3,12,13,23,123</span></span><br></pre></td></tr></table></figure><details>    <div>        <xmp>            const init = [1, 2, 3, 4, 5]            const result = ['']            init.forEach((item, i) => {            const b = result.map(m => {                return m + init[i]            })            result.push(...b)            })        </xmp>    </div></details>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一些面试笔试题&lt;/p&gt;
&lt;h2 id=&quot;单选题&quot;&gt;&lt;a href=&quot;#单选题&quot; class=&quot;headerlink&quot; title=&quot;单选题&quot;&gt;&lt;/a&gt;单选题&lt;/h2&gt;&lt;h3 id=&quot;JS基础&quot;&gt;&lt;a href=&quot;#JS基础&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="前端面试集锦" scheme="http://ran-up.github.io/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
    
    <category term="笔试题" scheme="http://ran-up.github.io/tags/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>pure主题增加文章更新时间</title>
    <link href="http://ran-up.github.io/2024/12/28/pure%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/pure%E4%B8%BB%E9%A2%98%E5%A2%9E%E5%8A%A0%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4/"/>
    <id>http://ran-up.github.io/2024/12/28/pure%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/pure%E4%B8%BB%E9%A2%98%E5%A2%9E%E5%8A%A0%E6%96%87%E7%AB%A0%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4/</id>
    <published>2024-12-27T17:38:35.763Z</published>
    <updated>2024-12-27T17:38:35.763Z</updated>
    
    <content type="html"><![CDATA[<p>当给文章进行更新，却没有更新提示，这怎么能行呢，于是，这篇文章出现了。</p><h2 id="浅浅声明一下"><a href="#浅浅声明一下" class="headerlink" title="浅浅声明一下"></a>浅浅声明一下</h2><p>这篇文章，是借鉴了<a href="https://blog.vanxnf.top/2018/09/03/Hexo-%E5%8D%9A%E5%AE%A2-Hiker-%E4%B8%BB%E9%A2%98%E5%A2%9E%E5%8A%A0%E6%96%87%E7%AB%A0%E6%9C%80%E5%90%8E%E7%BC%96%E8%BE%91%E6%97%B6%E9%97%B4%EF%BC%8C%E5%B9%B6%E6%8C%89%E7%85%A7%E6%9C%80%E5%90%8E%E7%BC%96%E8%BE%91%E6%97%B6%E9%97%B4%E6%8E%92%E5%BA%8F/">Hexo博客Hiker主题增加文章最后编辑时间并按照最后编辑时间排序</a>。在此非常感谢<a href="https://blog.vanxnf.top/">Vientiane</a>提供的详细而清晰的修改教程，因为每个人的需求不同，进行了相应的修改，如果想要观看原文，或者更多的配置，请移步上面的原文链接。</p><p>由于 Hiker 主题和 Pure 主题的 layout 结构是类似的，所以我们可以从 Vientiane 的修改方式中，发现适合我们 pure 主题配置的具体修改方式。</p><h2 id="调整-Hexo-主配置文件"><a href="#调整-Hexo-主配置文件" class="headerlink" title="调整 Hexo 主配置文件"></a>调整 Hexo 主配置文件</h2><p>我们找到主配置文件 _config.yml（注意：<strong>不是主题的 _config.yml</strong>），修改 index_generator 的 order_by 为 <code>-updated</code> 就可以开启以更新时间来排序，就会将最后修改过的文章显示在最前面。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index_generator:</span><br><span class="line">  path: &#x27;&#x27;</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -updated # -date、-updated 以上传时间或更新时间排序</span><br></pre></td></tr></table></figure><p>然后继续修改 date_format 部分，将 <code>YYYY-MM-DD</code> 改成如下的 <code>YYYY-MM-DD HH:mm:ss</code>格式，再重新生成一下网页就能看到具体的时间了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date_format: YYYY-MM-DD HH:mm:ss</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line">## updated_option supports &#x27;mtime&#x27;, &#x27;date&#x27;, &#x27;empty&#x27;</span><br><span class="line">updated_option: &#x27;mtime&#x27;</span><br></pre></td></tr></table></figure><h2 id="新建-updated-ejs-文件"><a href="#新建-updated-ejs-文件" class="headerlink" title="新建 updated.ejs 文件"></a>新建 updated.ejs 文件</h2><p>在 <code>themes\pure\layout\_partial\post</code> 中的 date.ejs 这个文件中添加一些东西。</p><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 上传时间 --&gt;</span><br><span class="line">&lt;span class=&quot;article-date&quot;&gt;</span><br><span class="line">    &lt;i class=&quot;icon icon-calendar-check&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;a href=&quot;&lt;%- url_for(post.path) %&gt;&quot; class=&quot;&lt;%= class_name %&gt;&quot;&gt;</span><br><span class="line">        &lt;%= __(&#x27;published&#x27;) %&gt;</span><br><span class="line">        &lt;time datetime=&quot;&lt;%= date_xml(post.date) %&gt;&quot; itemprop=&quot;datePublished&quot;&gt;</span><br><span class="line">            &lt;%= date(post.date, date_format) %&gt;</span><br><span class="line">        &lt;/time&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 更新时间 --&gt;</span><br><span class="line">&lt;span class=&quot;article-date&quot;&gt;</span><br><span class="line">    &lt;i class=&quot;icon icon-calendar-check&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;a href=&quot;&lt;%- url_for(post.path) %&gt;&quot; class=&quot;&lt;%= class_name %&gt;&quot;&gt;</span><br><span class="line">        &lt;%= __(&#x27;updated&#x27;) %&gt;</span><br><span class="line">        &lt;time datetime=&quot;&lt;%= date_xml(post.updated) %&gt;&quot; itemprop=&quot;dateUpdated&quot;&gt;</span><br><span class="line">            &lt;%= date(post.updated, date_format) %&gt;</span><br><span class="line">        &lt;/time&gt;</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><p> 大体上与 date.ejs 内容相仿，post.date 改成了 <code>post.updated</code>，itemprop&#x3D;”datePublished” 改成了 <code>itemprop=&quot;dateUpdated&quot;</code>。同时还多了一个 <code>&lt;%= __(&#39;updated&#39;) %&gt;</code>，因为在原来的格式下只会显示时间，而这两个时间没有任何的提示信息，就会不知道哪个是哪个，所以为了用户体验，我们需要加上一些明显的提示信息。</p><p> 同时在 上传时间 中也多了个 <code>&lt;%= __(&#39;published&#39;) %&gt;</code>，这是为了配合 更新时间，而添加的提示性文本信息。</p><h2 id="配置提示文本"><a href="#配置提示文本" class="headerlink" title="配置提示文本"></a>配置提示文本</h2><p> 由于 date.ejs 中分别引入了 published 和 updated 字段，因此我们需要去在语言文件中新增对应的字段，语言文件在 <code>themes/pure/languages</code>中，你博客设置成什么语言，就修改对应的语言文件，当然全部更改也是可以的，这样就方便后面的语言切换。</p><p> 打开文件，在文件中增加两行：(我是添加到文章最后的)</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copyright:</span><br><span class="line">  theme_by: Theme by</span><br><span class="line">  base_on: base on</span><br><span class="line">  powered_by: Powered by</span><br><span class="line"># 这个是给时间前面设置个醒目文本 </span><br><span class="line">published: 首次</span><br><span class="line">updated: 更新</span><br></pre></td></tr></table></figure><p>保存退出即可。简单解释一下，格式为<code>字段名：字段值</code>，字段名不变，字段值可以随意更改。</p><h2 id="修改-archive-post-ejs-文件"><a href="#修改-archive-post-ejs-文件" class="headerlink" title="修改 archive-post.ejs 文件"></a>修改 archive-post.ejs 文件</h2><p>打开 <code>themes\pure\layout\_partial\archive-post.ejs</code> 文件，找到： <code>&lt;%- partial(&#39;post/date&#39;, &#123;class_name: &#39;article-date&#39;, date_format: &#39;MMM D&#39;&#125;) %&gt;</code>，把其中的 date_format 改为 null，保存退出即可。这里是为了防止首页」和「文章页」时间格式不一致的问题。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p class=&quot;article-meta&quot;&gt;</span><br><span class="line">    &lt;!-- 上传时间 --&gt;</span><br><span class="line">    &lt;%- partial(&#x27;post/date&#x27;, &#123;class_name: &#x27;article-date&#x27;, date_format: null&#125;) %&gt;</span><br><span class="line">    &lt;%- partial(&#x27;post/category&#x27;) %&gt;</span><br><span class="line">    &lt;%- partial(&#x27;post/tag&#x27;) %&gt;</span><br><span class="line">    &lt;span class=&quot;post-comment&quot;&gt;&lt;i class=&quot;icon icon-comment&quot;&gt;&lt;/i&gt; &lt;a href=&quot;&lt;%- url_for(post.path) %&gt;#comments&quot;</span><br><span class="line">        class=&quot;article-comment-link&quot;&gt;&lt;%= __(&#x27;article.comments&#x27;) %&gt;&lt;/a&gt;&lt;/span&gt;</span><br><span class="line">    &lt;%- partial(&#x27;post/wordcount&#x27;) %&gt;</span><br><span class="line">  &lt;/p&gt;</span><br></pre></td></tr></table></figure><h2 id="配置-md-文件"><a href="#配置-md-文件" class="headerlink" title="配置 .md 文件"></a>配置 .md 文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date: &#123;date&#125; </span><br><span class="line">updated: &#123;date&#125;</span><br></pre></td></tr></table></figure><h2 id="结束-效果展示"><a href="#结束-效果展示" class="headerlink" title="结束$效果展示"></a>结束$效果展示</h2><p>然后你就可以：<code>hexo clean</code>、<code>hexo g</code>、<code>hexo s</code>看看效果了。</p><p><strong>首页样式</strong></p><p><img src="/images/pure%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/%E9%A6%96%E9%A1%B5%E6%97%B6%E9%97%B4.png"></p><p><strong>文章页样式</strong></p><p><img src="/images/pure%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/%E6%96%87%E7%AB%A0%E9%A1%B5%E6%97%B6%E9%97%B4.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当给文章进行更新，却没有更新提示，这怎么能行呢，于是，这篇文章出现了。&lt;/p&gt;
&lt;h2 id=&quot;浅浅声明一下&quot;&gt;&lt;a href=&quot;#浅浅声明一下&quot; class=&quot;headerlink&quot; title=&quot;浅浅声明一下&quot;&gt;&lt;/a&gt;浅浅声明一下&lt;/h2&gt;&lt;p&gt;这篇文章，是借鉴了&lt;a</summary>
      
    
    
    
    <category term="pure主题配置" scheme="http://ran-up.github.io/categories/pure%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="pure主题新增时间" scheme="http://ran-up.github.io/tags/pure%E4%B8%BB%E9%A2%98%E6%96%B0%E5%A2%9E%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>Sass知识点概括</title>
    <link href="http://ran-up.github.io/2024/12/28/CSS%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/Sass%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A6%82%E6%8B%AC/"/>
    <id>http://ran-up.github.io/2024/12/28/CSS%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/Sass%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A6%82%E6%8B%AC/</id>
    <published>2024-12-27T17:38:35.754Z</published>
    <updated>2024-12-27T17:38:35.754Z</updated>
    
    <content type="html"><![CDATA[<p>Sass知识点梳理</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><code>Sass</code> (英文全称：<code>Syntactically Awesome Stylesheets</code>) 是一个最初由 Hampton Catlin 设计并由 Natalie Weizenbaum 开发的<strong>层叠样式表语言</strong>。</p><p><code>Sass</code> 是一个 <strong>CSS 预处理器</strong>，可以帮助我们<strong>减少</strong> CSS <strong>重复的代码</strong>，节省开发时间。</p><p><code>Sass</code> 完全<strong>兼容所有</strong>版本的 CSS；扩展了 CSS3，增加了规则、变量、混入、选择器、继承、内置函数等等特性。</p><p><code>Sass</code> 生成良好格式化的 CSS 代码，<strong>易于组织和维护</strong>；文件后缀为 <strong>.scss</strong>。</p><p><code>Sass</code> 定义变量使用 <strong>$</strong> 符号，引用外部文件使用 <code>@include</code> 。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p><code>CSS</code> 本身语法不够强大，导致<strong>重复编写</strong>一些代码，<strong>无法实现复用</strong>，而且代码也<strong>不方便维护</strong>。</p><p><code>Sass</code> 引入合理的样式<strong>复用机制</strong>，增加了规则、变量、混入、选择器、继承、内置函数等特性。</p><p>对于重复使用的 <code>CSS</code> 样式就可以在头部设置为一个单独的变量，方便了后期的修改和管理。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>上面已经知道了 <code>Sass</code> 是什么了，以及它的作用，那我们如何使用呢？</p><p>首先咱们的浏览器并不支持 <code>Sass</code> 代码。</p><p>所以，我们就需要自己使用 <code>Sass</code> <strong>预处理器</strong>来先将 <code>Sass</code> 代码转换为 <code>CSS</code> 代码。</p><p>并且要将页面中链接的地址改成，刚刚转换为 <code>CSS</code> 代码的这个地址。</p><h3 id="安装-Sass"><a href="#安装-Sass" class="headerlink" title="安装 Sass"></a>安装 Sass</h3><p>使用 npm 来全局安装：<code>npm install -g sass</code></p><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><p>使用：<code>sass --version</code></p><h3 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h3><ol><li>先创建一个后缀名为 <code>.scss</code> 的文件。后面的 xxx 是我们取的文件名！</li><li>使用 <code>sass xxx.scss</code> 就可以将文件转换为 <code>CSS</code> 代码，但是它并不会创建 <code>.css</code> 文件，只是在终端输出了转换的 <code>CSS</code> 代码。</li><li>我们也可以指定文件，使用 <code>sass xxx.scss xxx.css</code> ，将转换的代码放到指定的 <code>xxx.css</code> 文件中了，可以自动创建 <code>.css</code> 文件。</li><li>上面的方法每次修改了 <code>sass</code> 文件，就需要手动重新调用，如果想执行一次之后每次修改文件后自动进行编译，那我们可以在调用后面添加一个 <code>-w</code>：<code>sass xxx.scss xxx.css -w</code>，这样就可以修改后自动编译了。</li></ol><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p><code>Sass</code> 中有两种注释方式：<code>//</code> 和 <code>/**/</code></p><p>其中 <code>//</code> 为单行注释，也叫<strong>静默注释</strong>，其内容<strong>不会</strong>出现在 <code>CSS</code> 文件中。</p><p><code>/* ... */</code> 为多行注释， 也叫<strong>标准注释格式</strong>，它里面的注释内容<strong>可以编译</strong>到 <code>css</code> 文件中去。</p><p>并且当注释出现在原生 <code>css</code> <strong>不允许</strong>的地方时，<code>Sass</code> 会将这些注释<strong>抹掉</strong>。</p><p>我们还可以定义变量，以插值语句的形式写进多行注释中来输出变量值。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量用于存储一些信息，它们可以被<strong>重复使用</strong>。</p><p><code>Sass</code> 变量可以存储以下信息 (数据类型)：</p><ul><li><strong>字符串</strong>：有或无引号字符串，比如：”foo”, ‘bar’, baz</li><li><strong>数字</strong>：1, 2, 13, 10px</li><li><strong>颜色值</strong>：blue, #04a3f9, rgba(255,0,0,0.5)</li><li><strong>布尔值</strong>：true, false</li><li>**数组(list)**：用空格或逗号作分隔符，1.5em 1em 0 2em, Helvetica, Arial, sans-serif</li><li><strong>空值</strong>：null</li><li><strong>maps</strong>：相当于 JavaScript 的 object，(key1: value1, key2: value2)</li></ul><p><code>Sass</code> 变量使用 <strong>$</strong> 符号：<code>$名称: 值</code>。</p><p>名字可以使用连接符连接，不过在 <code>Sass</code> 中的 <strong>-与_是相同的</strong>，也就是 <code>@mixin xxx-yyy &#123;...&#125;</code> 与 <code>@mixin xxx_yyy &#123;...&#125;</code> 是一样的。</p><p><code>Sass</code> 中也有全局和局部作用域之分，在文件头部 (最外层)设置的变量就是全局变量，而在一个样式中设置的变量则是局部变量。</p><p>我们如果想在其他样式中也用那个变量，就给<strong>局部变量</strong>加上 <code>!global</code> 关键字来将其修改为全局变量。</p><p>不过，我们通常将所有的全局变量定义在<strong>同一个文件</strong>，如：<code>_globals.scss</code>，然后我们使用 <code>@include</code> 来包含该文件。</p><p><strong>注意</strong>：当我们使用  <code>#&#123;&#125;</code> 时，有引号的字符串会被编译为无引号的字符串，这样便于在 <strong>混入</strong>(mixin) 中引用<strong>选择器名</strong>。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1_Sass.scss 文件 */</span></span><br><span class="line"><span class="comment">/* 全局作用域 */</span></span><br><span class="line">$myColor: red;</span><br><span class="line">$fontSize: <span class="number">14px</span>;</span><br><span class="line">$fontFamily: Helvetica,sans-serif;</span><br><span class="line">$myWidth: <span class="number">200px</span>;</span><br><span class="line">$myHeight: <span class="number">200px</span>;</span><br><span class="line">$myBorder: <span class="number">1px</span> solid $myColor;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/* 局部作用域 */</span></span><br><span class="line">    $myColor: pink;</span><br><span class="line">  <span class="comment">/* 全局作用域 */</span></span><br><span class="line">  <span class="comment">/* $myColor: pink !global; */</span></span><br><span class="line">    <span class="attribute">width</span>: $myWidth;</span><br><span class="line">    <span class="attribute">height</span>: $myHeight;</span><br><span class="line">    <span class="attribute">border</span>: $myBorder;</span><br><span class="line">    <span class="attribute">background-color</span>: $myColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: $myColor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1_Sass.css 文件*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="comment">/* 局部作用域 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="comment">/* 全局作用域 */</span></span><br><span class="line">  <span class="comment">/* background-color: pink; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>所有数据类型均支持 <code>==</code> 、 <code>!=</code>，此外，每种数据类型也有其各自支持的运算方式。</p><h3 id="数字运算"><a href="#数字运算" class="headerlink" title="数字运算"></a>数字运算</h3><p><code>Sass</code> 支持数字的加减乘除、取整等运算 (+, -, *, &#x2F;, %)，会根据情况会在不同的单位间进行转换。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Sass 文件*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1pt</span> + <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* CSS 文件*/</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1.75pt</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关系运算 (&lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;) 也可用于数字运算，相等运算 (&#x3D;&#x3D;, !&#x3D;) 可用于所有数据类型。</p><h4 id="除法运算"><a href="#除法运算" class="headerlink" title="除法运算"></a>除法运算</h4><p>以下三种情况 <code>/</code> 将被视为除法运算符号：</p><ul><li>如果值或值的一部分，是变量或者是函数的返回值。</li><li>如果值被圆括号包裹。</li><li>如果值是算数表达式的一部分。</li></ul><p>也就是写上：数字 &#x2F; 数字 这种情况没用。不能是单纯的数字，而是需要通过某些操作转化为数字才行。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Sass 文件 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">10px</span>/<span class="number">8px</span>; <span class="comment">/* CSS */</span></span><br><span class="line">  $<span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">  <span class="attribute">width</span>: $width/<span class="number">2</span>;  <span class="comment">/* 变量 */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">round</span>(<span class="number">1.5</span>)/<span class="number">2</span>; <span class="comment">/* function */</span></span><br><span class="line">  <span class="attribute">height</span>: (<span class="number">500px</span>/<span class="number">2</span>);  <span class="comment">/* () */</span></span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span> + <span class="number">8px</span>/<span class="number">2px</span>;  <span class="comment">/* + 算数表达式  */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* CSS 文件 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">10px</span>/<span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">9px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要使用变量，同时又不想 <code>/</code> 做除法运算而是<strong>完整</strong>地编译到 <code>CSS</code> 文件中，则使用 <code>#&#123;&#125;</code> 插值语句将<strong>变量包裹</strong>。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Sass 文件 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  $<span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  $<span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">font</span>: #&#123;$<span class="attribute">font-size</span>&#125; / #&#123;$<span class="attribute">line-height</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* CSS 文件 */</span></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="颜色值运算"><a href="#颜色值运算" class="headerlink" title="颜色值运算"></a>颜色值运算</h3><p>颜色值的运算是<strong>分段计算</strong>进行的，也就是分别计算红色，绿色，以及蓝色的值。</p><h2 id="default"><a href="#default" class="headerlink" title="!default"></a>!default</h2><p>使用<code>sass</code>的<code>!default</code>标签可以让其他通过<code>@import</code>导入 <code>sass</code> 库文件的使用者去<strong>自定义修改</strong> <code>sass</code> 库文件中的某些<strong>值</strong>。</p><p><code>!default</code>用于<strong>变量</strong>。</p><p><strong>含义是</strong>：如果这个变量被声明赋值了，那就用它<strong>声明的值</strong>，否则就用这个<strong>默认值</strong>。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">$myWidth: <span class="number">400px</span> !default;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: $myWidth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套规则与属性嵌套"><a href="#嵌套规则与属性嵌套" class="headerlink" title="嵌套规则与属性嵌套"></a>嵌套规则与属性嵌套</h2><p><code>Sass</code> 嵌套 <code>CSS</code> 选择器类似于 <code>HTML</code> 的嵌套规则。</p><p>也就是允许将一套 <code>CSS</code> 样式<strong>嵌套</strong>进另一套样式中，将<strong>外层</strong>的选择器作为自身的<strong>父选择器</strong>。</p><p>嵌套功能<strong>避免了重复输入</strong>父选择器，而且令复杂的 CSS 结构更<strong>易于管理</strong>。</p><p>在一个大盒子里面包含的其他标签可以在 <code>Sass</code> 中进行<strong>选择器嵌套</strong>，而有些 <code>CSS</code> 属性可以进行<strong>属性嵌套</strong>。</p><p>就比如有些 <code>CSS</code> 属性遵循<strong>相同的命名空间</strong> (namespace)，比如 <code>font-family, font-size, font-weight</code> 都以 <code>font</code> 作为属性的命名空间。为了便于管理这样的属性，同时也为了避免了重复输入，<code>Sass</code> 允许将属性嵌套在命名空间中。</p><p>如：<code>font-xxx，text-xxx</code>等。</p><p>这里是：最外层为 <code>nav</code>，<code>nav</code> 里面有一个无序列表 <code>ul</code>，<code>ul</code>中有 <code>li</code>，<code>li</code>中又有链接 <code>a</code>，还对 <code>font</code> 属性进行了拆分嵌套操作。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 2_嵌套.scss 文件 */</span></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 选择器嵌套 */</span></span><br><span class="line">    <span class="selector-tag">ul</span> &#123;</span><br><span class="line">        <span class="attribute">list-style</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 选择器嵌套 */</span></span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 选择器嵌套 */</span></span><br><span class="line">        <span class="selector-tag">a</span> &#123;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 属性嵌套 -- 有前缀的 CSS 属性 font-xxx */</span></span><br><span class="line">            <span class="attribute">font</span>: &#123;</span><br><span class="line">                family: Helvetica, sans-serif;</span><br><span class="line">                weight: bold;</span><br><span class="line">                size: <span class="number">14px</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 属性嵌套 -- 有前缀的 CSS 属性 text-xxx */</span></span><br><span class="line">            text: &#123;</span><br><span class="line">                align: center;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2_嵌套.css 文件 */</span></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且命名空间也可以拥有自己的<strong>属性值</strong>。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Sass 文件 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">20px</span>/<span class="number">24px</span> &#123;</span><br><span class="line">        family: Helvetica, sans-serif;</span><br><span class="line">        weight: bold;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* CSS 文件 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">20px</span>/<span class="number">24px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: Helvetica, sans-serif;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="父选择器-amp"><a href="#父选择器-amp" class="headerlink" title="父选择器 &amp;"></a>父选择器 &amp;</h2><p>当我们在嵌套 CSS 时，有时也需要直接使用嵌套外层的父选择器。</p><p>也就是遇到伪元素或者伪类选择器的时候，不想以 后代选择器 的方式连接，那么这时候就可以使用 <code>&amp;</code> 来连接。</p><p>必须将 <code>&amp;</code> 放在最前面，作为选择器的第一个字符，在其之后跟随需要生成复合的其它选择器。</p><p>在编译后的 CSS 文件中 <code>&amp;</code> 会被替换成在嵌套外一层的父选择器。</p><p>如果是多层次的嵌套，那么会将最外层的父选择器一层一层向下传递。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* sass 文件 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background-color</span>: yellow;</span><br><span class="line"></span><br><span class="line">&amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* css 文件 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="并集选择器的嵌套"><a href="#并集选择器的嵌套" class="headerlink" title="并集选择器的嵌套"></a>并集选择器的嵌套</h2><p><code>css</code>的写法会让你在并集选择器中的每一个选择器前都重复一遍容器元素的选择器。</p><p>比如：<code>.container h1, .container h2, .container h3 &#123; ... &#125;</code></p><p>而 <code>sass</code>的嵌套特性也是支持这种场景的。</p><p>当<code>sass</code>解开一个并集选择器内嵌时，它会把每一个内嵌选择器都正确地解析出来。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* sass 文件*/</span> </span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="selector-tag">h1</span>,</span><br><span class="line">    <span class="selector-tag">h2</span>,</span><br><span class="line">    <span class="selector-tag">h3</span> &#123;</span><br><span class="line">        <span class="attribute">margin-bottom</span>: .<span class="number">8em</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* css 文件 */</span></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: margin: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="gt-、-和-选择器："><a href="#gt-、-和-选择器：" class="headerlink" title="&gt;、+和~ 选择器："></a>&gt;、+和~ 选择器：</h2><p>在 CSS 中 <code>&gt;、+ 和 ~</code> 分别叫：相邻后代选择器、相邻兄弟选择器 和 全部兄弟选择器。<br>但在 Sass 中，它们分别叫：子组合选择器、同层选择器 和 同层全体组合选择器。</p><p>这三个选择器必须和其他选择器配合使用，以指定浏览器仅选择某种特定上下文中的元素。</p><p>我们可以使用子组合选择器  <code>&gt;</code> 选择一个元素的<strong>直接子元素</strong>。</p><p>也可以用 同层选择器 <code>+</code> 和 同层全体组合选择器 <code>~</code> ，分别选择一个元素紧跟着的<strong>兄弟元素</strong>，或者选择<strong>所有</strong>跟在那个元素后面的<strong>同层元素</strong>，不管它们之间隔了多少其他元素。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* sass 文件 */</span></span><br><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">  <span class="comment">/* 同层全体组合选择器 */</span></span><br><span class="line">  ~ <span class="selector-tag">article</span> &#123; <span class="attribute">border-top</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span> &#125;</span><br><span class="line">  <span class="comment">/* 子组合选择器 */</span></span><br><span class="line">  &gt; <span class="selector-tag">section</span> &#123; <span class="attribute">background</span>: <span class="number">#eee</span> &#125;</span><br><span class="line">  <span class="selector-tag">dl</span> &gt; &#123;</span><br><span class="line">    <span class="selector-tag">dt</span> &#123; <span class="attribute">color</span>: <span class="number">#333</span> &#125;</span><br><span class="line">    <span class="selector-tag">dd</span> &#123; <span class="attribute">color</span>: <span class="number">#555</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* 同层选择器 */</span>  </span><br><span class="line">  <span class="selector-tag">nav</span> + &amp; &#123; <span class="attribute">margin-top</span>: <span class="number">0</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* css 文件 */</span></span><br><span class="line"><span class="selector-tag">article</span> ~ <span class="selector-tag">article</span> &#123; <span class="attribute">border-top</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span> &#125;</span><br><span class="line"><span class="selector-tag">article</span> &gt; <span class="selector-tag">footer</span> &#123; <span class="attribute">background</span>: <span class="number">#eee</span> &#125;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">dl</span> &gt; <span class="selector-tag">dt</span> &#123; <span class="attribute">color</span>: <span class="number">#333</span> &#125;</span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">dl</span> &gt; <span class="selector-tag">dd</span> &#123; <span class="attribute">color</span>: <span class="number">#555</span> &#125;</span><br><span class="line"><span class="selector-tag">nav</span> + <span class="selector-tag">article</span> &#123; <span class="attribute">margin-top</span>: <span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="import-与-Partials"><a href="#import-与-Partials" class="headerlink" title="@import 与 Partials"></a>@import 与 Partials</h2><h3 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h3><p><code>Sass</code> 可以帮助我们减少 <code>CSS</code> 重复的代码，节省开发时间。</p><p>我们可以像 <code>CSS</code> 那样为不同的属性创建不同的代码文件，如：变量定义的文件、颜色相关的文件、字体相关的文件等。</p><p>然后利用 <code>@import</code> 将这些文件导入到需要使用的文件中。</p><p>可以全局导入，也可以局部导入。</p><p><strong>语法</strong>：<code>@import &quot;文件名&quot;;</code></p><p>这里的文件名可以是 <code>CSS</code> 文件，也可以是 <code>Sass</code> 文件，<code>Sass</code> 文件可以不加后缀名，因为它会自动添加上去，不过 <code>CSS</code> 文件还是要自己添加上后缀名哈。</p><p><strong>注意</strong>：这里的 <code>@import</code> 只是将文件包含在 <code>CSS</code> 中，<strong>不需要</strong>额外的 <strong>HTTP 请求</strong>；不像 <code>CSS</code>中的那样：在每次调用时，都会创建一个<strong>额外的 HTTP 请求</strong>。</p><h3 id="Partials"><a href="#Partials" class="headerlink" title="Partials"></a>Partials</h3><p>如果我们<strong>不希望</strong>将 <code>Sass</code> 文件<strong>编译</strong>成 <code>CSS</code> 文件，那么就可以在命名文件名的时候，在文件名的<strong>开头</strong>处添加上一个<strong>下划线</strong> 。</p><p>但是，在使用 <code>@import</code> 导入文件时，我们<strong>不需要</strong>添加下划线。</p><p><strong>语法</strong>：<code>_文件名</code></p><p><strong>注意</strong>： <strong>不能</strong> 将带下划线与没有带下划线的同名文件放置在 <strong>同一目录</strong> 下，不然带下划线的文件将会被<strong>忽略</strong>，这样就白设置了。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 3_import.scss 文件 */</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;2_嵌套&quot;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&quot;1_Sass&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3_import.css 文件 */</span></span><br><span class="line"><span class="comment">/* 就是将 2_嵌套.scss 和 1_Sass.scss 里面的代码全部导入到一个文件中了*/</span></span><br><span class="line"><span class="keyword">@charset</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Helvetica, sans-serif;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mixin-与-include"><a href="#mixin-与-include" class="headerlink" title="@mixin 与 @include"></a>@mixin 与 @include</h2><p><code>@mixin</code> 指令允许我们定义一个可以在整个样式表中 <strong>重复使用的样式</strong>。</p><p><code>@include </code>指令可以 <strong>将混入</strong> （mixin） <strong>引入到文档</strong> 中。</p><p>并且在混入中也可以包含混入，也可以给混入传递参数和默认的参数。</p><p>在进行兼容浏览器时，浏览器前缀使用混入也是非常方便的。</p><blockquote><p>那么我们如何去判断一组属性是否应该组合成一个混合器呢？</p></blockquote><p>可以给这个混合器取一个浅显的、好的名字。如果你能找到一个很好的短名字来描述这些属性修饰的样式，比如<code>rounded-corners</code>、<code>fancy-font</code>或者<code>no-bullets</code>，那么往往能够构造一个合适的混合器。如果你找不到，这时候构造一个混合器可能并不合适。</p><h3 id="定义-mixin"><a href="#定义-mixin" class="headerlink" title="定义 mixin"></a>定义 mixin</h3><p>混入(mixin)通过 <code>@mixin</code> 指令来定义。</p><p><strong>语法</strong>：<code>@mixin 名字 &#123; ... &#125;</code></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义混入(mixin) */</span></span><br><span class="line"><span class="keyword">@mixin</span> txt-style &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-mixin"><a href="#使用-mixin" class="headerlink" title="使用 mixin"></a>使用 mixin</h3><p><code>@include</code> 指令可用于包含混入。</p><p><strong>语法</strong>：<code>选择器 &#123; @include 混入的名字; &#125;</code></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">        <span class="comment">/* 导入混入(mixin) */</span></span><br><span class="line">        <span class="keyword">@include</span> txt-style;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* css文件 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在混入中包含混入"><a href="#在混入中包含混入" class="headerlink" title="在混入中包含混入"></a>在混入中包含混入</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> special-text &#123;</span><br><span class="line">  <span class="keyword">@include</span> important-text;</span><br><span class="line">  <span class="keyword">@include</span> link;</span><br><span class="line">  <span class="keyword">@include</span> special-border;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="给混入传入参数"><a href="#给混入传入参数" class="headerlink" title="给混入传入参数"></a>给混入传入参数</h4><p><strong>注意</strong>：如果我们需要在 <strong>混入</strong>(mixin) 中引用 <strong>选择器名</strong>，那么需要使用  <code>#&#123;&#125;</code> ，来将有引号的字符串编译为无引号的字符串，不然会报错。</p><h5 id="固定参数"><a href="#固定参数" class="headerlink" title="固定参数"></a>固定参数</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 混入接收两个参数 */</span></span><br><span class="line"><span class="keyword">@mixin</span> myBorder($<span class="attribute">width</span>, $<span class="attribute">color</span>) &#123;</span><br><span class="line">    <span class="attribute">border</span>: $width solid $color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/* 调用混入，并传参 */</span></span><br><span class="line">    <span class="keyword">@include</span> myBorder(<span class="number">1px</span>, pink);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="comment">/* 调用混入，并传参 */</span></span><br><span class="line">    <span class="keyword">@include</span> myBorder(<span class="number">2px</span>, black);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* css文件 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="含有默认参数"><a href="#含有默认参数" class="headerlink" title="含有默认参数"></a>含有默认参数</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* $color:yellow 的默认参数为黄色 */</span></span><br><span class="line"><span class="keyword">@mixin</span> myBorder($<span class="attribute">width</span>, $<span class="attribute">color</span>:yellow) &#123;</span><br><span class="line">    <span class="attribute">border</span>: $width solid $color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">/* 调用混入，并传参 */</span></span><br><span class="line">    <span class="keyword">@include</span> myBorder(<span class="number">1px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="comment">/* 调用混入，并传参 */</span></span><br><span class="line">    <span class="keyword">@include</span> myBorder(<span class="number">2px</span>, black);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* css文件 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h5><p>当我们不能确定一个混入（mixin）或者一个函数（function）使用多少个参数，这时我们就可以使用参数变量 <strong>…</strong> 声明 (写在参数的最后方）告诉 <code>Sass</code> 将这些参数视为值列表处理。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 可变参数 */</span></span><br><span class="line"><span class="keyword">@mixin</span> box-shadow($shadows...) &#123;</span><br><span class="line">  <span class="comment">/* 兼容其他浏览器 */</span></span><br><span class="line">    -moz-<span class="attribute">box-shadow</span>: $shadows;</span><br><span class="line">    -webkit-<span class="attribute">box-shadow</span>: $shadows;</span><br><span class="line">    <span class="attribute">box-shadow</span>: $shadows;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="keyword">@include</span> box-shadow(<span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> #<span class="number">666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> #<span class="number">999</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* css文件 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  -moz-<span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>;</span><br><span class="line">  -webkit-<span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">4px</span> <span class="number">5px</span> <span class="number">#666</span>, <span class="number">2px</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数变量也可以用在引用混合指令的时候 (<code>@include</code>)，与平时用法一样，将一串值列表中的值逐条作为参数引用。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Sass 文件 */</span></span><br><span class="line"><span class="keyword">@mixin</span> colors($text, $background, $border) &#123;</span><br><span class="line">  <span class="attribute">color</span>: $text;</span><br><span class="line">  <span class="attribute">background-color</span>: $background;</span><br><span class="line">  <span class="attribute">border-color</span>: $border;</span><br><span class="line">&#125;</span><br><span class="line">$values: <span class="number">#ff0000</span>, <span class="number">#00ff00</span>, <span class="number">#0000ff</span>;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="keyword">@include</span> colors($values...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* CSS 文件 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#00ff00</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#0000ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="extend-与-继承"><a href="#extend-与-继承" class="headerlink" title="@extend 与 继承"></a>@extend 与 继承</h2><p><code>@extend</code> 指令告诉 <code>Sass</code> 一个选择器的样式从另一选择器<strong>继承</strong>。</p><p>如果一个样式与另外一个样式<strong>几乎相同</strong>，只有少量的区别，则使用 <code>@extend</code> 就显得很有用。</p><p><code>@extend</code> 很好的体现了代码的复用。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* extend.scss 文件 */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> div;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.div2</span> &#123;</span><br><span class="line">    <span class="keyword">@extend</span> div;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* extend.css 文件*/</span></span><br><span class="line"><span class="selector-tag">div</span>, <span class="selector-class">.div2</span>, <span class="selector-class">.div1</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.div1</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.div2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Sass知识点梳理&lt;/p&gt;
&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Sass&lt;/code&gt; (英文全称：&lt;code&gt;Syntactically Awesome S</summary>
      
    
    
    
    <category term="CSS预处理器" scheme="http://ran-up.github.io/categories/CSS%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/"/>
    
    
    <category term="Sass" scheme="http://ran-up.github.io/tags/Sass/"/>
    
  </entry>
  
  <entry>
    <title>真实高质量低代码商业项目前端后端运维管理系统</title>
    <link href="http://ran-up.github.io/2024/12/28/%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B%E8%AE%B0%E8%BD%BD/%E7%9C%9F%E5%AE%9E%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%95%86%E4%B8%9A%E9%A1%B9%E7%9B%AE%E5%89%8D%E7%AB%AF%E5%90%8E%E7%AB%AF%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <id>http://ran-up.github.io/2024/12/28/%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B%E8%AE%B0%E8%BD%BD/%E7%9C%9F%E5%AE%9E%E9%AB%98%E8%B4%A8%E9%87%8F%E4%BD%8E%E4%BB%A3%E7%A0%81%E5%95%86%E4%B8%9A%E9%A1%B9%E7%9B%AE%E5%89%8D%E7%AB%AF%E5%90%8E%E7%AB%AF%E8%BF%90%E7%BB%B4%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</id>
    <published>2024-12-27T17:29:38.000Z</published>
    <updated>2025-02-10T14:26:57.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="架构师课程笔记"><a href="#架构师课程笔记" class="headerlink" title="架构师课程笔记"></a>架构师课程笔记</h2><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><img src="/images/真实高质量低代码商业项目前端后端运维管理系统/需求分析.png" style="width: 90%;" alt=""/><h3 id="架构师课程的组成"><a href="#架构师课程的组成" class="headerlink" title="架构师课程的组成"></a>架构师课程的组成</h3><ul><li>业务相关 - 完成慕课乐高项目<ul><li>前端开发</li><li>后端开发</li><li>和开发相关的流程- 单元测试，部署，上线等</li></ul></li><li>研发相关<ul><li>脚手架</li><li>组件平台</li><li>监控平台等</li></ul></li></ul><h3 id="需求等资源"><a href="#需求等资源" class="headerlink" title="需求等资源"></a>需求等资源</h3><ul><li>链接：<a href="https://www.yuque.com/books/share/af79538c-09eb-4ddd-bfb7-599816c233bf">https://www.yuque.com/books/share/af79538c-09eb-4ddd-bfb7-599816c233bf</a></li><li>将慕课乐高 <a href="https://imooc-lego.com/">https://imooc-lego.com/</a> 网站当作高保真原型（UX prototypes）进行使用。将需求分类进行提取。<ul><li>Axure RP</li><li>Figma</li><li>Adobe XD</li></ul></li></ul><h3 id="需求分类"><a href="#需求分类" class="headerlink" title="需求分类"></a>需求分类</h3><ul><li>模版<ul><li>模版列表</li><li>使用模版创建</li></ul></li><li>用户<ul><li>获取验证码</li><li>手机登录</li><li>获取用户信息</li></ul></li><li>作品<ul><li>创建<ul><li>字体修改</li><li>内容缩放</li><li>内容拖拽</li></ul></li><li>保存</li><li>发布</li><li>获取作品列表以及信息</li><li><em>分享到 H5</em></li></ul></li><li>渠道<ul><li>获取渠道</li><li>创建渠道</li><li>删除渠道</li></ul></li></ul><h2 id="技术架构设计"><a href="#技术架构设计" class="headerlink" title="技术架构设计"></a>技术架构设计</h2><h3 id="需要几个项目"><a href="#需要几个项目" class="headerlink" title="需要几个项目"></a>需要几个项目</h3><ul><li>前后端分离项目</li><li>前端（SPA 项目，使用 Vue 或者 React） - lego<ul><li>网站：<a href="https://imooc-lego.com/">https://imooc-lego.com/</a></li><li><strong>编辑器 (lego-editor?)</strong></li><li>其他页面(lego-pages?)</li></ul></li><li>后端 - lego-backend<ul><li>RESTful API</li><li>H5 页面 SSR (Server side rendering)</li></ul></li><li>组件库 - lego-components</li></ul><img src="/images/真实高质量低代码商业项目前端后端运维管理系统/项目间的关系.png" style="width: 90%;" alt=""/><h3 id="核心问题分析"><a href="#核心问题分析" class="headerlink" title="核心问题分析"></a>核心问题分析</h3><p><strong>抓住关键问题：海报，或者说是作品是整个系统的核心也是难点。</strong></p><p><strong>海报的组成</strong></p><ul><li>背景，由图片或者纯色组成。</li><li>元素<ul><li>由各种不同的元素（组件）组成。</li><li>一部分属性界定它的位置（position）。</li><li>一部分属性界定它的展示（looks）。</li></ul></li></ul><p><strong>扩展性 - 场景设计</strong></p><ul><li>海报添加对应的背景音乐</li><li>新的组件类型 - 比如说当前日期</li></ul><p>本课程完成的文档：<a href="https://imooc-lego.yuque.com/books/share/dc22e979-74b0-4e88-a04b-1b0e93ec0ef5#">https://imooc-lego.yuque.com/books/share/dc22e979-74b0-4e88-a04b-1b0e93ec0ef5?#</a> 《技术方案》</p><h2 id="复杂项目"><a href="#复杂项目" class="headerlink" title="复杂项目"></a>复杂项目</h2><h3 id="业务的复杂度"><a href="#业务的复杂度" class="headerlink" title="业务的复杂度"></a>业务的复杂度</h3><ul><li>交互的复杂性，拖拽、改变字体等</li><li>数据结构和状态的复杂性</li><li>多项目互相依赖的复杂性</li><li>打包</li><li>性能优化</li><li>第三方库使用和调研以及二次开发</li></ul><h3 id="流程的复杂度"><a href="#流程的复杂度" class="headerlink" title="流程的复杂度"></a>流程的复杂度</h3><ul><li>git flow</li><li>lint 工具</li><li>单元测试</li><li>commit 信息</li><li>PR review</li><li>CI&#x2F;CD</li></ul><h2 id="简单分析一下-B-端的需求"><a href="#简单分析一下-B-端的需求" class="headerlink" title="简单分析一下 B 端的需求"></a>简单分析一下 B 端的需求</h2><p>只是简要的分析。从页面上分，会分为这几个页面。</p><p><strong>首页</strong></p><ul><li>导航条 未登录和已登录<ul><li>未登录 显示登录按钮</li><li>已登录 显示 创建设计，我的作品，还有下拉菜单（个人设置和登出）</li></ul></li><li>展示列表<ul><li>图片</li><li>标题</li><li>作者信息 和 使用人数</li><li>Hover 显示创建按钮</li></ul></li><li>搜索<ul><li>搜索以后有清空按钮</li></ul></li><li>点击更多展示列表（每页展示 8 条）</li><li>我的作品 （展示四条 右侧到我的作品页面）</li></ul><p><strong>登录</strong></p><ul><li>发送验证码</li><li>登录<ul><li>表单验证</li></ul></li></ul><p><strong>模版详情页</strong></p><ul><li>展示 图片 二维码 标题 作者</li><li>使用该模版创建</li><li>下载图片</li></ul><p><strong>我的作品</strong></p><ul><li>作品或者模版列表<ul><li>编辑</li><li>统计</li><li>删除</li><li>转赠</li><li>下载图片</li></ul></li><li>搜索</li><li>翻页</li></ul><p><strong>编辑器</strong></p><ul><li>左 组件面板 - 可以添加到编辑器中的组件类型<ul><li>文本</li><li>图形</li><li>形状</li></ul></li><li>中 编辑器区域 - 从左侧添加的组件都会呈现到编辑器中<ul><li>点击选中</li><li>拖动改变位置</li><li>拖动改变大小</li><li>快捷键</li><li>右键菜单</li></ul></li><li>右 属性编辑面板 - 可以编辑中间组件的属性以及其他功能<ul><li>元素属性，详细的在实现的时候在讨论</li><li>图层面板 隐藏显示 锁定解锁 拖动排序</li><li>背景设置</li></ul></li><li>顶部 - 保存，发布，预览和设置<ul><li>点击保存</li><li>点击预览 弹框<ul><li>左侧显示预览</li><li>右侧设置标题，描述和头图，</li></ul></li><li>发布 - 弹框<ul><li>左侧显示截图</li><li>右侧显示默认渠道，并且可以进行编辑</li></ul></li></ul></li><li>其他 - 不属于界面上的一些功能（定时保存 ，退出前提示等等）</li></ul><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><img src="/images/真实高质量低代码商业项目前端后端运维管理系统/技术选型.png" style="width: 90%;left: -4em;" alt=""/><h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><p>版本: v16.13.0</p><p>可以使用 nvm 进行切换 node 版本</p><p>nvm 网站：<a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><p>版本：v5.1.6</p><p>安装：<code>npm i typescript -g</code></p><p>编译：<code>tsc &lt;文件名.ts&gt;</code></p><h3 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">flag</span>: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="built_in">number</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">notSure</span>: <span class="built_in">any</span> = <span class="number">4</span> <span class="comment">// 任何类型</span></span><br><span class="line">notSure = <span class="string">&#x27;word&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="数组和元祖"><a href="#数组和元祖" class="headerlink" title="数组和元祖"></a>数组和元祖</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// 数字类型的数组，只能添加数字类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 元祖</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">1</span>, <span class="string">&#x27;2&#x27;</span>] <span class="comment">// 第一位为数字，第二位为字符串</span></span><br><span class="line"><span class="comment">// 但是在上面不能写超过 2 个，但可以通过 push 添加这两种类型，其他的不行</span></span><br><span class="line">arr2.<span class="title function_">push</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="interface-接口"><a href="#interface-接口" class="headerlink" title="interface 接口"></a>interface 接口</h3><ul><li>对对象的形状进行描述</li><li>Duck Typeing（鸭子类型）</li></ul><p>不会编译到 JS 中，只是在 TS 中类型检查</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">number</span> <span class="comment">// 只读属性</span></span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    age?: <span class="built_in">number</span> <span class="comment">// 可选属性</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">userInfo</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;ranup&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Function-函数"><a href="#Function-函数" class="headerlink" title="Function 函数"></a>Function 函数</h3><p>在 JS 中函数是一等公民</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span>, z?: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> z === <span class="string">&#x27;number&#x27;</span> ? a + b + z : a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数表达式</span></span><br><span class="line"><span class="keyword">const</span> add1 = (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>, z?: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> z === <span class="string">&#x27;number&#x27;</span> ? a + b + z : a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">sum1</span>: <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span>, z?: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = add</span><br><span class="line"><span class="comment">// 接口类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ISum</span> &#123;</span><br><span class="line">    (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>, z?: <span class="built_in">number</span>): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">sum2</span>: <span class="title class_">ISum</span> = add1</span><br></pre></td></tr></table></figure><h3 id="联合类型（union-type）"><a href="#联合类型（union-type）" class="headerlink" title="联合类型（union type）"></a>联合类型（union type）</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">numberOrString</span>: <span class="built_in">string</span> | <span class="built_in">number</span> = <span class="number">12</span></span><br><span class="line"><span class="comment">// 访问共有的属性或方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numberOrString.<span class="title function_">toString</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numberOrString.<span class="title function_">valueOf</span>())</span><br><span class="line"><span class="comment">// 字符长度是 string 的属性，那改怎么办呢？</span></span><br><span class="line"><span class="comment">// 方法1，类型断言</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLength</span>(<span class="params">value: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> str = value <span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">if</span> (str.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> str.<span class="property">length</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> num = value <span class="keyword">as</span> <span class="built_in">number</span></span><br><span class="line">        <span class="keyword">return</span> num.<span class="title function_">toString</span>().<span class="property">length</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法2，类型保护（type guard）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLength2</span>(<span class="params">value: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value.<span class="property">length</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value.<span class="title function_">toString</span>().<span class="property">length</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举（enum）"><a href="#枚举（enum）" class="headerlink" title="枚举（enum）"></a>枚举（enum）</h3><p>一系列常量</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 枚举成员赋值从0开始递增</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span>, <span class="comment">// 0</span></span><br><span class="line">    <span class="title class_">Down</span>, <span class="comment">// 1</span></span><br><span class="line">    <span class="title class_">Left</span>, <span class="comment">// 2</span></span><br><span class="line">    <span class="title class_">Right</span>, <span class="comment">// 3</span></span><br><span class="line">    custom = <span class="number">100</span>, <span class="comment">// 100</span></span><br><span class="line">    custom1 <span class="comment">// 101</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>[<span class="number">0</span>]) <span class="comment">// &#x27;Up</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串枚举，常量枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction1</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span> = <span class="string">&#x27;UP&#x27;</span>,</span><br><span class="line">    <span class="title class_">Down</span> = <span class="string">&#x27;DOWN&#x27;</span>,</span><br><span class="line">    <span class="title class_">Left</span> = <span class="string">&#x27;LEFT&#x27;</span>,</span><br><span class="line">    <span class="title class_">Right</span> = <span class="string">&#x27;RIGHT&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> value = <span class="string">&#x27;UP&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (value === <span class="title class_">Direction1</span>.<span class="property">Up</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;go up&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>泛型就是指在定义函数，接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> echoValue&lt;T&gt;(<span class="attr">value</span>: T): T &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">echoValue</span>(<span class="string">&#x27;str&#x27;</span>)</span><br><span class="line"><span class="title function_">echoValue</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="替换数组位置"><a href="#替换数组位置" class="headerlink" title="替换数组位置"></a>替换数组位置</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> changeArr&lt;T, U&gt;(<span class="attr">arr</span>: [T, U]): [U, T] &#123;</span><br><span class="line">    <span class="keyword">return</span> [arr[<span class="number">1</span>], arr[<span class="number">0</span>]]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">changeArr</span>([<span class="number">1</span>, <span class="string">&#x27;str&#x27;</span>])</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// [ &#x27;str&#x27;, 1 ]</span></span><br></pre></td></tr></table></figure><h4 id="约束泛型"><a href="#约束泛型" class="headerlink" title="约束泛型"></a>约束泛型</h4><h5 id="约束为数组"><a href="#约束为数组" class="headerlink" title="约束为数组"></a>约束为数组</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> echoWithArr&lt;T&gt;(<span class="attr">arr</span>: T[]): number &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">echoWithArr</span>([<span class="number">1</span>, <span class="string">&#x27;str&#x27;</span>])</span><br><span class="line"><span class="comment">// const res2 = echoWithArr(&#x27;str&#x27;) // 类型“string”的参数不能赋给类型“unknown[]”的参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h5 id="约束为包含-length"><a href="#约束为包含-length" class="headerlink" title="约束为包含 length"></a>约束为包含 length</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">IWithLength</span> &#123;</span><br><span class="line">    <span class="attr">length</span>: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> echoWithLength&lt;T <span class="keyword">extends</span> <span class="title class_">IWithLength</span>&gt; (<span class="attr">value</span>: T): number &#123;</span><br><span class="line">    <span class="keyword">return</span> value.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res1 = <span class="title function_">echoWithLength</span>([<span class="number">1</span>, <span class="string">&#x27;str&#x27;</span>])</span><br><span class="line"><span class="keyword">const</span> res2 = <span class="title function_">echoWithLength</span>(<span class="string">&#x27;str&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> res3 = <span class="title function_">echoWithLength</span>(&#123; <span class="attr">length</span>: <span class="number">10</span> &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res1, res2, res3) <span class="comment">// 2 3 10</span></span><br></pre></td></tr></table></figure><h5 id="约束类"><a href="#约束类" class="headerlink" title="约束类"></a>约束类</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>&lt;T&gt; &#123;</span><br><span class="line">    private <span class="attr">data</span>: T[] = []</span><br><span class="line">    <span class="title function_">push</span>(<span class="params">item:T</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">shift</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue1 = <span class="keyword">new</span> <span class="title class_">Queue</span>&lt;number&gt;()</span><br><span class="line"><span class="keyword">const</span> queue2 = <span class="keyword">new</span> <span class="title class_">Queue</span>&lt;string&gt;()</span><br><span class="line">queue1.<span class="title function_">push</span>(<span class="number">1</span>)</span><br><span class="line">queue2.<span class="title function_">push</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> res1 = queue1.<span class="title function_">pop</span>()</span><br><span class="line"><span class="keyword">const</span> res2 = queue2.<span class="title function_">pop</span>()</span><br><span class="line"><span class="keyword">if</span> (res1) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res1.<span class="title function_">toFixed</span>())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res2) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res2.<span class="property">length</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="约束-interface"><a href="#约束-interface" class="headerlink" title="约束 interface"></a>约束 interface</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">IObj</span>&lt;T, U&gt; &#123;</span><br><span class="line">    <span class="attr">key</span>: T</span><br><span class="line">    <span class="attr">value</span>: U</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">p1</span>: <span class="title class_">IObj</span>&lt;string, number&gt; = &#123; <span class="attr">key</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">value</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">p2</span>: <span class="title class_">IObj</span>&lt;number, string&gt; = &#123; <span class="attr">key</span>: <span class="number">20</span>, <span class="attr">value</span>: <span class="string">&#x27;lisi&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><h5 id="约束数组"><a href="#约束数组" class="headerlink" title="约束数组"></a>约束数组</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">arr1</span>: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr2</span>: <span class="title class_">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr3</span>: <span class="title class_">Array</span>&lt;string&gt; = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">num1</span>: <span class="function">(<span class="params">a: number, b: number</span>) =&gt;</span> number = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b</span><br><span class="line">type <span class="title class_">FunType</span> = <span class="function">(<span class="params">a: number, b: number</span>) =&gt;</span> number</span><br><span class="line"><span class="keyword">const</span> <span class="attr">num2</span>: <span class="title class_">FunType</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b</span><br></pre></td></tr></table></figure><h3 id="字符串字面量"><a href="#字符串字面量" class="headerlink" title="字符串字面量"></a>字符串字面量</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">str</span>: <span class="string">&#x27;zhangsan&#x27;</span> = <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line"></span><br><span class="line">type <span class="title class_">Directions</span> = <span class="string">&#x27;up&#x27;</span> | <span class="string">&#x27;down&#x27;</span> | <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">toWhere</span>: <span class="title class_">Directions</span> = <span class="string">&#x27;up&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">IName</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">&#125;</span><br><span class="line">type <span class="title class_">IPerson</span> = <span class="title class_">IName</span> &amp; &#123; <span class="attr">age</span>: number &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">IPerson</span> = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="技术选型-1"><a href="#技术选型-1" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li>Vue3</li><li>TypeScript</li><li>ESLint</li><li>Ant Design Vue</li><li>Vue Router</li><li>Vuex</li></ul><h2 id="项目生成"><a href="#项目生成" class="headerlink" title="项目生成"></a>项目生成</h2><p>使用 Imooc CLI 新建项目，视频作者封装的脚手架</p><p>不是针对某个前端框架的脚手架，而是一个大而全更加针对业务的脚手架</p><ul><li>支持各种模版, 可扩展性</li><li>云构建</li><li>预发布和正式发布</li><li>项目回滚</li><li>远程 Git 操作</li></ul><p>安装：<code>npm i @imooc-cli/core -g</code><br>需要依赖 npm：<code>npm i cnpm -g</code><br>创建项目：<code>imooc-cli init</code></p><p>项目会自动检测，如果在 .vue 文件中检测了 <code>let a = 1</code>，但在 .ts 文件中未检测</p><p>可以点击 ESLint 插件的设置按钮，选择它的 setting.json 文件，添加：<code>&quot;eslint.validate&quot;: [&quot;typescript&quot;]</code></p><p>ESLint 自动修复错误，方法：</p><ul><li>法1：VSCode 快捷键：<code>Ctrl + Shift + P</code>，弹出框中输入<code>ESLint:</code> 选择，<code>ESLint:Fix all auto-fixable Problems</code></li><li>法2：在 ESLint 插件设置中设置保存自动修正，代码：<code>&quot;editor.codeActionsOnSave&quot;: &#123;&quot;source.fixAll.eslint&quot;: true&#125;</code></li></ul><p><strong>perttier</strong></p><p>格式化代码：</p><ul><li>VSCode 快捷键：<code>Ctrl + Shift + P</code>，弹出框中输入<code>Format</code> 选择，<code>Format Document</code>（快捷键：Shift + Alt + F）</li></ul><h2 id="编写流程"><a href="#编写流程" class="headerlink" title="编写流程"></a>编写流程</h2><ol><li>使用 ImoocCli 搭建项目，配置 ESLint、Prettier<ol><li>通过在 .ts、.vue 文件中添加 <code>let a = 1</code> 来验证 ts 是否可以正常工作</li><li>随意修改代码后保存，看 prettier 的保存自动格式化是否生效</li></ol></li><li>安装 Ant-design-vue 编写 首页、拆分模版、单个模板页的整个页面 和 编辑页页面大致结构搭建</li><li>安装 Vue-router、编写路由，实现首页logo、首页模板、单个模板等页的跳转逻辑</li><li>编写 meta，实现根据 meta 显示不同的页面信息（是否有 header、footer）<ul><li>法1：路由均为一级路由，使用 meta 的方式来进行判断</li><li>法2：将 index 设为一级路由，home 和 templateDetail 页面设置为其的子路由。</li></ul></li><li>安装 Vuex，完成：登录、登出 功能，使用 Module 分割 user 和 template 的数据。</li><li>业务组件 LText 编写。业务组件属性和表单组件的显示和实时更新。支持vNode的在 vue template 中显示。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;架构师课程笔记&quot;&gt;&lt;a href=&quot;#架构师课程笔记&quot; class=&quot;headerlink&quot; title=&quot;架构师课程笔记&quot;&gt;&lt;/a&gt;架构师课程笔记&lt;/h2&gt;&lt;h2 id=&quot;需求分析&quot;&gt;&lt;a href=&quot;#需求分析&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="项目流程记录" scheme="http://ran-up.github.io/categories/%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="项目流程记录" scheme="http://ran-up.github.io/tags/%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>如果视频作者当面试官会问</title>
    <link href="http://ran-up.github.io/2024/12/27/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/%E5%A6%82%E6%9E%9C%E8%A7%86%E9%A2%91%E4%BD%9C%E8%80%85%E5%BD%93%E9%9D%A2%E8%AF%95%E5%AE%98%E4%BC%9A%E9%97%AE/"/>
    <id>http://ran-up.github.io/2024/12/27/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/%E5%A6%82%E6%9E%9C%E8%A7%86%E9%A2%91%E4%BD%9C%E8%80%85%E5%BD%93%E9%9D%A2%E8%AF%95%E5%AE%98%E4%BC%9A%E9%97%AE/</id>
    <published>2024-12-27T13:10:20.000Z</published>
    <updated>2024-12-27T17:43:26.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><h3 id="什么是单线程，和异步有什么关系"><a href="#什么是单线程，和异步有什么关系" class="headerlink" title="什么是单线程，和异步有什么关系"></a>什么是单线程，和异步有什么关系</h3><ul><li><p>单线程，只有一个线程，同一时间只能做一件事，两段 JS 代码不能同时执行</p></li><li><p>原因，避免 DOM 渲染的冲突</p><ul><li>浏览器需要渲染 DOM</li><li>JS 可以修改 DOM 结构</li><li>JS 执行的时候，浏览器 DOM 渲染会暂停</li><li>两段 JS 也不能同时执行（都修改 DOM 就冲突了）</li><li>webworker 支持多线程，但是不能访问 DOM</li></ul></li><li><p>解决单线程方法：异步</p><ul><li>问题一：没按照书写方式执行，可读性差</li><li>问题二：callback 中不容易模块化</li></ul></li></ul><h3 id="什么是-event-loop"><a href="#什么是-event-loop" class="headerlink" title="什么是 event-loop"></a>什么是 event-loop</h3><ul><li>事件轮询，JS 实现异步的具体解决方案</li><li>同步代码，直接执行</li><li>异步函数先放在 异步队列 中</li><li>待同步函数执行完毕，轮询执行 异步队列 的函数</li></ul><h3 id="是否用过-jQuery-的-Deferred"><a href="#是否用过-jQuery-的-Deferred" class="headerlink" title="是否用过 jQuery 的 Deferred"></a>是否用过 jQuery 的 Deferred</h3><p>Deferred 延迟</p><h4 id="jQuery-1-5-之前"><a href="#jQuery-1-5-之前" class="headerlink" title="jQuery 1.5 之前"></a>jQuery 1.5 之前</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改开发扩展封闭</span></span><br><span class="line"><span class="keyword">const</span> ajax = $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;data.js&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ajax) <span class="comment">// 返回 XHR 对象</span></span><br><span class="line"><span class="comment">// success</span></span><br></pre></td></tr></table></figure><h4 id="jQuery-1-5-及之后"><a href="#jQuery-1-5-及之后" class="headerlink" title="jQuery 1.5 及之后"></a>jQuery 1.5 及之后</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ajax = $.<span class="title function_">ajax</span>(<span class="string">&#x27;data.js&#x27;</span>)</span><br><span class="line">ajax.<span class="title function_">done</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success1&#x27;</span>))</span><br><span class="line">.<span class="title function_">fail</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>))</span><br><span class="line">.<span class="title function_">done</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success2&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ajax); <span class="comment">// 返回 deferred 对象</span></span><br><span class="line"><span class="comment">// success1 success2</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 很像 Promise 的写法 -- 扩展开发修改封闭</span></span><br><span class="line"><span class="keyword">const</span> ajax = $.<span class="title function_">ajax</span>(<span class="string">&#x27;data.js&#x27;</span>)</span><br><span class="line">ajax.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success1&#x27;</span>)</span><br><span class="line">&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error1&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success2&#x27;</span>)</span><br><span class="line">&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ajax)</span><br><span class="line"><span class="comment">// success1 success2</span></span><br></pre></td></tr></table></figure><h4 id="jQuery-1-5-的变化"><a href="#jQuery-1-5-的变化" class="headerlink" title="jQuery 1.5 的变化"></a>jQuery 1.5 的变化</h4><ul><li>无法改变 JS 异步和单线程的本质</li><li>只能从写法上杜绝 callback 这种形式</li><li>它只是一种语法糖形式，但是解耦了代码</li><li>很好的体现：开放封闭原则</li></ul><h4 id="使用-jQuery-Deferred"><a href="#使用-jQuery-Deferred" class="headerlink" title="使用 jQuery Deferred"></a>使用 jQuery Deferred</h4><h5 id="不使用"><a href="#不使用" class="headerlink" title="不使用"></a>不使用</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">wait</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">task</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;task success&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">setTimeout</span>(task, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">wait</span>()</span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p><strong>成功</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">waitHandler</span> ()&#123;</span><br><span class="line">    <span class="keyword">const</span> dtd = $.<span class="title class_">Deferred</span>()</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">wait</span> = (<span class="params">dtd</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">task</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;task success&#x27;</span>)</span><br><span class="line">            dtd.<span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>) <span class="comment">// 成功</span></span><br><span class="line">            <span class="comment">// dtd.reject(&#x27;fail&#x27;) // 失败</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">setTimeout</span>(task, <span class="number">2000</span>)</span><br><span class="line">        <span class="keyword">return</span> dtd</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">wait</span>(dtd)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> w = <span class="title function_">waitHandler</span>()</span><br><span class="line">w.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;suc1&#x27;</span>)            </span><br><span class="line">&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err1&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;suc2&#x27;</span>)</span><br><span class="line">&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">task success</span></span><br><span class="line"><span class="comment">ok</span></span><br><span class="line"><span class="comment">suc1</span></span><br><span class="line"><span class="comment">suc2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>失败</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">waitHandler</span> ()&#123;</span><br><span class="line">    <span class="keyword">const</span> dtd = $.<span class="title class_">Deferred</span>()</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">wait</span> = (<span class="params">dtd</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">task</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;task fial&#x27;</span>)</span><br><span class="line">            <span class="comment">// dtd.resolve(&#x27;ok&#x27;) // 成功</span></span><br><span class="line">            dtd.<span class="title function_">reject</span>(<span class="string">&#x27;fail&#x27;</span>) <span class="comment">// 失败</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">setTimeout</span>(task, <span class="number">2000</span>)</span><br><span class="line">        <span class="keyword">return</span> dtd</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">wait</span>(dtd)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> w = <span class="title function_">waitHandler</span>()</span><br><span class="line">w.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;suc1&#x27;</span>)            </span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">w.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;suc2&#x27;</span>)            </span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">w.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;suc3&#x27;</span>)            </span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err3&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">task fial</span></span><br><span class="line"><span class="comment">fail</span></span><br><span class="line"><span class="comment">err1</span></span><br><span class="line"><span class="comment">fail</span></span><br><span class="line"><span class="comment">err2</span></span><br><span class="line"><span class="comment">fail</span></span><br><span class="line"><span class="comment">err3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>但在 <code>const w = waitHandler()</code> 可以直接调用 w.reject() 会导致后面的结果出现偏差</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">waitHandler</span> ()&#123;</span><br><span class="line">    <span class="keyword">const</span> dtd = $.<span class="title class_">Deferred</span>()</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">wait</span> = (<span class="params">dtd</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">task</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;task fial&#x27;</span>)</span><br><span class="line">            dtd.<span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>) <span class="comment">// 成功</span></span><br><span class="line">            <span class="comment">// dtd.reject(&#x27;fail&#x27;) // 失败</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">setTimeout</span>(task, <span class="number">2000</span>)</span><br><span class="line">        <span class="keyword">return</span> dtd.<span class="title function_">promise</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">wait</span>(dtd)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> w = <span class="title function_">waitHandler</span>() <span class="comment">// 返回 promise 对象</span></span><br><span class="line"><span class="comment">// w.reject() // w.reject is not a function</span></span><br><span class="line">w.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;suc1&#x27;</span>)            </span><br><span class="line">&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Promise-的基本使用和原理"><a href="#Promise-的基本使用和原理" class="headerlink" title="Promise 的基本使用和原理"></a>Promise 的基本使用和原理</h3><h4 id="加载一张图片"><a href="#加载一张图片" class="headerlink" title="加载一张图片"></a>加载一张图片</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadImg</span>(<span class="params">src</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">        img.<span class="property">src</span> = src</span><br><span class="line">        img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(img)</span><br><span class="line">        &#125;</span><br><span class="line">        img.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;图片加载失败&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> img1 = <span class="title function_">loadImg</span>(<span class="string">&#x27;./allpage.jpg&#x27;</span>)</span><br><span class="line">img1.<span class="title function_">then</span>(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img.<span class="property">width</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="加载第一张后再加载第二张"><a href="#加载第一张后再加载第二张" class="headerlink" title="加载第一张后再加载第二张"></a>加载第一张后再加载第二张</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadImg</span>(<span class="params">src</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">        img.<span class="property">src</span> = src</span><br><span class="line">        img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(img)</span><br><span class="line">        &#125;</span><br><span class="line">        img.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;图片加载失败&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> img1 = <span class="title function_">loadImg</span>(<span class="string">&#x27;./allpage.jpg&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> img2 = <span class="title function_">loadImg</span>(<span class="string">&#x27;./bird.gif&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="普通"><a href="#普通" class="headerlink" title="普通"></a>普通</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">img1.<span class="title function_">then</span>(<span class="function"><span class="params">img1</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img1)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img1.<span class="property">width</span>)</span><br><span class="line">    <span class="keyword">return</span> img2</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">img2</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img2)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img2.<span class="property">width</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="使用-Promise-all"><a href="#使用-Promise-all" class="headerlink" title="使用 Promise.all()"></a>使用 Promise.all()</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([img1, img2]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res[<span class="number">0</span>])</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res[<span class="number">0</span>].<span class="property">width</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res[<span class="number">1</span>])</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res[<span class="number">1</span>].<span class="property">width</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="使用-await-x2F-async"><a href="#使用-await-x2F-async" class="headerlink" title="使用 await&#x2F;async"></a>使用 await&#x2F;async</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadImg</span>(<span class="params">src</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">        img.<span class="property">src</span> = src</span><br><span class="line">        img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(img)</span><br><span class="line">        &#125;</span><br><span class="line">        img.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;图片加载失败&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createImg</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> img1 = <span class="keyword">await</span> <span class="title function_">loadImg</span>(<span class="string">&#x27;./allpage.jpg&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> img2 = <span class="keyword">await</span> <span class="title function_">loadImg</span>(<span class="string">&#x27;./bird.gif&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img1)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img1.<span class="property">width</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img2)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(img2.<span class="property">width</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">createImg</span>()</span><br></pre></td></tr></table></figure><h3 id="介绍一下-async-x2F-await（和-Promise-的区别、联系）"><a href="#介绍一下-async-x2F-await（和-Promise-的区别、联系）" class="headerlink" title="介绍一下 async&#x2F;await（和 Promise 的区别、联系）"></a>介绍一下 async&#x2F;await（和 Promise 的区别、联系）</h3><ul><li>不是取代 Promise 的，而是对 Promise 的补充</li><li>使用了 Promise，并乜有和 Promise 冲突</li><li>使用 await，函数必须用 async 标识</li><li>await 后面跟的是一个 Promise 实例</li><li>完全是同步的写法，再也没有回调函数</li><li>但是：改变不了 JS 单线程、异步的本质</li></ul><h3 id="总结一下当前-JS-解决异步的方案"><a href="#总结一下当前-JS-解决异步的方案" class="headerlink" title="总结一下当前 JS 解决异步的方案"></a>总结一下当前 JS 解决异步的方案</h3><ul><li>jQuery deferred</li><li>Promise</li><li>async&#x2F;await</li><li>Generator<ul><li>不是异步的直接替代方式</li></ul></li></ul><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><h3 id="说一个原型的实际应用"><a href="#说一个原型的实际应用" class="headerlink" title="说一个原型的实际应用"></a>说一个原型的实际应用</h3><ul><li>描述 jquery 如何使用原型</li><li>描述 zepto 如何使用原型</li><li>结合自己的开发经验，其中使用的原型</li></ul><h3 id="原型如何体现它的扩展性"><a href="#原型如何体现它的扩展性" class="headerlink" title="原型如何体现它的扩展性"></a>原型如何体现它的扩展性</h3><ul><li>说一下 jquery 和 zepto 的插件机制</li><li>结合自己的开发经验，做过的基于原型的插件</li></ul><h2 id="vdom、虚拟-dom、virtual-dom"><a href="#vdom、虚拟-dom、virtual-dom" class="headerlink" title="vdom、虚拟 dom、virtual dom"></a>vdom、虚拟 dom、virtual dom</h2><ul><li>vdom 是 vue 和 react 的核心</li><li>如果面试问道 vue 和 react 和实现，免不了问 vdom</li></ul><h3 id="vdom-是什么？为何会存在（为何使用）-vdom？"><a href="#vdom-是什么？为何会存在（为何使用）-vdom？" class="headerlink" title="vdom 是什么？为何会存在（为何使用） vdom？"></a>vdom 是什么？为何会存在（为何使用） vdom？</h3><ul><li><p>虚拟 DOM</p></li><li><p>用 JS 模拟 DOM 结构</p></li><li><p>DOM 变化的对比，放在JS 层来做（图灵完备语言）</p></li><li><p>提高重绘性能</p></li><li><p>DOM 操作是“昂贵”的，JS 运行效率高</p></li><li><p>劲量减少 DOM 操作，而不是“推到重来”</p></li><li><p>项目越复杂，影响就越复杂</p></li><li><p>vdom 可以解决</p></li></ul><h3 id="vdom-如何应用，核心-API-是什么"><a href="#vdom-如何应用，核心-API-是什么" class="headerlink" title="vdom 如何应用，核心 API 是什么"></a>vdom 如何应用，核心 API 是什么</h3><ul><li>如何使用？可用 snabbdom 库的用法举例</li><li>核心 API：h 函数、patch 函数</li><li>vdom-snabbdom 使用 vdom 实现的一个库</li><li>h(‘&lt;标签名&gt;’, {…属性…}, […子元素…]) –&gt; 有很多子元素</li><li>h(‘&lt;标签名&gt;’, {…属性…}, ‘…’) –&gt; 只有一个文本节点的子元素</li><li>patch(container, vnode) –&gt; 将 节点 添加到容器中，初次渲染</li><li>patch(vnode, newVnode) –&gt; 新旧节点对比，将需改的内容添加，再次渲染</li></ul><h3 id="介绍一下-diff-算法"><a href="#介绍一下-diff-算法" class="headerlink" title="介绍一下 diff 算法"></a>介绍一下 diff 算法</h3><ul><li>什么是 diff 算法</li><li>去繁就简<ul><li>diff 算法非常复杂，实现难度很大，源码量很大</li><li>去繁就简，讲明白核心流程，不关心细节，</li><li>2、8原则：</li><li>学习的东西太多了，现在不能一行一行的学习，根据目录去查找自己需要补充的重点，然后纤细去看那部分，余下部分过一遍就行。</li><li>面试官也大部分不清楚细节，但是很关心核心流程</li></ul></li><li>vdom 为何用 diff 算法<ul><li>DOM 操作是“昂贵”的，因此劲量减少 DOM 操作</li><li>找出本次 DOM 必须更新的节点来更新，其他的不更新</li><li>这个“找出”的过程，就需要 diff 算法</li><li>vdom 中应用 diff 算法是为了找出需要更新的节点</li></ul></li><li>diff 算法的实现流程</li></ul><h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><p>看视频、看博客、看文章都属于看源码，并不是非要去看代码才算看源码</p><h3 id="说一下使用-jQuery-和使用框架的区别（vue、react）"><a href="#说一下使用-jQuery-和使用框架的区别（vue、react）" class="headerlink" title="说一下使用 jQuery 和使用框架的区别（vue、react）"></a>说一下使用 jQuery 和使用框架的区别（vue、react）</h3><p>代码演示、使用总结</p><ul><li><p>数据与视图的分离，解耦（开放封闭原则）</p></li><li><p>以数据驱动视图，只关心数据变化，DOM 操作被封装</p></li></ul><h3 id="说一下对-MVVM-的理解"><a href="#说一下对-MVVM-的理解" class="headerlink" title="说一下对 MVVM 的理解"></a>说一下对 MVVM 的理解</h3><p>先讲 MVM 再讲 MVVM</p><p>MVC：</p><ul><li>Model（数据）、View（视图、界面）、Controller（控制器、逻辑处理）</li><li>用户 –&gt; View –&gt; Controller –&gt; Model（View 发生变化出发 Conatroller，Controller 修改 Model，Model 导致 View 更新）</li><li>用户 –&gt; Controller –&gt; Model –&gt; View</li></ul><p>MVVM</p><ul><li>Model（模型、数据）、View（视图、模板）、ViewModel（桥梁，连接 Model 和 View）</li><li>视图和模型是分离的</li><li>MVVM 不算一种创新，是在 MVC 上的一种微创新</li><li>但其中的 ViewModel 确是一种创新</li><li>真正结合前端场景应用的创建</li></ul><h3 id="MVVM-框架的三要素"><a href="#MVVM-框架的三要素" class="headerlink" title="MVVM 框架的三要素"></a>MVVM 框架的三要素</h3><h4 id="响应式：vue-如何监听到-data-的每个属性变化？"><a href="#响应式：vue-如何监听到-data-的每个属性变化？" class="headerlink" title="响应式：vue 如何监听到 data 的每个属性变化？"></a>响应式：vue 如何监听到 data 的每个属性变化？</h4><h4 id="模板引擎：vue-的模板如何被解析，指令如何处理？"><a href="#模板引擎：vue-的模板如何被解析，指令如何处理？" class="headerlink" title="模板引擎：vue 的模板如何被解析，指令如何处理？"></a>模板引擎：vue 的模板如何被解析，指令如何处理？</h4><h4 id="渲染：vue-的模板如何被渲染成-html？以及渲染过程"><a href="#渲染：vue-的模板如何被渲染成-html？以及渲染过程" class="headerlink" title="渲染：vue 的模板如何被渲染成 html？以及渲染过程"></a>渲染：vue 的模板如何被渲染成 html？以及渲染过程</h4><h3 id="vue-中如何实现响应式？"><a href="#vue-中如何实现响应式？" class="headerlink" title="vue 中如何实现响应式？"></a>vue 中如何实现响应式？</h3><ul><li>关键是理解 Object.defineProperty</li><li>讲一下 data 的属性代理到 vm 上</li></ul><h4 id="什么是响应式？"><a href="#什么是响应式？" class="headerlink" title="什么是响应式？"></a>什么是响应式？</h4><ul><li>修改 data 属性后，vue 立刻监听到</li><li>data 属性被代理到 vm 上</li></ul><h4 id="Object-defineProperty-如何使用？在-vue-中如何使用？"><a href="#Object-defineProperty-如何使用？在-vue-中如何使用？" class="headerlink" title="Object.defineProperty() 如何使用？在 vue 中如何使用？"></a>Object.defineProperty() 如何使用？在 vue 中如何使用？</h4><h4 id="模拟、演示"><a href="#模拟、演示" class="headerlink" title="模拟、演示"></a>模拟、演示</h4><h3 id="vue-中如何解析模版？"><a href="#vue-中如何解析模版？" class="headerlink" title="vue 中如何解析模版？"></a>vue 中如何解析模版？</h3><ul><li><p>模版是什么</p><ul><li><p>模版最终必须转化为 JS 代码，因为：</p></li><li><p>有逻辑（v-if v-for），必须用 JS 才能实现（图灵完备）</p></li><li><p>转换为 html 渲染页面，必须用 JS 才能实习</p></li><li><p>因此，模板后需要转换成一个 JS 函数（render 函数，渲染函数）</p></li><li><p>模板：字符串，有逻辑，嵌入 JS 变量…</p></li><li><p>模板必须转换为 JS 代码（有逻辑、渲染 html、JS 变量）</p></li></ul></li><li><p>with 的用法（劲量不要用，render 函数用到了，会给开发调试带来很大的成本）</p></li><li><p>读一读《js语言精粹》美国比较牛的js程序员写的，js创始人，有价值，有干货</p></li><li><p>render 函数</p><ul><li>哪里可以看到 render 函数？– 在 vue.js 源码中搜索 render，在 code.render 中可以看到</li><li>render 函数是什么样子的？</li><li>v-if v-for v-on 都是怎么处理的？</li><li>vm._c是什么？render 函数返回了什么？</li><li>render 函数执行返回 vnode</li></ul></li><li><p>render 函数与 vdom</p></li><li><p>如何解析模版</p></li></ul><h3 id="vue-的整个实现流程"><a href="#vue-的整个实现流程" class="headerlink" title="vue 的整个实现流程"></a>vue 的整个实现流程</h3><ol><li>解析模板成 render 函数<ul><li>模板中的所有信息都被 render 函数包含</li><li>模板中用到的 data 中的属性，都变成了 JS 变量</li><li>模板中的 v-model v-for  v-on 都变成了 JS 逻辑</li><li>render 函数返回 vnode</li></ul></li><li>响应式开始监听<ul><li>使用 Object.defineProperty()</li><li>将 data 的属性代理到 vm 上</li></ul></li><li>首次渲染，显示页面，且绑定依赖<ul><li>初次渲染，执行 updateComponent，执行vm._render()</li><li>执行 render 函数，会访问到 vm.list 和 vm.title</li><li>会被响应式的 get 方法监听到</li><li>执行 updateComponent，会走到 vdom 的 patch 方法</li><li>patch 将 vnode 渲染成 DOM，初次渲染完成</li><li>为何要监听 get，直接监听 set 不行吗？</li><li>data 中有很多属性，有些被用到，有些可能不被用到</li><li>被用到的会走 get，不被用到的不会走到 get</li><li>未走到 get 中的属性，set 的时候我们也无需关心</li></ul></li><li>data 属性变化，触发 rerender<ul><li>修改属性，被响应式的 set 监听到</li><li>set 执行 updateComponent</li><li>updateComponent 重新执行 vm.render()</li><li>生成的 vnode 和 preVnode，通过 patch 进行对比</li><li>渲染到 html 中</li></ul></li></ol><h2 id="hybrid"><a href="#hybrid" class="headerlink" title="hybrid"></a>hybrid</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;异步&quot;&gt;&lt;a href=&quot;#异步&quot; class=&quot;headerlink&quot; title=&quot;异步&quot;&gt;&lt;/a&gt;异步&lt;/h2&gt;&lt;h3 id=&quot;什么是单线程，和异步有什么关系&quot;&gt;&lt;a href=&quot;#什么是单线程，和异步有什么关系&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="前端面试集锦" scheme="http://ran-up.github.io/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
    
    <category term="面试" scheme="http://ran-up.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>杂记.md</title>
    <link href="http://ran-up.github.io/2024/06/28/%E6%9D%82%E8%AE%B0/"/>
    <id>http://ran-up.github.io/2024/06/28/%E6%9D%82%E8%AE%B0/</id>
    <published>2024-06-28T13:53:48.000Z</published>
    <updated>2024-12-27T17:38:35.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="new-Date-getTime-和-Date-now-区别"><a href="#new-Date-getTime-和-Date-now-区别" class="headerlink" title="new Date().getTime() 和 Date.now() 区别"></a>new Date().getTime() 和 Date.now() 区别</h2><p>同：这两个方法都是获取当前的时间戳。<br>区别：</p><ol><li>new Date().getTime() 会先创建一个 Date 对象，之后再调用 getTime() 方法返回当前时间戳。</li><li>Date.now() 直接返回当前时间戳，耗时短。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;new-Date-getTime-和-Date-now-区别&quot;&gt;&lt;a href=&quot;#new-Date-getTime-和-Date-now-区别&quot; class=&quot;headerlink&quot; title=&quot;new Date().getTime() 和 Date.now(</summary>
      
    
    
    
    
    <category term="杂糅" scheme="http://ran-up.github.io/tags/%E6%9D%82%E7%B3%85/"/>
    
  </entry>
  
  <entry>
    <title>ssh: connect to host github.com port 22: Connection timed out</title>
    <link href="http://ran-up.github.io/2024/01/18/git%E7%9B%B8%E5%85%B3/ssh-connect-to-host-github-com-port-22-Connection-timed-out/"/>
    <id>http://ran-up.github.io/2024/01/18/git%E7%9B%B8%E5%85%B3/ssh-connect-to-host-github-com-port-22-Connection-timed-out/</id>
    <published>2024-01-18T15:16:21.000Z</published>
    <updated>2024-12-27T17:38:35.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>今天 <code>git push</code> 或 <code>git clone</code> 到 github 中总是报：<code>ssh: connect to host github.com port 22: Connection timed out</code>。</p><p>找了很久，比如更换为 HTTPS 或 HTTP、重新添加 ssh 文件信息、重新生成 ssh信息，还有什么在 host 文件<code>C:\Windows\System32\drivers\etc\hosts</code>中手动配置GitHub域名映射，在文件末尾处增加一行 <code>140.82.113.4 github.com</code>等。</p><p>最终明白问题是 22 端口被占用，需要重新建 config 文件来新指定端口，博客：<a href="https://blog.csdn.net/qq_46123200/article/details/134392486">https://blog.csdn.net/qq_46123200/article/details/134392486</a></p><p>我这里把最终的操作写出来，后面自己遇到了方便查找。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>本博客引用的是【fruge】博客的内容，相应博客地址：<a href="https://blog.csdn.net/qq_46123200/article/details/134392486%E3%80%82">https://blog.csdn.net/qq_46123200/article/details/134392486。</a></p><p>最终方法：</p><p>在文件目录： <code>C:\Users\26589\.ssh</code> 新建 <code>config</code> 文件。</p><p>起初创建可以为 <code>config.txt</code> 文件，当把下面的内容复制好后，保存退出，修改文件名，删掉后缀<code>.txt</code>。</p><p>这里是将 github 和 gitlab 的连接端口均改为了 443 端口。</p><p><code>~/.ssh/id_rsa</code> 是你自己的文件路径</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Host</span> github.<span class="property">com</span></span><br><span class="line"><span class="title class_">User</span> git</span><br><span class="line"><span class="title class_">Hostname</span> ssh.<span class="property">github</span>.<span class="property">com</span></span><br><span class="line"><span class="title class_">PreferredAuthentications</span> publickey</span><br><span class="line"><span class="title class_">IdentityFile</span> ~<span class="regexp">/.ssh/i</span>d_rsa</span><br><span class="line"><span class="title class_">Port</span> <span class="number">443</span></span><br><span class="line"> </span><br><span class="line"><span class="title class_">Host</span> gitlab.<span class="property">com</span></span><br><span class="line"><span class="title class_">Hostname</span> altssh.<span class="property">gitlab</span>.<span class="property">com</span></span><br><span class="line"><span class="title class_">User</span> git</span><br><span class="line"><span class="title class_">Port</span> <span class="number">443</span></span><br><span class="line"><span class="title class_">PreferredAuthentications</span> publickey</span><br><span class="line"><span class="title class_">IdentityFile</span> ~<span class="regexp">/.ssh/i</span>d_rsa</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若设置有效，测试通过如下：输入<code>ssh -T git@github.com</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.<span class="property">com</span></span><br><span class="line"><span class="title class_">Hi</span> <span class="variable constant_">DJCKING</span>! <span class="title class_">You</span><span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>最后别忘记去 <code>~/.ssh/id_rsa.pub</code> 中把内容粘贴到 gitee 和 github 的 ssh 中。</p><h2 id="新生成-ssh"><a href="#新生成-ssh" class="headerlink" title="新生成 ssh"></a>新生成 ssh</h2><p>输入：<code>ssh-keygen -t rsa -C &quot;3xxxx73@qq.com&quot;</code> 其中的 “<a href="mailto:&#x33;&#120;&#120;&#120;&#x78;&#55;&#x33;&#64;&#113;&#113;&#46;&#x63;&#111;&#109;">&#x33;&#120;&#120;&#120;&#x78;&#55;&#x33;&#64;&#113;&#113;&#46;&#x63;&#111;&#109;</a>“ 是你在 gitee 或 github 中的邮箱。之后一直回车（Enter）即可。</p><p>检测：<code>ssh -v git@github.com</code>、<code>ssh -v git@gitee.com</code>，只要有 successfully 字样就表示成功了。</p><p>如果报：<code>ssh: connect to host github.com port 22: Connection timed out</code> 就是上面的解决方案了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;今天 &lt;code&gt;git push&lt;/code&gt; 或 &lt;code&gt;git clone&lt;/code&gt; 到 github 中总是报：&lt;code&gt;</summary>
      
    
    
    
    <category term="git相关" scheme="http://ran-up.github.io/categories/git%E7%9B%B8%E5%85%B3/"/>
    
    
    <category term="git报错" scheme="http://ran-up.github.io/tags/git%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>动态修改swiper的slidesPerView属性，自动轮播有问题</title>
    <link href="http://ran-up.github.io/2023/07/05/%E9%A1%B9%E7%9B%AEbug/%E4%BD%BF%E7%94%A8swiper%E5%87%BA%E7%8E%B0%E7%9A%84bug/%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9swiper%E7%9A%84slidesPerView%E5%B1%9E%E6%80%A7%EF%BC%8C%E8%87%AA%E5%8A%A8%E8%BD%AE%E6%92%AD%E6%9C%89%E9%97%AE%E9%A2%98/"/>
    <id>http://ran-up.github.io/2023/07/05/%E9%A1%B9%E7%9B%AEbug/%E4%BD%BF%E7%94%A8swiper%E5%87%BA%E7%8E%B0%E7%9A%84bug/%E5%8A%A8%E6%80%81%E4%BF%AE%E6%94%B9swiper%E7%9A%84slidesPerView%E5%B1%9E%E6%80%A7%EF%BC%8C%E8%87%AA%E5%8A%A8%E8%BD%AE%E6%92%AD%E6%9C%89%E9%97%AE%E9%A2%98/</id>
    <published>2023-07-05T08:52:21.000Z</published>
    <updated>2024-12-27T17:38:35.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们有个需求，就是需要动态的设置 swiper 中显示的 个数。</p><p>本以为直接赋予动态值就可以了，结果修改了之后，自动轮播有些问题。</p><img src="/images/项目bug/使用swiper出现的bug/动态修改swiper的slidesPerView属性，自动轮播有问题/swiper使用动态数据，自动轮播失效.gif" alt=""><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol><li>给 swiper 配置中新增两个属性：</li></ol><ul><li>observer: true, &#x2F;&#x2F; 修改 swiper 自己或子元素时，自动初始化 swiper 默认为 false</li><li>observeParents: false &#x2F;&#x2F; 修改 swiper 的父元素时，自动初始化 swiper</li></ul><ol start="2"><li>修改 swiper 配置中的一个属性：</li></ol><ul><li>slidesPerView: this.judgeInfoData.loopJudgeNumber &#x2F;&#x2F; 让其使用动态数据</li></ul><ol start="3"><li>最后就是进行动态数据的操作了，在数据进行改变的地方，调用如下的方法(swiper 内置的方法)</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">judgeSwiper.<span class="title function_">destroy</span>()</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">_initJudgeSwiper</span>()</span><br></pre></td></tr></table></figure><blockquote><p>解释一下</p></blockquote><ul><li>judgeSwiper: 这是我的swiper名</li><li>judgeSwiper.destroy(): 销毁这个 swiper</li><li>this._initJudgeSwiper(): 重新初始化 swiper</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;swiper-container judge-swiper swiper-no-swiping swiper-container-setting&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in judgeDataList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;judge-box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line no-unused-vars</span></span><br><span class="line"><span class="keyword">let</span> judgeSwiper</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        _initJudgeSwiper () &#123;</span><br><span class="line">            <span class="comment">// eslint-disable-next-line no-new</span></span><br><span class="line">            judgeSwiper = <span class="keyword">new</span> <span class="title class_">Swiper</span>(<span class="string">&#x27;.judge-swiper&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">loop</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">autoplay</span>: &#123;</span><br><span class="line">                    <span class="attr">delay</span>: <span class="number">2000</span>,</span><br><span class="line">                    <span class="attr">disableOnInteraction</span>: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">speed</span>: <span class="number">3000</span>,</span><br><span class="line">                <span class="comment">// slidesPerView: 4,</span></span><br><span class="line">                <span class="attr">slidesPerView</span>: <span class="variable language_">this</span>.<span class="property">judgeInfoData</span>.<span class="property">loopJudgeNumber</span>,</span><br><span class="line">                <span class="attr">spaceBetween</span>: <span class="number">40</span>,</span><br><span class="line">                <span class="attr">preloadImages</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">observer</span>: <span class="literal">true</span>, <span class="comment">// 修改 swiper 自己或子元素时，自动初始化 swiper 默认为 false</span></span><br><span class="line">                <span class="attr">observeParents</span>: <span class="literal">false</span> <span class="comment">// 修改 swiper 的父元素时，自动初始化 swiper</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        changeLoopJudgeNumberHandler () &#123;</span><br><span class="line">            <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                judgeSwiper.<span class="title function_">destroy</span>()</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">_initJudgeSwiper</span>()</span><br><span class="line">                <span class="comment">// judgeSwiper.init()</span></span><br><span class="line">                <span class="comment">// judgeSwiper.params.slidesPerView = this.judgeInfoData.loopJudgeNumber</span></span><br><span class="line">                <span class="comment">// judgeSwiper.update()</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;我们有个需求，就是需要动态的设置 swiper 中显示的 个数。&lt;/p&gt;
&lt;p&gt;本以为直接赋予动态值就可以了，结果修改了之后，自动轮播有些问</summary>
      
    
    
    
    <category term="使用swiper出现的bug" scheme="http://ran-up.github.io/categories/%E4%BD%BF%E7%94%A8swiper%E5%87%BA%E7%8E%B0%E7%9A%84bug/"/>
    
    
    <category term="项目bug" scheme="http://ran-up.github.io/tags/%E9%A1%B9%E7%9B%AEbug/"/>
    
  </entry>
  
  <entry>
    <title>不同tab切换，内部的swiper自动轮播失效</title>
    <link href="http://ran-up.github.io/2023/07/05/%E9%A1%B9%E7%9B%AEbug/%E4%BD%BF%E7%94%A8swiper%E5%87%BA%E7%8E%B0%E7%9A%84bug/%E4%B8%8D%E5%90%8Ctab%E5%88%87%E6%8D%A2%EF%BC%8C%E5%86%85%E9%83%A8%E7%9A%84swiper%E8%87%AA%E5%8A%A8%E8%BD%AE%E6%92%AD%E5%A4%B1%E6%95%88/"/>
    <id>http://ran-up.github.io/2023/07/05/%E9%A1%B9%E7%9B%AEbug/%E4%BD%BF%E7%94%A8swiper%E5%87%BA%E7%8E%B0%E7%9A%84bug/%E4%B8%8D%E5%90%8Ctab%E5%88%87%E6%8D%A2%EF%BC%8C%E5%86%85%E9%83%A8%E7%9A%84swiper%E8%87%AA%E5%8A%A8%E8%BD%AE%E6%92%AD%E5%A4%B1%E6%95%88/</id>
    <published>2023-07-05T08:12:52.000Z</published>
    <updated>2024-12-27T17:38:35.773Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们有个需求，就是不同功能中都有轮播，然后使用的是 swiper。</p><p>也就是切换 tab 标签，内部的 swiper 变开始自动轮播。</p><p>现在遇到的问题是：初始进来的那个 tab 的 swiper 能自动轮播，但切换了 tab 就不能轮播了。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>然后我就查询度娘，找到了一个博客，里面大致说的就是，切换了 tab，让每个 swiper 的父盒子(这个 tab 盒子添加了一个 display: “none”)</p><p>所以就造成了：swiper 轮播失效。</p><p>然后他说的就是，每次切换回来的时候重新初始化 swiper</p><p>所以，我的方案是：每次切换 tab 时，通过全局事件总线，来让子组件重新调用函数进行 swiper 的初始化。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="swiper-部分代码"><a href="#swiper-部分代码" class="headerlink" title="swiper 部分代码"></a>swiper 部分代码</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container judge-swiper swiper-no-swiping swiper-container-setting&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in judgeDataList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;judge-box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="以前的代码"><a href="#以前的代码" class="headerlink" title="以前的代码"></a>以前的代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// eslint-disable-next-line no-unused-vars</span></span><br><span class="line"><span class="keyword">let</span> judgeSwiper</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        _initJudgeSwiper () &#123;</span><br><span class="line">            <span class="comment">// eslint-disable-next-line no-new</span></span><br><span class="line">            judgeSwiper = <span class="keyword">new</span> <span class="title class_">Swiper</span>(<span class="string">&#x27;.judge-swiper&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">loop</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">autoplay</span>: &#123;</span><br><span class="line">                    <span class="attr">delay</span>: <span class="number">2000</span>,</span><br><span class="line">                    <span class="attr">disableOnInteraction</span>: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">speed</span>: <span class="number">3000</span>,</span><br><span class="line">                <span class="attr">slidesPerView</span>: <span class="number">4</span>,</span><br><span class="line">                <span class="attr">spaceBetween</span>: <span class="number">40</span>,</span><br><span class="line">                <span class="attr">preloadImages</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">observer</span>: <span class="literal">true</span>, <span class="comment">// 修改 swiper 自己或子元素时，自动初始化 swiper 默认为 false</span></span><br><span class="line">                <span class="attr">observeParents</span>: <span class="literal">false</span> <span class="comment">// 修改 swiper 的父元素时，自动初始化 swiper</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    activated () &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">_initJudgeSwiper</span>()</span><br><span class="line">        &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改后的代码"><a href="#修改后的代码" class="headerlink" title="修改后的代码"></a>修改后的代码</h4><p><strong>父组件</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;el-tabs v-model=<span class="string">&quot;defaultTab&quot;</span> style=<span class="string">&quot;margin-top: -15px&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;content-wrapper&quot;</span> @tab-click=<span class="string">&quot;tabClickHandle&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-tab-pane</span> <span class="attr">label</span>=<span class="string">&quot;评委介绍页&quot;</span> <span class="attr">name</span>=<span class="string">&quot;judgeShow&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span><span class="tag">&lt;<span class="name">ScreenJudgeShow</span> @<span class="attr">_submitJudgeData</span>=<span class="string">&quot;_submitJudgeData&quot;</span> <span class="attr">:judgeData</span>=<span class="string">&quot;subcomponentData.judgeData&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ScreenJudgeShow</span>&gt;</span><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-tabs</span>&gt;</span></span></span><br><span class="line">&lt;/el-tab-pane&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    tabClickHandle (tab, event) &#123;</span><br><span class="line">     <span class="comment">// 当点击了这个 tab 后就告诉对应子组件: 我被点击了，你快点初始化 swiper 组件，让它动起来</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;initJudgeSwiper&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>解释一下：</p></blockquote><ul><li><code>@tab-click=&quot;tabClickHandle&quot;</code>: 父子组件之间的 $emit 通信(本次讲解的通信，使用的是事件委托，本来的 tab 标签较多，这里未展示完全)</li><li><code>@_submitJudgeData=&quot;_submitJudgeData&quot;</code>: 父子组件之间的 $emit 通信(这个是另一个的通信，这里可以不管)</li><li><code>:judgeData=&quot;subcomponentData.judgeData&quot;</code>: 父子组件之间的 props 通信</li></ul><p><strong>子组件</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line no-unused-vars</span></span><br><span class="line"><span class="keyword">let</span> judgeSwiper</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        _initJudgeSwiper () &#123;</span><br><span class="line">            <span class="comment">// eslint-disable-next-line no-new</span></span><br><span class="line">            judgeSwiper = <span class="keyword">new</span> <span class="title class_">Swiper</span>(<span class="string">&#x27;.judge-swiper&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">loop</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">autoplay</span>: &#123;</span><br><span class="line">                    <span class="attr">delay</span>: <span class="number">2000</span>,</span><br><span class="line">                    <span class="attr">disableOnInteraction</span>: <span class="literal">false</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">speed</span>: <span class="number">3000</span>,</span><br><span class="line">                <span class="attr">slidesPerView</span>: <span class="number">4</span>,</span><br><span class="line">                <span class="attr">spaceBetween</span>: <span class="number">40</span>,</span><br><span class="line">                <span class="attr">preloadImages</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">observer</span>: <span class="literal">true</span>, <span class="comment">// 修改 swiper 自己或子元素时，自动初始化 swiper 默认为 false</span></span><br><span class="line">                <span class="attr">observeParents</span>: <span class="literal">false</span> <span class="comment">// 修改 swiper 的父元素时，自动初始化 swiper</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    activated () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 收到父组件传递的消息(我被点击了，你快点初始化 swiper 组件，让它动起来)，开始对 swiper 进行初始化</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;initJudgeSwiper&#x27;</span>, <span class="variable language_">this</span>.<span class="property">_initJudgeSwiper</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;我们有个需求，就是不同功能中都有轮播，然后使用的是 swiper。&lt;/p&gt;
&lt;p&gt;也就是切换 tab 标签，内部的 swiper 变开始自动</summary>
      
    
    
    
    <category term="使用swiper出现的bug" scheme="http://ran-up.github.io/categories/%E4%BD%BF%E7%94%A8swiper%E5%87%BA%E7%8E%B0%E7%9A%84bug/"/>
    
    
    <category term="项目bug" scheme="http://ran-up.github.io/tags/%E9%A1%B9%E7%9B%AEbug/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript题</title>
    <link href="http://ran-up.github.io/2023/05/30/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/JavaScript%E9%A2%98/"/>
    <id>http://ran-up.github.io/2023/05/30/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/JavaScript%E9%A2%98/</id>
    <published>2023-05-30T12:31:03.000Z</published>
    <updated>2024-12-27T17:38:35.764Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一道关于-Promise-的面试题"><a href="#一道关于-Promise-的面试题" class="headerlink" title="一道关于 Promise 的面试题"></a>一道关于 Promise 的面试题</h2><p><strong>要求：</strong> 使用以下代码实现：首先输出 1，等待 3 秒后才输出 3</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">3000</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><details>    <div>        <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">3000</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">delay</span>(<span class="params">time</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> time !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请输入数值类型&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(resolve, time)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></details><h2 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>,</span><br><span class="line">  b = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  A = <span class="keyword">function</span> (<span class="params">b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a + b++)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a++)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">A</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">A</span>(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><details>    <p>1</p>    <p>4</p></details><h2 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;&#125;,</span><br><span class="line">  b = <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  c = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">a[b] = <span class="string">&#x27;唐诗&#x27;</span></span><br><span class="line"></span><br><span class="line">a[c] = <span class="string">&#x27;宋词&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[b])</span><br></pre></td></tr></table></figure><details>    <p>宋词</p>    <p>js对象中的key通常是字符串或Symbol类型。使用其他类型作为键，js会自动转换为字符串或Symbol。</p></details><h2 id="输出结果-2"><a href="#输出结果-2" class="headerlink" title="输出结果"></a>输出结果</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;&#125;,</span><br><span class="line">  b = <span class="title class_">Symbol</span>(<span class="string">&#x27;1&#x27;</span>),</span><br><span class="line">  c = <span class="title class_">Symbol</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a[b] = <span class="string">&#x27;唐诗&#x27;</span></span><br><span class="line"></span><br><span class="line">a[c] = <span class="string">&#x27;宋词&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[b])</span><br></pre></td></tr></table></figure><details>    <p>唐诗</p>    <p>Symbol是唯一的。</p></details><h2 id="输出结果-3"><a href="#输出结果-3" class="headerlink" title="输出结果"></a>输出结果</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;&#125;,</span><br><span class="line">  b = &#123;</span><br><span class="line">    <span class="attr">n</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  c = &#123;</span><br><span class="line">    <span class="attr">m</span>: <span class="string">&#x27;2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">a[b] = <span class="string">&#x27;唐诗&#x27;</span></span><br><span class="line"></span><br><span class="line">a[c] = <span class="string">&#x27;宋词&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[b])</span><br></pre></td></tr></table></figure><details>    <p>宋词</p>    <p>对象作为key时会调用toString()转换为字符串，最终为：[object Object]。</p></details><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> test = (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>((i *= <span class="number">2</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><details>    <p>弹出框中显示4，注意alert只会输出字符串类型，所以准确回答是：字符串4。</p>    <p>test函数是立即执行函数，返回一个函数，其中的内容为：alert(4)。</p>    <p>调用test(5)，其实5没有用，立即函数中的i是后面调用的2，所以test(5)传递的参数无效。</p></details><h2 id="输出结果-4"><a href="#输出结果-4" class="headerlink" title="输出结果"></a>输出结果</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="title function_">reject</span>(<span class="number">4</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><details>    <p>1</p>    <p>2</p>    <p>5</p>    <p>3</p>    <ul>        <li>console.log(1)，输出 1。</li>        <li>const promise = new Promise((resolve, reject) => {...}), 创建一个 Promise。</li>        <li>console.log(2)，输出 2。</li>        <li>setTimeout(() => {...}, 0)，添加到宏任务队列中。</li>        <li>promise.then((data) => {...}).catch((error) => {...})，添加到微任务队列中。</li>        <li>console.log(5)，输出 5。</li>        <li>setTimeout 内部的代码执行，输出 6。</li>        <li>resolve(3)：Promise 被解决，传递了数据 3。</li>        <li>reject(4)：这行代码不会被执行，因为 Promise 已经被解决了。</li>    </ul></details><h2 id="输出结果-5"><a href="#输出结果-5" class="headerlink" title="输出结果"></a>输出结果</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(++i), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details>    <p>4</p>    <p>5</p>    <p>6</p></details><h2 id="输出结果-6"><a href="#输出结果-6" class="headerlink" title="输出结果"></a>输出结果</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fullname = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">fullname</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="attr">prop</span>: &#123;</span><br><span class="line">    <span class="attr">fullname</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="attr">getFullname</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">fullname</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">prop</span>.<span class="title function_">getFullname</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = obj.<span class="property">prop</span>.<span class="property">getFullname</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>())</span><br></pre></td></tr></table></figure><details>    <p>a</p>    <p>a</p></details><h2 id="写一个函数根据参数输出对应的棱形"><a href="#写一个函数根据参数输出对应的棱形" class="headerlink" title="写一个函数根据参数输出对应的棱形"></a>写一个函数根据参数输出对应的棱形</h2><img src="/images/前端面试集锦/JavaScript题/输出对应菱形.png"/><details>    <div>      <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createDiamondByParam</span>(<span class="params">count</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(count - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出上面部分</span></span><br><span class="line">    <span class="keyword">const</span> rows = <span class="number">2</span> * count - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; rows; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> num = (rows - i) / <span class="number">2</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27; &#x27;</span>.<span class="title function_">repeat</span>(num) + <span class="string">&#x27;*&#x27;</span>.<span class="title function_">repeat</span>(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出下面部分</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = rows; i &gt; <span class="number">0</span>; i -= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> num = (rows - i) / <span class="number">2</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27; &#x27;</span>.<span class="title function_">repeat</span>(num) + <span class="string">&#x27;*&#x27;</span>.<span class="title function_">repeat</span>(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">createDiamondByParam</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>    </div></details>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一道关于-Promise-的面试题&quot;&gt;&lt;a href=&quot;#一道关于-Promise-的面试题&quot; class=&quot;headerlink&quot; title=&quot;一道关于 Promise 的面试题&quot;&gt;&lt;/a&gt;一道关于 Promise 的面试题&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;要求</summary>
      
    
    
    
    <category term="前端面试集锦" scheme="http://ran-up.github.io/categories/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%9B%86%E9%94%A6/"/>
    
    
    <category term="JavaScript" scheme="http://ran-up.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
